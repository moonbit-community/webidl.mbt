LBRACKET, 6:1-6:2
ID("Exposed"), 6:2-6:9
EQUAL, 6:9-6:10
STAR, 6:10-6:11
RBRACKET, 6:11-6:12
INTERFACE, 7:1-7:10
ID("Event"), 7:11-7:16
LBRACE, 7:17-7:18
CONSTRUCTOR, 8:3-8:14
LPAREN, 8:14-8:15
DOMSTRING, 8:15-8:24
ID("type"), 8:25-8:29
COMMA, 8:29-8:30
OPTIONAL, 8:31-8:39
ID("EventInit"), 8:40-8:49
ID("eventInitDict"), 8:50-8:63
EQUAL, 8:64-8:65
LBRACE, 8:66-8:67
RBRACE, 8:67-8:68
RPAREN, 8:68-8:69
SEMI, 8:69-8:70
READONLY, 10:3-10:11
ATTRIBUTE, 10:12-10:21
DOMSTRING, 10:22-10:31
ID("type"), 10:32-10:36
SEMI, 10:36-10:37
READONLY, 11:3-11:11
ATTRIBUTE, 11:12-11:21
ID("EventTarget"), 11:22-11:33
QUESTION, 11:33-11:34
ID("target"), 11:35-11:41
SEMI, 11:41-11:42
READONLY, 12:3-12:11
ATTRIBUTE, 12:12-12:21
ID("EventTarget"), 12:22-12:33
QUESTION, 12:33-12:34
ID("srcElement"), 12:35-12:45
SEMI, 12:45-12:46
READONLY, 13:3-13:11
ATTRIBUTE, 13:12-13:21
ID("EventTarget"), 13:22-13:33
QUESTION, 13:33-13:34
ID("currentTarget"), 13:35-13:48
SEMI, 13:48-13:49
SEQUENCE, 14:3-14:11
LT, 14:11-14:12
ID("EventTarget"), 14:12-14:23
GT, 14:23-14:24
ID("composedPath"), 14:25-14:37
LPAREN, 14:37-14:38
RPAREN, 14:38-14:39
SEMI, 14:39-14:40
CONST, 16:3-16:8
UNSIGNED, 16:9-16:17
SHORT, 16:18-16:23
ID("NONE"), 16:24-16:28
EQUAL, 16:29-16:30
INT("0"), 16:31-16:32
SEMI, 16:32-16:33
CONST, 17:3-17:8
UNSIGNED, 17:9-17:17
SHORT, 17:18-17:23
ID("CAPTURING_PHASE"), 17:24-17:39
EQUAL, 17:40-17:41
INT("1"), 17:42-17:43
SEMI, 17:43-17:44
CONST, 18:3-18:8
UNSIGNED, 18:9-18:17
SHORT, 18:18-18:23
ID("AT_TARGET"), 18:24-18:33
EQUAL, 18:34-18:35
INT("2"), 18:36-18:37
SEMI, 18:37-18:38
CONST, 19:3-19:8
UNSIGNED, 19:9-19:17
SHORT, 19:18-19:23
ID("BUBBLING_PHASE"), 19:24-19:38
EQUAL, 19:39-19:40
INT("3"), 19:41-19:42
SEMI, 19:42-19:43
READONLY, 20:3-20:11
ATTRIBUTE, 20:12-20:21
UNSIGNED, 20:22-20:30
SHORT, 20:31-20:36
ID("eventPhase"), 20:37-20:47
SEMI, 20:47-20:48
UNDEFINED, 22:3-22:12
ID("stopPropagation"), 22:13-22:28
LPAREN, 22:28-22:29
RPAREN, 22:29-22:30
SEMI, 22:30-22:31
ATTRIBUTE, 23:12-23:21
BOOLEAN, 23:22-23:29
ID("cancelBubble"), 23:30-23:42
SEMI, 23:42-23:43
UNDEFINED, 24:3-24:12
ID("stopImmediatePropagation"), 24:13-24:37
LPAREN, 24:37-24:38
RPAREN, 24:38-24:39
SEMI, 24:39-24:40
READONLY, 26:3-26:11
ATTRIBUTE, 26:12-26:21
BOOLEAN, 26:22-26:29
ID("bubbles"), 26:30-26:37
SEMI, 26:37-26:38
READONLY, 27:3-27:11
ATTRIBUTE, 27:12-27:21
BOOLEAN, 27:22-27:29
ID("cancelable"), 27:30-27:40
SEMI, 27:40-27:41
ATTRIBUTE, 28:12-28:21
BOOLEAN, 28:22-28:29
ID("returnValue"), 28:30-28:41
SEMI, 28:41-28:42
UNDEFINED, 29:3-29:12
ID("preventDefault"), 29:13-29:27
LPAREN, 29:27-29:28
RPAREN, 29:28-29:29
SEMI, 29:29-29:30
READONLY, 30:3-30:11
ATTRIBUTE, 30:12-30:21
BOOLEAN, 30:22-30:29
ID("defaultPrevented"), 30:30-30:46
SEMI, 30:46-30:47
READONLY, 31:3-31:11
ATTRIBUTE, 31:12-31:21
BOOLEAN, 31:22-31:29
ID("composed"), 31:30-31:38
SEMI, 31:38-31:39
LBRACKET, 33:3-33:4
ID("LegacyUnforgeable"), 33:4-33:21
RBRACKET, 33:21-33:22
READONLY, 33:23-33:31
ATTRIBUTE, 33:32-33:41
BOOLEAN, 33:42-33:49
ID("isTrusted"), 33:50-33:59
SEMI, 33:59-33:60
READONLY, 34:3-34:11
ATTRIBUTE, 34:12-34:21
ID("DOMHighResTimeStamp"), 34:22-34:41
ID("timeStamp"), 34:42-34:51
SEMI, 34:51-34:52
UNDEFINED, 36:3-36:12
ID("initEvent"), 36:13-36:22
LPAREN, 36:22-36:23
DOMSTRING, 36:23-36:32
ID("type"), 36:33-36:37
COMMA, 36:37-36:38
OPTIONAL, 36:39-36:47
BOOLEAN, 36:48-36:55
ID("bubbles"), 36:56-36:63
EQUAL, 36:64-36:65
FALSE, 36:66-36:71
COMMA, 36:71-36:72
OPTIONAL, 36:73-36:81
BOOLEAN, 36:82-36:89
ID("cancelable"), 36:90-36:100
EQUAL, 36:101-36:102
FALSE, 36:103-36:108
RPAREN, 36:108-36:109
SEMI, 36:109-36:110
RBRACE, 37:1-37:2
SEMI, 37:2-37:3
DICTIONARY, 39:1-39:11
ID("EventInit"), 39:12-39:21
LBRACE, 39:22-39:23
BOOLEAN, 40:3-40:10
ID("bubbles"), 40:11-40:18
EQUAL, 40:19-40:20
FALSE, 40:21-40:26
SEMI, 40:26-40:27
BOOLEAN, 41:3-41:10
ID("cancelable"), 41:11-41:21
EQUAL, 41:22-41:23
FALSE, 41:24-41:29
SEMI, 41:29-41:30
BOOLEAN, 42:3-42:10
ID("composed"), 42:11-42:19
EQUAL, 42:20-42:21
FALSE, 42:22-42:27
SEMI, 42:27-42:28
RBRACE, 43:1-43:2
SEMI, 43:2-43:3
PARTIAL, 45:1-45:8
INTERFACE, 45:9-45:18
ID("Window"), 45:19-45:25
LBRACE, 45:26-45:27
LBRACKET, 46:3-46:4
ID("Replaceable"), 46:4-46:15
RBRACKET, 46:15-46:16
READONLY, 46:17-46:25
ATTRIBUTE, 46:26-46:35
LPAREN, 46:36-46:37
ID("Event"), 46:37-46:42
OR, 46:43-46:45
UNDEFINED, 46:46-46:55
RPAREN, 46:55-46:56
ID("event"), 46:57-46:62
SEMI, 46:62-46:63
RBRACE, 47:1-47:2
SEMI, 47:2-47:3
LBRACKET, 49:1-49:2
ID("Exposed"), 49:2-49:9
EQUAL, 49:9-49:10
STAR, 49:10-49:11
RBRACKET, 49:11-49:12
INTERFACE, 50:1-50:10
ID("CustomEvent"), 50:11-50:22
COLON, 50:23-50:24
ID("Event"), 50:25-50:30
LBRACE, 50:31-50:32
CONSTRUCTOR, 51:3-51:14
LPAREN, 51:14-51:15
DOMSTRING, 51:15-51:24
ID("type"), 51:25-51:29
COMMA, 51:29-51:30
OPTIONAL, 51:31-51:39
ID("CustomEventInit"), 51:40-51:55
ID("eventInitDict"), 51:56-51:69
EQUAL, 51:70-51:71
LBRACE, 51:72-51:73
RBRACE, 51:73-51:74
RPAREN, 51:74-51:75
SEMI, 51:75-51:76
READONLY, 53:3-53:11
ATTRIBUTE, 53:12-53:21
ANY, 53:22-53:25
ID("detail"), 53:26-53:32
SEMI, 53:32-53:33
UNDEFINED, 55:3-55:12
ID("initCustomEvent"), 55:13-55:28
LPAREN, 55:28-55:29
DOMSTRING, 55:29-55:38
ID("type"), 55:39-55:43
COMMA, 55:43-55:44
OPTIONAL, 55:45-55:53
BOOLEAN, 55:54-55:61
ID("bubbles"), 55:62-55:69
EQUAL, 55:70-55:71
FALSE, 55:72-55:77
COMMA, 55:77-55:78
OPTIONAL, 55:79-55:87
BOOLEAN, 55:88-55:95
ID("cancelable"), 55:96-55:106
EQUAL, 55:107-55:108
FALSE, 55:109-55:114
COMMA, 55:114-55:115
OPTIONAL, 55:116-55:124
ANY, 55:125-55:128
ID("detail"), 55:129-55:135
EQUAL, 55:136-55:137
NULL, 55:138-55:142
RPAREN, 55:142-55:143
SEMI, 55:143-55:144
RBRACE, 56:1-56:2
SEMI, 56:2-56:3
DICTIONARY, 58:1-58:11
ID("CustomEventInit"), 58:12-58:27
COLON, 58:28-58:29
ID("EventInit"), 58:30-58:39
LBRACE, 58:40-58:41
ANY, 59:3-59:6
ID("detail"), 59:7-59:13
EQUAL, 59:14-59:15
NULL, 59:16-59:20
SEMI, 59:20-59:21
RBRACE, 60:1-60:2
SEMI, 60:2-60:3
LBRACKET, 62:1-62:2
ID("Exposed"), 62:2-62:9
EQUAL, 62:9-62:10
STAR, 62:10-62:11
RBRACKET, 62:11-62:12
INTERFACE, 63:1-63:10
ID("EventTarget"), 63:11-63:22
LBRACE, 63:23-63:24
CONSTRUCTOR, 64:3-64:14
LPAREN, 64:14-64:15
RPAREN, 64:15-64:16
SEMI, 64:16-64:17
UNDEFINED, 66:3-66:12
ID("addEventListener"), 66:13-66:29
LPAREN, 66:29-66:30
DOMSTRING, 66:30-66:39
ID("type"), 66:40-66:44
COMMA, 66:44-66:45
ID("EventListener"), 66:46-66:59
QUESTION, 66:59-66:60
CALLBACK, 66:61-66:69
COMMA, 66:69-66:70
OPTIONAL, 66:71-66:79
LPAREN, 66:80-66:81
ID("AddEventListenerOptions"), 66:81-66:104
OR, 66:105-66:107
BOOLEAN, 66:108-66:115
RPAREN, 66:115-66:116
ID("options"), 66:117-66:124
EQUAL, 66:125-66:126
LBRACE, 66:127-66:128
RBRACE, 66:128-66:129
RPAREN, 66:129-66:130
SEMI, 66:130-66:131
UNDEFINED, 67:3-67:12
ID("removeEventListener"), 67:13-67:32
LPAREN, 67:32-67:33
DOMSTRING, 67:33-67:42
ID("type"), 67:43-67:47
COMMA, 67:47-67:48
ID("EventListener"), 67:49-67:62
QUESTION, 67:62-67:63
CALLBACK, 67:64-67:72
COMMA, 67:72-67:73
OPTIONAL, 67:74-67:82
LPAREN, 67:83-67:84
ID("EventListenerOptions"), 67:84-67:104
OR, 67:105-67:107
BOOLEAN, 67:108-67:115
RPAREN, 67:115-67:116
ID("options"), 67:117-67:124
EQUAL, 67:125-67:126
LBRACE, 67:127-67:128
RBRACE, 67:128-67:129
RPAREN, 67:129-67:130
SEMI, 67:130-67:131
BOOLEAN, 68:3-68:10
ID("dispatchEvent"), 68:11-68:24
LPAREN, 68:24-68:25
ID("Event"), 68:25-68:30
ID("event"), 68:31-68:36
RPAREN, 68:36-68:37
SEMI, 68:37-68:38
RBRACE, 69:1-69:2
SEMI, 69:2-69:3
CALLBACK, 71:1-71:9
INTERFACE, 71:10-71:19
ID("EventListener"), 71:20-71:33
LBRACE, 71:34-71:35
UNDEFINED, 72:3-72:12
ID("handleEvent"), 72:13-72:24
LPAREN, 72:24-72:25
ID("Event"), 72:25-72:30
ID("event"), 72:31-72:36
RPAREN, 72:36-72:37
SEMI, 72:37-72:38
RBRACE, 73:1-73:2
SEMI, 73:2-73:3
DICTIONARY, 75:1-75:11
ID("EventListenerOptions"), 75:12-75:32
LBRACE, 75:33-75:34
BOOLEAN, 76:3-76:10
ID("capture"), 76:11-76:18
EQUAL, 76:19-76:20
FALSE, 76:21-76:26
SEMI, 76:26-76:27
RBRACE, 77:1-77:2
SEMI, 77:2-77:3
DICTIONARY, 79:1-79:11
ID("AddEventListenerOptions"), 79:12-79:35
COLON, 79:36-79:37
ID("EventListenerOptions"), 79:38-79:58
LBRACE, 79:59-79:60
BOOLEAN, 80:3-80:10
ID("passive"), 80:11-80:18
SEMI, 80:18-80:19
BOOLEAN, 81:3-81:10
ID("once"), 81:11-81:15
EQUAL, 81:16-81:17
FALSE, 81:18-81:23
SEMI, 81:23-81:24
ID("AbortSignal"), 82:3-82:14
ID("signal"), 82:15-82:21
SEMI, 82:21-82:22
RBRACE, 83:1-83:2
SEMI, 83:2-83:3
LBRACKET, 85:1-85:2
ID("Exposed"), 85:2-85:9
EQUAL, 85:9-85:10
STAR, 85:10-85:11
RBRACKET, 85:11-85:12
INTERFACE, 86:1-86:10
ID("AbortController"), 86:11-86:26
LBRACE, 86:27-86:28
CONSTRUCTOR, 87:3-87:14
LPAREN, 87:14-87:15
RPAREN, 87:15-87:16
SEMI, 87:16-87:17
LBRACKET, 89:3-89:4
ID("SameObject"), 89:4-89:14
RBRACKET, 89:14-89:15
READONLY, 89:16-89:24
ATTRIBUTE, 89:25-89:34
ID("AbortSignal"), 89:35-89:46
ID("signal"), 89:47-89:53
SEMI, 89:53-89:54
UNDEFINED, 91:3-91:12
ID("abort"), 91:13-91:18
LPAREN, 91:18-91:19
OPTIONAL, 91:19-91:27
ANY, 91:28-91:31
ID("reason"), 91:32-91:38
RPAREN, 91:38-91:39
SEMI, 91:39-91:40
RBRACE, 92:1-92:2
SEMI, 92:2-92:3
LBRACKET, 94:1-94:2
ID("Exposed"), 94:2-94:9
EQUAL, 94:9-94:10
STAR, 94:10-94:11
RBRACKET, 94:11-94:12
INTERFACE, 95:1-95:10
ID("AbortSignal"), 95:11-95:22
COLON, 95:23-95:24
ID("EventTarget"), 95:25-95:36
LBRACE, 95:37-95:38
LBRACKET, 96:3-96:4
ID("NewObject"), 96:4-96:13
RBRACKET, 96:13-96:14
STATIC, 96:15-96:21
ID("AbortSignal"), 96:22-96:33
ID("abort"), 96:34-96:39
LPAREN, 96:39-96:40
OPTIONAL, 96:40-96:48
ANY, 96:49-96:52
ID("reason"), 96:53-96:59
RPAREN, 96:59-96:60
SEMI, 96:60-96:61
LBRACKET, 97:3-97:4
ID("Exposed"), 97:4-97:11
EQUAL, 97:11-97:12
LPAREN, 97:12-97:13
ID("Window"), 97:13-97:19
COMMA, 97:19-97:20
ID("Worker"), 97:20-97:26
RPAREN, 97:26-97:27
COMMA, 97:27-97:28
ID("NewObject"), 97:29-97:38
RBRACKET, 97:38-97:39
STATIC, 97:40-97:46
ID("AbortSignal"), 97:47-97:58
ID("timeout"), 97:59-97:66
LPAREN, 97:66-97:67
LBRACKET, 97:67-97:68
ID("EnforceRange"), 97:68-97:80
RBRACKET, 97:80-97:81
UNSIGNED, 97:82-97:90
LONG, 97:91-97:95
LONG, 97:96-97:100
ID("milliseconds"), 97:101-97:113
RPAREN, 97:113-97:114
SEMI, 97:114-97:115
LBRACKET, 98:3-98:4
ID("NewObject"), 98:4-98:13
RBRACKET, 98:13-98:14
STATIC, 98:15-98:21
ID("AbortSignal"), 98:22-98:33
ID("_any"), 98:34-98:38
LPAREN, 98:38-98:39
SEQUENCE, 98:39-98:47
LT, 98:47-98:48
ID("AbortSignal"), 98:48-98:59
GT, 98:59-98:60
ID("signals"), 98:61-98:68
RPAREN, 98:68-98:69
SEMI, 98:69-98:70
READONLY, 100:3-100:11
ATTRIBUTE, 100:12-100:21
BOOLEAN, 100:22-100:29
ID("aborted"), 100:30-100:37
SEMI, 100:37-100:38
READONLY, 101:3-101:11
ATTRIBUTE, 101:12-101:21
ANY, 101:22-101:25
ID("reason"), 101:26-101:32
SEMI, 101:32-101:33
UNDEFINED, 102:3-102:12
ID("throwIfAborted"), 102:13-102:27
LPAREN, 102:27-102:28
RPAREN, 102:28-102:29
SEMI, 102:29-102:30
ATTRIBUTE, 104:3-104:12
ID("EventHandler"), 104:13-104:25
ID("onabort"), 104:26-104:33
SEMI, 104:33-104:34
RBRACE, 105:1-105:2
SEMI, 105:2-105:3
INTERFACE, 106:1-106:10
MIXIN, 106:11-106:16
ID("NonElementParentNode"), 106:17-106:37
LBRACE, 106:38-106:39
ID("Element"), 107:3-107:10
QUESTION, 107:10-107:11
ID("getElementById"), 107:12-107:26
LPAREN, 107:26-107:27
DOMSTRING, 107:27-107:36
ID("elementId"), 107:37-107:46
RPAREN, 107:46-107:47
SEMI, 107:47-107:48
RBRACE, 108:1-108:2
SEMI, 108:2-108:3
ID("Document"), 109:1-109:9
INCLUDES, 109:10-109:18
ID("NonElementParentNode"), 109:19-109:39
SEMI, 109:39-109:40
ID("DocumentFragment"), 110:1-110:17
INCLUDES, 110:18-110:26
ID("NonElementParentNode"), 110:27-110:47
SEMI, 110:47-110:48
INTERFACE, 112:1-112:10
MIXIN, 112:11-112:16
ID("DocumentOrShadowRoot"), 112:17-112:37
LBRACE, 112:38-112:39
READONLY, 113:3-113:11
ATTRIBUTE, 113:12-113:21
ID("CustomElementRegistry"), 113:22-113:43
QUESTION, 113:43-113:44
ID("customElementRegistry"), 113:45-113:66
SEMI, 113:66-113:67
RBRACE, 114:1-114:2
SEMI, 114:2-114:3
ID("Document"), 115:1-115:9
INCLUDES, 115:10-115:18
ID("DocumentOrShadowRoot"), 115:19-115:39
SEMI, 115:39-115:40
ID("ShadowRoot"), 116:1-116:11
INCLUDES, 116:12-116:20
ID("DocumentOrShadowRoot"), 116:21-116:41
SEMI, 116:41-116:42
INTERFACE, 118:1-118:10
MIXIN, 118:11-118:16
ID("ParentNode"), 118:17-118:27
LBRACE, 118:28-118:29
LBRACKET, 119:3-119:4
ID("SameObject"), 119:4-119:14
RBRACKET, 119:14-119:15
READONLY, 119:16-119:24
ATTRIBUTE, 119:25-119:34
ID("HTMLCollection"), 119:35-119:49
ID("children"), 119:50-119:58
SEMI, 119:58-119:59
READONLY, 120:3-120:11
ATTRIBUTE, 120:12-120:21
ID("Element"), 120:22-120:29
QUESTION, 120:29-120:30
ID("firstElementChild"), 120:31-120:48
SEMI, 120:48-120:49
READONLY, 121:3-121:11
ATTRIBUTE, 121:12-121:21
ID("Element"), 121:22-121:29
QUESTION, 121:29-121:30
ID("lastElementChild"), 121:31-121:47
SEMI, 121:47-121:48
READONLY, 122:3-122:11
ATTRIBUTE, 122:12-122:21
UNSIGNED, 122:22-122:30
LONG, 122:31-122:35
ID("childElementCount"), 122:36-122:53
SEMI, 122:53-122:54
LBRACKET, 124:3-124:4
ID("CEReactions"), 124:4-124:15
COMMA, 124:15-124:16
ID("Unscopable"), 124:17-124:27
RBRACKET, 124:27-124:28
UNDEFINED, 124:29-124:38
ID("prepend"), 124:39-124:46
LPAREN, 124:46-124:47
LPAREN, 124:47-124:48
ID("Node"), 124:48-124:52
OR, 124:53-124:55
DOMSTRING, 124:56-124:65
RPAREN, 124:65-124:66
ELLIPS, 124:66-124:69
ID("nodes"), 124:70-124:75
RPAREN, 124:75-124:76
SEMI, 124:76-124:77
LBRACKET, 125:3-125:4
ID("CEReactions"), 125:4-125:15
COMMA, 125:15-125:16
ID("Unscopable"), 125:17-125:27
RBRACKET, 125:27-125:28
UNDEFINED, 125:29-125:38
ID("append"), 125:39-125:45
LPAREN, 125:45-125:46
LPAREN, 125:46-125:47
ID("Node"), 125:47-125:51
OR, 125:52-125:54
DOMSTRING, 125:55-125:64
RPAREN, 125:64-125:65
ELLIPS, 125:65-125:68
ID("nodes"), 125:69-125:74
RPAREN, 125:74-125:75
SEMI, 125:75-125:76
LBRACKET, 126:3-126:4
ID("CEReactions"), 126:4-126:15
COMMA, 126:15-126:16
ID("Unscopable"), 126:17-126:27
RBRACKET, 126:27-126:28
UNDEFINED, 126:29-126:38
ID("replaceChildren"), 126:39-126:54
LPAREN, 126:54-126:55
LPAREN, 126:55-126:56
ID("Node"), 126:56-126:60
OR, 126:61-126:63
DOMSTRING, 126:64-126:73
RPAREN, 126:73-126:74
ELLIPS, 126:74-126:77
ID("nodes"), 126:78-126:83
RPAREN, 126:83-126:84
SEMI, 126:84-126:85
LBRACKET, 128:3-128:4
ID("CEReactions"), 128:4-128:15
RBRACKET, 128:15-128:16
UNDEFINED, 128:17-128:26
ID("moveBefore"), 128:27-128:37
LPAREN, 128:37-128:38
ID("Node"), 128:38-128:42
ID("node"), 128:43-128:47
COMMA, 128:47-128:48
ID("Node"), 128:49-128:53
QUESTION, 128:53-128:54
ID("child"), 128:55-128:60
RPAREN, 128:60-128:61
SEMI, 128:61-128:62
ID("Element"), 130:3-130:10
QUESTION, 130:10-130:11
ID("querySelector"), 130:12-130:25
LPAREN, 130:25-130:26
DOMSTRING, 130:26-130:35
ID("selectors"), 130:36-130:45
RPAREN, 130:45-130:46
SEMI, 130:46-130:47
LBRACKET, 131:3-131:4
ID("NewObject"), 131:4-131:13
RBRACKET, 131:13-131:14
ID("NodeList"), 131:15-131:23
ID("querySelectorAll"), 131:24-131:40
LPAREN, 131:40-131:41
DOMSTRING, 131:41-131:50
ID("selectors"), 131:51-131:60
RPAREN, 131:60-131:61
SEMI, 131:61-131:62
RBRACE, 132:1-132:2
SEMI, 132:2-132:3
ID("Document"), 133:1-133:9
INCLUDES, 133:10-133:18
ID("ParentNode"), 133:19-133:29
SEMI, 133:29-133:30
ID("DocumentFragment"), 134:1-134:17
INCLUDES, 134:18-134:26
ID("ParentNode"), 134:27-134:37
SEMI, 134:37-134:38
ID("Element"), 135:1-135:8
INCLUDES, 135:9-135:17
ID("ParentNode"), 135:18-135:28
SEMI, 135:28-135:29
INTERFACE, 137:1-137:10
MIXIN, 137:11-137:16
ID("NonDocumentTypeChildNode"), 137:17-137:41
LBRACE, 137:42-137:43
READONLY, 138:3-138:11
ATTRIBUTE, 138:12-138:21
ID("Element"), 138:22-138:29
QUESTION, 138:29-138:30
ID("previousElementSibling"), 138:31-138:53
SEMI, 138:53-138:54
READONLY, 139:3-139:11
ATTRIBUTE, 139:12-139:21
ID("Element"), 139:22-139:29
QUESTION, 139:29-139:30
ID("nextElementSibling"), 139:31-139:49
SEMI, 139:49-139:50
RBRACE, 140:1-140:2
SEMI, 140:2-140:3
ID("Element"), 141:1-141:8
INCLUDES, 141:9-141:17
ID("NonDocumentTypeChildNode"), 141:18-141:42
SEMI, 141:42-141:43
ID("CharacterData"), 142:1-142:14
INCLUDES, 142:15-142:23
ID("NonDocumentTypeChildNode"), 142:24-142:48
SEMI, 142:48-142:49
INTERFACE, 144:1-144:10
MIXIN, 144:11-144:16
ID("ChildNode"), 144:17-144:26
LBRACE, 144:27-144:28
LBRACKET, 145:3-145:4
ID("CEReactions"), 145:4-145:15
COMMA, 145:15-145:16
ID("Unscopable"), 145:17-145:27
RBRACKET, 145:27-145:28
UNDEFINED, 145:29-145:38
ID("before"), 145:39-145:45
LPAREN, 145:45-145:46
LPAREN, 145:46-145:47
ID("Node"), 145:47-145:51
OR, 145:52-145:54
DOMSTRING, 145:55-145:64
RPAREN, 145:64-145:65
ELLIPS, 145:65-145:68
ID("nodes"), 145:69-145:74
RPAREN, 145:74-145:75
SEMI, 145:75-145:76
LBRACKET, 146:3-146:4
ID("CEReactions"), 146:4-146:15
COMMA, 146:15-146:16
ID("Unscopable"), 146:17-146:27
RBRACKET, 146:27-146:28
UNDEFINED, 146:29-146:38
ID("after"), 146:39-146:44
LPAREN, 146:44-146:45
LPAREN, 146:45-146:46
ID("Node"), 146:46-146:50
OR, 146:51-146:53
DOMSTRING, 146:54-146:63
RPAREN, 146:63-146:64
ELLIPS, 146:64-146:67
ID("nodes"), 146:68-146:73
RPAREN, 146:73-146:74
SEMI, 146:74-146:75
LBRACKET, 147:3-147:4
ID("CEReactions"), 147:4-147:15
COMMA, 147:15-147:16
ID("Unscopable"), 147:17-147:27
RBRACKET, 147:27-147:28
UNDEFINED, 147:29-147:38
ID("replaceWith"), 147:39-147:50
LPAREN, 147:50-147:51
LPAREN, 147:51-147:52
ID("Node"), 147:52-147:56
OR, 147:57-147:59
DOMSTRING, 147:60-147:69
RPAREN, 147:69-147:70
ELLIPS, 147:70-147:73
ID("nodes"), 147:74-147:79
RPAREN, 147:79-147:80
SEMI, 147:80-147:81
LBRACKET, 148:3-148:4
ID("CEReactions"), 148:4-148:15
COMMA, 148:15-148:16
ID("Unscopable"), 148:17-148:27
RBRACKET, 148:27-148:28
UNDEFINED, 148:29-148:38
ID("remove"), 148:39-148:45
LPAREN, 148:45-148:46
RPAREN, 148:46-148:47
SEMI, 148:47-148:48
RBRACE, 149:1-149:2
SEMI, 149:2-149:3
ID("DocumentType"), 150:1-150:13
INCLUDES, 150:14-150:22
ID("ChildNode"), 150:23-150:32
SEMI, 150:32-150:33
ID("Element"), 151:1-151:8
INCLUDES, 151:9-151:17
ID("ChildNode"), 151:18-151:27
SEMI, 151:27-151:28
ID("CharacterData"), 152:1-152:14
INCLUDES, 152:15-152:23
ID("ChildNode"), 152:24-152:33
SEMI, 152:33-152:34
INTERFACE, 154:1-154:10
MIXIN, 154:11-154:16
ID("Slottable"), 154:17-154:26
LBRACE, 154:27-154:28
READONLY, 155:3-155:11
ATTRIBUTE, 155:12-155:21
ID("HTMLSlotElement"), 155:22-155:37
QUESTION, 155:37-155:38
ID("assignedSlot"), 155:39-155:51
SEMI, 155:51-155:52
RBRACE, 156:1-156:2
SEMI, 156:2-156:3
ID("Element"), 157:1-157:8
INCLUDES, 157:9-157:17
ID("Slottable"), 157:18-157:27
SEMI, 157:27-157:28
ID("Text"), 158:1-158:5
INCLUDES, 158:6-158:14
ID("Slottable"), 158:15-158:24
SEMI, 158:24-158:25
LBRACKET, 160:1-160:2
ID("Exposed"), 160:2-160:9
EQUAL, 160:9-160:10
ID("Window"), 160:10-160:16
RBRACKET, 160:16-160:17
INTERFACE, 161:1-161:10
ID("NodeList"), 161:11-161:19
LBRACE, 161:20-161:21
GETTER, 162:3-162:9
ID("Node"), 162:10-162:14
QUESTION, 162:14-162:15
ID("item"), 162:16-162:20
LPAREN, 162:20-162:21
UNSIGNED, 162:21-162:29
LONG, 162:30-162:34
ID("index"), 162:35-162:40
RPAREN, 162:40-162:41
SEMI, 162:41-162:42
READONLY, 163:3-163:11
ATTRIBUTE, 163:12-163:21
UNSIGNED, 163:22-163:30
LONG, 163:31-163:35
ID("length"), 163:36-163:42
SEMI, 163:42-163:43
ITERABLE, 164:3-164:11
LT, 164:11-164:12
ID("Node"), 164:12-164:16
GT, 164:16-164:17
SEMI, 164:17-164:18
RBRACE, 165:1-165:2
SEMI, 165:2-165:3
LBRACKET, 167:1-167:2
ID("Exposed"), 167:2-167:9
EQUAL, 167:9-167:10
ID("Window"), 167:10-167:16
COMMA, 167:16-167:17
ID("LegacyUnenumerableNamedProperties"), 167:18-167:51
RBRACKET, 167:51-167:52
INTERFACE, 168:1-168:10
ID("HTMLCollection"), 168:11-168:25
LBRACE, 168:26-168:27
READONLY, 169:3-169:11
ATTRIBUTE, 169:12-169:21
UNSIGNED, 169:22-169:30
LONG, 169:31-169:35
ID("length"), 169:36-169:42
SEMI, 169:42-169:43
GETTER, 170:3-170:9
ID("Element"), 170:10-170:17
QUESTION, 170:17-170:18
ID("item"), 170:19-170:23
LPAREN, 170:23-170:24
UNSIGNED, 170:24-170:32
LONG, 170:33-170:37
ID("index"), 170:38-170:43
RPAREN, 170:43-170:44
SEMI, 170:44-170:45
GETTER, 171:3-171:9
ID("Element"), 171:10-171:17
QUESTION, 171:17-171:18
ID("namedItem"), 171:19-171:28
LPAREN, 171:28-171:29
DOMSTRING, 171:29-171:38
ID("name"), 171:39-171:43
RPAREN, 171:43-171:44
SEMI, 171:44-171:45
RBRACE, 172:1-172:2
SEMI, 172:2-172:3
LBRACKET, 174:1-174:2
ID("Exposed"), 174:2-174:9
EQUAL, 174:9-174:10
ID("Window"), 174:10-174:16
RBRACKET, 174:16-174:17
INTERFACE, 175:1-175:10
ID("MutationObserver"), 175:11-175:27
LBRACE, 175:28-175:29
CONSTRUCTOR, 176:3-176:14
LPAREN, 176:14-176:15
ID("MutationCallback"), 176:15-176:31
CALLBACK, 176:32-176:40
RPAREN, 176:40-176:41
SEMI, 176:41-176:42
UNDEFINED, 178:3-178:12
ID("observe"), 178:13-178:20
LPAREN, 178:20-178:21
ID("Node"), 178:21-178:25
ID("target"), 178:26-178:32
COMMA, 178:32-178:33
OPTIONAL, 178:34-178:42
ID("MutationObserverInit"), 178:43-178:63
ID("options"), 178:64-178:71
EQUAL, 178:72-178:73
LBRACE, 178:74-178:75
RBRACE, 178:75-178:76
RPAREN, 178:76-178:77
SEMI, 178:77-178:78
UNDEFINED, 179:3-179:12
ID("disconnect"), 179:13-179:23
LPAREN, 179:23-179:24
RPAREN, 179:24-179:25
SEMI, 179:25-179:26
SEQUENCE, 180:3-180:11
LT, 180:11-180:12
ID("MutationRecord"), 180:12-180:26
GT, 180:26-180:27
ID("takeRecords"), 180:28-180:39
LPAREN, 180:39-180:40
RPAREN, 180:40-180:41
SEMI, 180:41-180:42
RBRACE, 181:1-181:2
SEMI, 181:2-181:3
CALLBACK, 183:1-183:9
ID("MutationCallback"), 183:10-183:26
EQUAL, 183:27-183:28
UNDEFINED, 183:29-183:38
LPAREN, 183:39-183:40
SEQUENCE, 183:40-183:48
LT, 183:48-183:49
ID("MutationRecord"), 183:49-183:63
GT, 183:63-183:64
ID("mutations"), 183:65-183:74
COMMA, 183:74-183:75
ID("MutationObserver"), 183:76-183:92
ID("observer"), 183:93-183:101
RPAREN, 183:101-183:102
SEMI, 183:102-183:103
DICTIONARY, 185:1-185:11
ID("MutationObserverInit"), 185:12-185:32
LBRACE, 185:33-185:34
BOOLEAN, 186:3-186:10
ID("childList"), 186:11-186:20
EQUAL, 186:21-186:22
FALSE, 186:23-186:28
SEMI, 186:28-186:29
BOOLEAN, 187:3-187:10
ID("attributes"), 187:11-187:21
SEMI, 187:21-187:22
BOOLEAN, 188:3-188:10
ID("characterData"), 188:11-188:24
SEMI, 188:24-188:25
BOOLEAN, 189:3-189:10
ID("subtree"), 189:11-189:18
EQUAL, 189:19-189:20
FALSE, 189:21-189:26
SEMI, 189:26-189:27
BOOLEAN, 190:3-190:10
ID("attributeOldValue"), 190:11-190:28
SEMI, 190:28-190:29
BOOLEAN, 191:3-191:10
ID("characterDataOldValue"), 191:11-191:32
SEMI, 191:32-191:33
SEQUENCE, 192:3-192:11
LT, 192:11-192:12
DOMSTRING, 192:12-192:21
GT, 192:21-192:22
ID("attributeFilter"), 192:23-192:38
SEMI, 192:38-192:39
RBRACE, 193:1-193:2
SEMI, 193:2-193:3
LBRACKET, 195:1-195:2
ID("Exposed"), 195:2-195:9
EQUAL, 195:9-195:10
ID("Window"), 195:10-195:16
RBRACKET, 195:16-195:17
INTERFACE, 196:1-196:10
ID("MutationRecord"), 196:11-196:25
LBRACE, 196:26-196:27
READONLY, 197:3-197:11
ATTRIBUTE, 197:12-197:21
DOMSTRING, 197:22-197:31
ID("type"), 197:32-197:36
SEMI, 197:36-197:37
LBRACKET, 198:3-198:4
ID("SameObject"), 198:4-198:14
RBRACKET, 198:14-198:15
READONLY, 198:16-198:24
ATTRIBUTE, 198:25-198:34
ID("Node"), 198:35-198:39
ID("target"), 198:40-198:46
SEMI, 198:46-198:47
LBRACKET, 199:3-199:4
ID("SameObject"), 199:4-199:14
RBRACKET, 199:14-199:15
READONLY, 199:16-199:24
ATTRIBUTE, 199:25-199:34
ID("NodeList"), 199:35-199:43
ID("addedNodes"), 199:44-199:54
SEMI, 199:54-199:55
LBRACKET, 200:3-200:4
ID("SameObject"), 200:4-200:14
RBRACKET, 200:14-200:15
READONLY, 200:16-200:24
ATTRIBUTE, 200:25-200:34
ID("NodeList"), 200:35-200:43
ID("removedNodes"), 200:44-200:56
SEMI, 200:56-200:57
READONLY, 201:3-201:11
ATTRIBUTE, 201:12-201:21
ID("Node"), 201:22-201:26
QUESTION, 201:26-201:27
ID("previousSibling"), 201:28-201:43
SEMI, 201:43-201:44
READONLY, 202:3-202:11
ATTRIBUTE, 202:12-202:21
ID("Node"), 202:22-202:26
QUESTION, 202:26-202:27
ID("nextSibling"), 202:28-202:39
SEMI, 202:39-202:40
READONLY, 203:3-203:11
ATTRIBUTE, 203:12-203:21
DOMSTRING, 203:22-203:31
QUESTION, 203:31-203:32
ID("attributeName"), 203:33-203:46
SEMI, 203:46-203:47
READONLY, 204:3-204:11
ATTRIBUTE, 204:12-204:21
DOMSTRING, 204:22-204:31
QUESTION, 204:31-204:32
ID("attributeNamespace"), 204:33-204:51
SEMI, 204:51-204:52
READONLY, 205:3-205:11
ATTRIBUTE, 205:12-205:21
DOMSTRING, 205:22-205:31
QUESTION, 205:31-205:32
ID("oldValue"), 205:33-205:41
SEMI, 205:41-205:42
RBRACE, 206:1-206:2
SEMI, 206:2-206:3
LBRACKET, 208:1-208:2
ID("Exposed"), 208:2-208:9
EQUAL, 208:9-208:10
ID("Window"), 208:10-208:16
RBRACKET, 208:16-208:17
INTERFACE, 209:1-209:10
ID("Node"), 209:11-209:15
COLON, 209:16-209:17
ID("EventTarget"), 209:18-209:29
LBRACE, 209:30-209:31
CONST, 210:3-210:8
UNSIGNED, 210:9-210:17
SHORT, 210:18-210:23
ID("ELEMENT_NODE"), 210:24-210:36
EQUAL, 210:37-210:38
INT("1"), 210:39-210:40
SEMI, 210:40-210:41
CONST, 211:3-211:8
UNSIGNED, 211:9-211:17
SHORT, 211:18-211:23
ID("ATTRIBUTE_NODE"), 211:24-211:38
EQUAL, 211:39-211:40
INT("2"), 211:41-211:42
SEMI, 211:42-211:43
CONST, 212:3-212:8
UNSIGNED, 212:9-212:17
SHORT, 212:18-212:23
ID("TEXT_NODE"), 212:24-212:33
EQUAL, 212:34-212:35
INT("3"), 212:36-212:37
SEMI, 212:37-212:38
CONST, 213:3-213:8
UNSIGNED, 213:9-213:17
SHORT, 213:18-213:23
ID("CDATA_SECTION_NODE"), 213:24-213:42
EQUAL, 213:43-213:44
INT("4"), 213:45-213:46
SEMI, 213:46-213:47
CONST, 214:3-214:8
UNSIGNED, 214:9-214:17
SHORT, 214:18-214:23
ID("ENTITY_REFERENCE_NODE"), 214:24-214:45
EQUAL, 214:46-214:47
INT("5"), 214:48-214:49
SEMI, 214:49-214:50
CONST, 215:3-215:8
UNSIGNED, 215:9-215:17
SHORT, 215:18-215:23
ID("ENTITY_NODE"), 215:24-215:35
EQUAL, 215:36-215:37
INT("6"), 215:38-215:39
SEMI, 215:39-215:40
CONST, 216:3-216:8
UNSIGNED, 216:9-216:17
SHORT, 216:18-216:23
ID("PROCESSING_INSTRUCTION_NODE"), 216:24-216:51
EQUAL, 216:52-216:53
INT("7"), 216:54-216:55
SEMI, 216:55-216:56
CONST, 217:3-217:8
UNSIGNED, 217:9-217:17
SHORT, 217:18-217:23
ID("COMMENT_NODE"), 217:24-217:36
EQUAL, 217:37-217:38
INT("8"), 217:39-217:40
SEMI, 217:40-217:41
CONST, 218:3-218:8
UNSIGNED, 218:9-218:17
SHORT, 218:18-218:23
ID("DOCUMENT_NODE"), 218:24-218:37
EQUAL, 218:38-218:39
INT("9"), 218:40-218:41
SEMI, 218:41-218:42
CONST, 219:3-219:8
UNSIGNED, 219:9-219:17
SHORT, 219:18-219:23
ID("DOCUMENT_TYPE_NODE"), 219:24-219:42
EQUAL, 219:43-219:44
INT("10"), 219:45-219:47
SEMI, 219:47-219:48
CONST, 220:3-220:8
UNSIGNED, 220:9-220:17
SHORT, 220:18-220:23
ID("DOCUMENT_FRAGMENT_NODE"), 220:24-220:46
EQUAL, 220:47-220:48
INT("11"), 220:49-220:51
SEMI, 220:51-220:52
CONST, 221:3-221:8
UNSIGNED, 221:9-221:17
SHORT, 221:18-221:23
ID("NOTATION_NODE"), 221:24-221:37
EQUAL, 221:38-221:39
INT("12"), 221:40-221:42
SEMI, 221:42-221:43
READONLY, 222:3-222:11
ATTRIBUTE, 222:12-222:21
UNSIGNED, 222:22-222:30
SHORT, 222:31-222:36
ID("nodeType"), 222:37-222:45
SEMI, 222:45-222:46
READONLY, 223:3-223:11
ATTRIBUTE, 223:12-223:21
DOMSTRING, 223:22-223:31
ID("nodeName"), 223:32-223:40
SEMI, 223:40-223:41
READONLY, 225:3-225:11
ATTRIBUTE, 225:12-225:21
USVSTRING, 225:22-225:31
ID("baseURI"), 225:32-225:39
SEMI, 225:39-225:40
READONLY, 227:3-227:11
ATTRIBUTE, 227:12-227:21
BOOLEAN, 227:22-227:29
ID("isConnected"), 227:30-227:41
SEMI, 227:41-227:42
READONLY, 228:3-228:11
ATTRIBUTE, 228:12-228:21
ID("Document"), 228:22-228:30
QUESTION, 228:30-228:31
ID("ownerDocument"), 228:32-228:45
SEMI, 228:45-228:46
ID("Node"), 229:3-229:7
ID("getRootNode"), 229:8-229:19
LPAREN, 229:19-229:20
OPTIONAL, 229:20-229:28
ID("GetRootNodeOptions"), 229:29-229:47
ID("options"), 229:48-229:55
EQUAL, 229:56-229:57
LBRACE, 229:58-229:59
RBRACE, 229:59-229:60
RPAREN, 229:60-229:61
SEMI, 229:61-229:62
READONLY, 230:3-230:11
ATTRIBUTE, 230:12-230:21
ID("Node"), 230:22-230:26
QUESTION, 230:26-230:27
ID("parentNode"), 230:28-230:38
SEMI, 230:38-230:39
READONLY, 231:3-231:11
ATTRIBUTE, 231:12-231:21
ID("Element"), 231:22-231:29
QUESTION, 231:29-231:30
ID("parentElement"), 231:31-231:44
SEMI, 231:44-231:45
BOOLEAN, 232:3-232:10
ID("hasChildNodes"), 232:11-232:24
LPAREN, 232:24-232:25
RPAREN, 232:25-232:26
SEMI, 232:26-232:27
LBRACKET, 233:3-233:4
ID("SameObject"), 233:4-233:14
RBRACKET, 233:14-233:15
READONLY, 233:16-233:24
ATTRIBUTE, 233:25-233:34
ID("NodeList"), 233:35-233:43
ID("childNodes"), 233:44-233:54
SEMI, 233:54-233:55
READONLY, 234:3-234:11
ATTRIBUTE, 234:12-234:21
ID("Node"), 234:22-234:26
QUESTION, 234:26-234:27
ID("firstChild"), 234:28-234:38
SEMI, 234:38-234:39
READONLY, 235:3-235:11
ATTRIBUTE, 235:12-235:21
ID("Node"), 235:22-235:26
QUESTION, 235:26-235:27
ID("lastChild"), 235:28-235:37
SEMI, 235:37-235:38
READONLY, 236:3-236:11
ATTRIBUTE, 236:12-236:21
ID("Node"), 236:22-236:26
QUESTION, 236:26-236:27
ID("previousSibling"), 236:28-236:43
SEMI, 236:43-236:44
READONLY, 237:3-237:11
ATTRIBUTE, 237:12-237:21
ID("Node"), 237:22-237:26
QUESTION, 237:26-237:27
ID("nextSibling"), 237:28-237:39
SEMI, 237:39-237:40
LBRACKET, 239:3-239:4
ID("CEReactions"), 239:4-239:15
RBRACKET, 239:15-239:16
ATTRIBUTE, 239:17-239:26
DOMSTRING, 239:27-239:36
QUESTION, 239:36-239:37
ID("nodeValue"), 239:38-239:47
SEMI, 239:47-239:48
LBRACKET, 240:3-240:4
ID("CEReactions"), 240:4-240:15
RBRACKET, 240:15-240:16
ATTRIBUTE, 240:17-240:26
DOMSTRING, 240:27-240:36
QUESTION, 240:36-240:37
ID("textContent"), 240:38-240:49
SEMI, 240:49-240:50
LBRACKET, 241:3-241:4
ID("CEReactions"), 241:4-241:15
RBRACKET, 241:15-241:16
UNDEFINED, 241:17-241:26
ID("normalize"), 241:27-241:36
LPAREN, 241:36-241:37
RPAREN, 241:37-241:38
SEMI, 241:38-241:39
LBRACKET, 243:3-243:4
ID("CEReactions"), 243:4-243:15
COMMA, 243:15-243:16
ID("NewObject"), 243:17-243:26
RBRACKET, 243:26-243:27
ID("Node"), 243:28-243:32
ID("cloneNode"), 243:33-243:42
LPAREN, 243:42-243:43
OPTIONAL, 243:43-243:51
BOOLEAN, 243:52-243:59
ID("subtree"), 243:60-243:67
EQUAL, 243:68-243:69
FALSE, 243:70-243:75
RPAREN, 243:75-243:76
SEMI, 243:76-243:77
BOOLEAN, 244:3-244:10
ID("isEqualNode"), 244:11-244:22
LPAREN, 244:22-244:23
ID("Node"), 244:23-244:27
QUESTION, 244:27-244:28
ID("otherNode"), 244:29-244:38
RPAREN, 244:38-244:39
SEMI, 244:39-244:40
BOOLEAN, 245:3-245:10
ID("isSameNode"), 245:11-245:21
LPAREN, 245:21-245:22
ID("Node"), 245:22-245:26
QUESTION, 245:26-245:27
ID("otherNode"), 245:28-245:37
RPAREN, 245:37-245:38
SEMI, 245:38-245:39
CONST, 247:3-247:8
UNSIGNED, 247:9-247:17
SHORT, 247:18-247:23
ID("DOCUMENT_POSITION_DISCONNECTED"), 247:24-247:54
EQUAL, 247:55-247:56
INT("0x01"), 247:57-247:61
SEMI, 247:61-247:62
CONST, 248:3-248:8
UNSIGNED, 248:9-248:17
SHORT, 248:18-248:23
ID("DOCUMENT_POSITION_PRECEDING"), 248:24-248:51
EQUAL, 248:52-248:53
INT("0x02"), 248:54-248:58
SEMI, 248:58-248:59
CONST, 249:3-249:8
UNSIGNED, 249:9-249:17
SHORT, 249:18-249:23
ID("DOCUMENT_POSITION_FOLLOWING"), 249:24-249:51
EQUAL, 249:52-249:53
INT("0x04"), 249:54-249:58
SEMI, 249:58-249:59
CONST, 250:3-250:8
UNSIGNED, 250:9-250:17
SHORT, 250:18-250:23
ID("DOCUMENT_POSITION_CONTAINS"), 250:24-250:50
EQUAL, 250:51-250:52
INT("0x08"), 250:53-250:57
SEMI, 250:57-250:58
CONST, 251:3-251:8
UNSIGNED, 251:9-251:17
SHORT, 251:18-251:23
ID("DOCUMENT_POSITION_CONTAINED_BY"), 251:24-251:54
EQUAL, 251:55-251:56
INT("0x10"), 251:57-251:61
SEMI, 251:61-251:62
CONST, 252:3-252:8
UNSIGNED, 252:9-252:17
SHORT, 252:18-252:23
ID("DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC"), 252:24-252:65
EQUAL, 252:66-252:67
INT("0x20"), 252:68-252:72
SEMI, 252:72-252:73
UNSIGNED, 253:3-253:11
SHORT, 253:12-253:17
ID("compareDocumentPosition"), 253:18-253:41
LPAREN, 253:41-253:42
ID("Node"), 253:42-253:46
ID("other"), 253:47-253:52
RPAREN, 253:52-253:53
SEMI, 253:53-253:54
BOOLEAN, 254:3-254:10
ID("contains"), 254:11-254:19
LPAREN, 254:19-254:20
ID("Node"), 254:20-254:24
QUESTION, 254:24-254:25
ID("other"), 254:26-254:31
RPAREN, 254:31-254:32
SEMI, 254:32-254:33
DOMSTRING, 256:3-256:12
QUESTION, 256:12-256:13
ID("lookupPrefix"), 256:14-256:26
LPAREN, 256:26-256:27
DOMSTRING, 256:27-256:36
QUESTION, 256:36-256:37
NAMESPACE, 256:38-256:47
RPAREN, 256:47-256:48
SEMI, 256:48-256:49
DOMSTRING, 257:3-257:12
QUESTION, 257:12-257:13
ID("lookupNamespaceURI"), 257:14-257:32
LPAREN, 257:32-257:33
DOMSTRING, 257:33-257:42
QUESTION, 257:42-257:43
ID("prefix"), 257:44-257:50
RPAREN, 257:50-257:51
SEMI, 257:51-257:52
BOOLEAN, 258:3-258:10
ID("isDefaultNamespace"), 258:11-258:29
LPAREN, 258:29-258:30
DOMSTRING, 258:30-258:39
QUESTION, 258:39-258:40
NAMESPACE, 258:41-258:50
RPAREN, 258:50-258:51
SEMI, 258:51-258:52
LBRACKET, 260:3-260:4
ID("CEReactions"), 260:4-260:15
RBRACKET, 260:15-260:16
ID("Node"), 260:17-260:21
ID("insertBefore"), 260:22-260:34
LPAREN, 260:34-260:35
ID("Node"), 260:35-260:39
ID("node"), 260:40-260:44
COMMA, 260:44-260:45
ID("Node"), 260:46-260:50
QUESTION, 260:50-260:51
ID("child"), 260:52-260:57
RPAREN, 260:57-260:58
SEMI, 260:58-260:59
LBRACKET, 261:3-261:4
ID("CEReactions"), 261:4-261:15
RBRACKET, 261:15-261:16
ID("Node"), 261:17-261:21
ID("appendChild"), 261:22-261:33
LPAREN, 261:33-261:34
ID("Node"), 261:34-261:38
ID("node"), 261:39-261:43
RPAREN, 261:43-261:44
SEMI, 261:44-261:45
LBRACKET, 262:3-262:4
ID("CEReactions"), 262:4-262:15
RBRACKET, 262:15-262:16
ID("Node"), 262:17-262:21
ID("replaceChild"), 262:22-262:34
LPAREN, 262:34-262:35
ID("Node"), 262:35-262:39
ID("node"), 262:40-262:44
COMMA, 262:44-262:45
ID("Node"), 262:46-262:50
ID("child"), 262:51-262:56
RPAREN, 262:56-262:57
SEMI, 262:57-262:58
LBRACKET, 263:3-263:4
ID("CEReactions"), 263:4-263:15
RBRACKET, 263:15-263:16
ID("Node"), 263:17-263:21
ID("removeChild"), 263:22-263:33
LPAREN, 263:33-263:34
ID("Node"), 263:34-263:38
ID("child"), 263:39-263:44
RPAREN, 263:44-263:45
SEMI, 263:45-263:46
RBRACE, 264:1-264:2
SEMI, 264:2-264:3
DICTIONARY, 266:1-266:11
ID("GetRootNodeOptions"), 266:12-266:30
LBRACE, 266:31-266:32
BOOLEAN, 267:3-267:10
ID("composed"), 267:11-267:19
EQUAL, 267:20-267:21
FALSE, 267:22-267:27
SEMI, 267:27-267:28
RBRACE, 268:1-268:2
SEMI, 268:2-268:3
LBRACKET, 270:1-270:2
ID("Exposed"), 270:2-270:9
EQUAL, 270:9-270:10
ID("Window"), 270:10-270:16
RBRACKET, 270:16-270:17
INTERFACE, 271:1-271:10
ID("Document"), 271:11-271:19
COLON, 271:20-271:21
ID("Node"), 271:22-271:26
LBRACE, 271:27-271:28
CONSTRUCTOR, 272:3-272:14
LPAREN, 272:14-272:15
RPAREN, 272:15-272:16
SEMI, 272:16-272:17
LBRACKET, 274:3-274:4
ID("SameObject"), 274:4-274:14
RBRACKET, 274:14-274:15
READONLY, 274:16-274:24
ATTRIBUTE, 274:25-274:34
ID("DOMImplementation"), 274:35-274:52
ID("implementation"), 274:53-274:67
SEMI, 274:67-274:68
READONLY, 275:3-275:11
ATTRIBUTE, 275:12-275:21
USVSTRING, 275:22-275:31
ID("URL"), 275:32-275:35
SEMI, 275:35-275:36
READONLY, 276:3-276:11
ATTRIBUTE, 276:12-276:21
USVSTRING, 276:22-276:31
ID("documentURI"), 276:32-276:43
SEMI, 276:43-276:44
READONLY, 277:3-277:11
ATTRIBUTE, 277:12-277:21
DOMSTRING, 277:22-277:31
ID("compatMode"), 277:32-277:42
SEMI, 277:42-277:43
READONLY, 278:3-278:11
ATTRIBUTE, 278:12-278:21
DOMSTRING, 278:22-278:31
ID("characterSet"), 278:32-278:44
SEMI, 278:44-278:45
READONLY, 279:3-279:11
ATTRIBUTE, 279:12-279:21
DOMSTRING, 279:22-279:31
ID("charset"), 279:32-279:39
SEMI, 279:39-279:40
READONLY, 280:3-280:11
ATTRIBUTE, 280:12-280:21
DOMSTRING, 280:22-280:31
ID("inputEncoding"), 280:32-280:45
SEMI, 280:45-280:46
READONLY, 281:3-281:11
ATTRIBUTE, 281:12-281:21
DOMSTRING, 281:22-281:31
ID("contentType"), 281:32-281:43
SEMI, 281:43-281:44
READONLY, 283:3-283:11
ATTRIBUTE, 283:12-283:21
ID("DocumentType"), 283:22-283:34
QUESTION, 283:34-283:35
ID("doctype"), 283:36-283:43
SEMI, 283:43-283:44
READONLY, 284:3-284:11
ATTRIBUTE, 284:12-284:21
ID("Element"), 284:22-284:29
QUESTION, 284:29-284:30
ID("documentElement"), 284:31-284:46
SEMI, 284:46-284:47
ID("HTMLCollection"), 285:3-285:17
ID("getElementsByTagName"), 285:18-285:38
LPAREN, 285:38-285:39
DOMSTRING, 285:39-285:48
ID("qualifiedName"), 285:49-285:62
RPAREN, 285:62-285:63
SEMI, 285:63-285:64
ID("HTMLCollection"), 286:3-286:17
ID("getElementsByTagNameNS"), 286:18-286:40
LPAREN, 286:40-286:41
DOMSTRING, 286:41-286:50
QUESTION, 286:50-286:51
NAMESPACE, 286:52-286:61
COMMA, 286:61-286:62
DOMSTRING, 286:63-286:72
ID("localName"), 286:73-286:82
RPAREN, 286:82-286:83
SEMI, 286:83-286:84
ID("HTMLCollection"), 287:3-287:17
ID("getElementsByClassName"), 287:18-287:40
LPAREN, 287:40-287:41
DOMSTRING, 287:41-287:50
ID("classNames"), 287:51-287:61
RPAREN, 287:61-287:62
SEMI, 287:62-287:63
LBRACKET, 289:3-289:4
ID("CEReactions"), 289:4-289:15
COMMA, 289:15-289:16
ID("NewObject"), 289:17-289:26
RBRACKET, 289:26-289:27
ID("Element"), 289:28-289:35
ID("createElement"), 289:36-289:49
LPAREN, 289:49-289:50
DOMSTRING, 289:50-289:59
ID("localName"), 289:60-289:69
COMMA, 289:69-289:70
OPTIONAL, 289:71-289:79
LPAREN, 289:80-289:81
DOMSTRING, 289:81-289:90
OR, 289:91-289:93
ID("ElementCreationOptions"), 289:94-289:116
RPAREN, 289:116-289:117
ID("options"), 289:118-289:125
EQUAL, 289:126-289:127
LBRACE, 289:128-289:129
RBRACE, 289:129-289:130
RPAREN, 289:130-289:131
SEMI, 289:131-289:132
LBRACKET, 290:3-290:4
ID("CEReactions"), 290:4-290:15
COMMA, 290:15-290:16
ID("NewObject"), 290:17-290:26
RBRACKET, 290:26-290:27
ID("Element"), 290:28-290:35
ID("createElementNS"), 290:36-290:51
LPAREN, 290:51-290:52
DOMSTRING, 290:52-290:61
QUESTION, 290:61-290:62
NAMESPACE, 290:63-290:72
COMMA, 290:72-290:73
DOMSTRING, 290:74-290:83
ID("qualifiedName"), 290:84-290:97
COMMA, 290:97-290:98
OPTIONAL, 290:99-290:107
LPAREN, 290:108-290:109
DOMSTRING, 290:109-290:118
OR, 290:119-290:121
ID("ElementCreationOptions"), 290:122-290:144
RPAREN, 290:144-290:145
ID("options"), 290:146-290:153
EQUAL, 290:154-290:155
LBRACE, 290:156-290:157
RBRACE, 290:157-290:158
RPAREN, 290:158-290:159
SEMI, 290:159-290:160
LBRACKET, 291:3-291:4
ID("NewObject"), 291:4-291:13
RBRACKET, 291:13-291:14
ID("DocumentFragment"), 291:15-291:31
ID("createDocumentFragment"), 291:32-291:54
LPAREN, 291:54-291:55
RPAREN, 291:55-291:56
SEMI, 291:56-291:57
LBRACKET, 292:3-292:4
ID("NewObject"), 292:4-292:13
RBRACKET, 292:13-292:14
ID("Text"), 292:15-292:19
ID("createTextNode"), 292:20-292:34
LPAREN, 292:34-292:35
DOMSTRING, 292:35-292:44
ID("data"), 292:45-292:49
RPAREN, 292:49-292:50
SEMI, 292:50-292:51
LBRACKET, 293:3-293:4
ID("NewObject"), 293:4-293:13
RBRACKET, 293:13-293:14
ID("CDATASection"), 293:15-293:27
ID("createCDATASection"), 293:28-293:46
LPAREN, 293:46-293:47
DOMSTRING, 293:47-293:56
ID("data"), 293:57-293:61
RPAREN, 293:61-293:62
SEMI, 293:62-293:63
LBRACKET, 294:3-294:4
ID("NewObject"), 294:4-294:13
RBRACKET, 294:13-294:14
ID("Comment"), 294:15-294:22
ID("createComment"), 294:23-294:36
LPAREN, 294:36-294:37
DOMSTRING, 294:37-294:46
ID("data"), 294:47-294:51
RPAREN, 294:51-294:52
SEMI, 294:52-294:53
LBRACKET, 295:3-295:4
ID("NewObject"), 295:4-295:13
RBRACKET, 295:13-295:14
ID("ProcessingInstruction"), 295:15-295:36
ID("createProcessingInstruction"), 295:37-295:64
LPAREN, 295:64-295:65
DOMSTRING, 295:65-295:74
ID("target"), 295:75-295:81
COMMA, 295:81-295:82
DOMSTRING, 295:83-295:92
ID("data"), 295:93-295:97
RPAREN, 295:97-295:98
SEMI, 295:98-295:99
LBRACKET, 297:3-297:4
ID("CEReactions"), 297:4-297:15
COMMA, 297:15-297:16
ID("NewObject"), 297:17-297:26
RBRACKET, 297:26-297:27
ID("Node"), 297:28-297:32
ID("importNode"), 297:33-297:43
LPAREN, 297:43-297:44
ID("Node"), 297:44-297:48
ID("node"), 297:49-297:53
COMMA, 297:53-297:54
OPTIONAL, 297:55-297:63
LPAREN, 297:64-297:65
BOOLEAN, 297:65-297:72
OR, 297:73-297:75
ID("ImportNodeOptions"), 297:76-297:93
RPAREN, 297:93-297:94
ID("options"), 297:95-297:102
EQUAL, 297:103-297:104
FALSE, 297:105-297:110
RPAREN, 297:110-297:111
SEMI, 297:111-297:112
LBRACKET, 298:3-298:4
ID("CEReactions"), 298:4-298:15
RBRACKET, 298:15-298:16
ID("Node"), 298:17-298:21
ID("adoptNode"), 298:22-298:31
LPAREN, 298:31-298:32
ID("Node"), 298:32-298:36
ID("node"), 298:37-298:41
RPAREN, 298:41-298:42
SEMI, 298:42-298:43
LBRACKET, 300:3-300:4
ID("NewObject"), 300:4-300:13
RBRACKET, 300:13-300:14
ID("Attr"), 300:15-300:19
ID("createAttribute"), 300:20-300:35
LPAREN, 300:35-300:36
DOMSTRING, 300:36-300:45
ID("localName"), 300:46-300:55
RPAREN, 300:55-300:56
SEMI, 300:56-300:57
LBRACKET, 301:3-301:4
ID("NewObject"), 301:4-301:13
RBRACKET, 301:13-301:14
ID("Attr"), 301:15-301:19
ID("createAttributeNS"), 301:20-301:37
LPAREN, 301:37-301:38
DOMSTRING, 301:38-301:47
QUESTION, 301:47-301:48
NAMESPACE, 301:49-301:58
COMMA, 301:58-301:59
DOMSTRING, 301:60-301:69
ID("qualifiedName"), 301:70-301:83
RPAREN, 301:83-301:84
SEMI, 301:84-301:85
LBRACKET, 303:3-303:4
ID("NewObject"), 303:4-303:13
RBRACKET, 303:13-303:14
ID("Event"), 303:15-303:20
ID("createEvent"), 303:21-303:32
LPAREN, 303:32-303:33
DOMSTRING, 303:33-303:42
INTERFACE, 303:43-303:52
RPAREN, 303:52-303:53
SEMI, 303:53-303:54
LBRACKET, 305:3-305:4
ID("NewObject"), 305:4-305:13
RBRACKET, 305:13-305:14
ID("Range"), 305:15-305:20
ID("createRange"), 305:21-305:32
LPAREN, 305:32-305:33
RPAREN, 305:33-305:34
SEMI, 305:34-305:35
LBRACKET, 308:3-308:4
ID("NewObject"), 308:4-308:13
RBRACKET, 308:13-308:14
ID("NodeIterator"), 308:15-308:27
ID("createNodeIterator"), 308:28-308:46
LPAREN, 308:46-308:47
ID("Node"), 308:47-308:51
ID("root"), 308:52-308:56
COMMA, 308:56-308:57
OPTIONAL, 308:58-308:66
UNSIGNED, 308:67-308:75
LONG, 308:76-308:80
ID("whatToShow"), 308:81-308:91
EQUAL, 308:92-308:93
INT("0xFFFFFFFF"), 308:94-308:104
COMMA, 308:104-308:105
OPTIONAL, 308:106-308:114
ID("NodeFilter"), 308:115-308:125
QUESTION, 308:125-308:126
ID("filter"), 308:127-308:133
EQUAL, 308:134-308:135
NULL, 308:136-308:140
RPAREN, 308:140-308:141
SEMI, 308:141-308:142
LBRACKET, 309:3-309:4
ID("NewObject"), 309:4-309:13
RBRACKET, 309:13-309:14
ID("TreeWalker"), 309:15-309:25
ID("createTreeWalker"), 309:26-309:42
LPAREN, 309:42-309:43
ID("Node"), 309:43-309:47
ID("root"), 309:48-309:52
COMMA, 309:52-309:53
OPTIONAL, 309:54-309:62
UNSIGNED, 309:63-309:71
LONG, 309:72-309:76
ID("whatToShow"), 309:77-309:87
EQUAL, 309:88-309:89
INT("0xFFFFFFFF"), 309:90-309:100
COMMA, 309:100-309:101
OPTIONAL, 309:102-309:110
ID("NodeFilter"), 309:111-309:121
QUESTION, 309:121-309:122
ID("filter"), 309:123-309:129
EQUAL, 309:130-309:131
NULL, 309:132-309:136
RPAREN, 309:136-309:137
SEMI, 309:137-309:138
RBRACE, 310:1-310:2
SEMI, 310:2-310:3
LBRACKET, 312:1-312:2
ID("Exposed"), 312:2-312:9
EQUAL, 312:9-312:10
ID("Window"), 312:10-312:16
RBRACKET, 312:16-312:17
INTERFACE, 313:1-313:10
ID("XMLDocument"), 313:11-313:22
COLON, 313:23-313:24
ID("Document"), 313:25-313:33
LBRACE, 313:34-313:35
RBRACE, 313:35-313:36
SEMI, 313:36-313:37
DICTIONARY, 315:1-315:11
ID("ElementCreationOptions"), 315:12-315:34
LBRACE, 315:35-315:36
ID("CustomElementRegistry"), 316:3-316:24
ID("customElementRegistry"), 316:25-316:46
SEMI, 316:46-316:47
DOMSTRING, 317:3-317:12
ID("is"), 317:13-317:15
SEMI, 317:15-317:16
RBRACE, 318:1-318:2
SEMI, 318:2-318:3
DICTIONARY, 320:1-320:11
ID("ImportNodeOptions"), 320:12-320:29
LBRACE, 320:30-320:31
ID("CustomElementRegistry"), 321:3-321:24
ID("customElementRegistry"), 321:25-321:46
SEMI, 321:46-321:47
BOOLEAN, 322:3-322:10
ID("selfOnly"), 322:11-322:19
EQUAL, 322:20-322:21
FALSE, 322:22-322:27
SEMI, 322:27-322:28
RBRACE, 323:1-323:2
SEMI, 323:2-323:3
LBRACKET, 325:1-325:2
ID("Exposed"), 325:2-325:9
EQUAL, 325:9-325:10
ID("Window"), 325:10-325:16
RBRACKET, 325:16-325:17
INTERFACE, 326:1-326:10
ID("DOMImplementation"), 326:11-326:28
LBRACE, 326:29-326:30
LBRACKET, 327:3-327:4
ID("NewObject"), 327:4-327:13
RBRACKET, 327:13-327:14
ID("DocumentType"), 327:15-327:27
ID("createDocumentType"), 327:28-327:46
LPAREN, 327:46-327:47
DOMSTRING, 327:47-327:56
ID("name"), 327:57-327:61
COMMA, 327:61-327:62
DOMSTRING, 327:63-327:72
ID("publicId"), 327:73-327:81
COMMA, 327:81-327:82
DOMSTRING, 327:83-327:92
ID("systemId"), 327:93-327:101
RPAREN, 327:101-327:102
SEMI, 327:102-327:103
LBRACKET, 328:3-328:4
ID("NewObject"), 328:4-328:13
RBRACKET, 328:13-328:14
ID("XMLDocument"), 328:15-328:26
ID("createDocument"), 328:27-328:41
LPAREN, 328:41-328:42
DOMSTRING, 328:42-328:51
QUESTION, 328:51-328:52
NAMESPACE, 328:53-328:62
COMMA, 328:62-328:63
LBRACKET, 328:64-328:65
ID("LegacyNullToEmptyString"), 328:65-328:88
RBRACKET, 328:88-328:89
DOMSTRING, 328:90-328:99
ID("qualifiedName"), 328:100-328:113
COMMA, 328:113-328:114
OPTIONAL, 328:115-328:123
ID("DocumentType"), 328:124-328:136
QUESTION, 328:136-328:137
ID("doctype"), 328:138-328:145
EQUAL, 328:146-328:147
NULL, 328:148-328:152
RPAREN, 328:152-328:153
SEMI, 328:153-328:154
LBRACKET, 329:3-329:4
ID("NewObject"), 329:4-329:13
RBRACKET, 329:13-329:14
ID("Document"), 329:15-329:23
ID("createHTMLDocument"), 329:24-329:42
LPAREN, 329:42-329:43
OPTIONAL, 329:43-329:51
DOMSTRING, 329:52-329:61
ID("title"), 329:62-329:67
RPAREN, 329:67-329:68
SEMI, 329:68-329:69
BOOLEAN, 331:3-331:10
ID("hasFeature"), 331:11-331:21
LPAREN, 331:21-331:22
RPAREN, 331:22-331:23
SEMI, 331:23-331:24
RBRACE, 332:1-332:2
SEMI, 332:2-332:3
LBRACKET, 334:1-334:2
ID("Exposed"), 334:2-334:9
EQUAL, 334:9-334:10
ID("Window"), 334:10-334:16
RBRACKET, 334:16-334:17
INTERFACE, 335:1-335:10
ID("DocumentType"), 335:11-335:23
COLON, 335:24-335:25
ID("Node"), 335:26-335:30
LBRACE, 335:31-335:32
READONLY, 336:3-336:11
ATTRIBUTE, 336:12-336:21
DOMSTRING, 336:22-336:31
ID("name"), 336:32-336:36
SEMI, 336:36-336:37
READONLY, 337:3-337:11
ATTRIBUTE, 337:12-337:21
DOMSTRING, 337:22-337:31
ID("publicId"), 337:32-337:40
SEMI, 337:40-337:41
READONLY, 338:3-338:11
ATTRIBUTE, 338:12-338:21
DOMSTRING, 338:22-338:31
ID("systemId"), 338:32-338:40
SEMI, 338:40-338:41
RBRACE, 339:1-339:2
SEMI, 339:2-339:3
LBRACKET, 341:1-341:2
ID("Exposed"), 341:2-341:9
EQUAL, 341:9-341:10
ID("Window"), 341:10-341:16
RBRACKET, 341:16-341:17
INTERFACE, 342:1-342:10
ID("DocumentFragment"), 342:11-342:27
COLON, 342:28-342:29
ID("Node"), 342:30-342:34
LBRACE, 342:35-342:36
CONSTRUCTOR, 343:3-343:14
LPAREN, 343:14-343:15
RPAREN, 343:15-343:16
SEMI, 343:16-343:17
RBRACE, 344:1-344:2
SEMI, 344:2-344:3
LBRACKET, 346:1-346:2
ID("Exposed"), 346:2-346:9
EQUAL, 346:9-346:10
ID("Window"), 346:10-346:16
RBRACKET, 346:16-346:17
INTERFACE, 347:1-347:10
ID("ShadowRoot"), 347:11-347:21
COLON, 347:22-347:23
ID("DocumentFragment"), 347:24-347:40
LBRACE, 347:41-347:42
READONLY, 348:3-348:11
ATTRIBUTE, 348:12-348:21
ID("ShadowRootMode"), 348:22-348:36
ID("mode"), 348:37-348:41
SEMI, 348:41-348:42
READONLY, 349:3-349:11
ATTRIBUTE, 349:12-349:21
BOOLEAN, 349:22-349:29
ID("delegatesFocus"), 349:30-349:44
SEMI, 349:44-349:45
READONLY, 350:3-350:11
ATTRIBUTE, 350:12-350:21
ID("SlotAssignmentMode"), 350:22-350:40
ID("slotAssignment"), 350:41-350:55
SEMI, 350:55-350:56
READONLY, 351:3-351:11
ATTRIBUTE, 351:12-351:21
BOOLEAN, 351:22-351:29
ID("clonable"), 351:30-351:38
SEMI, 351:38-351:39
READONLY, 352:3-352:11
ATTRIBUTE, 352:12-352:21
BOOLEAN, 352:22-352:29
ID("serializable"), 352:30-352:42
SEMI, 352:42-352:43
READONLY, 353:3-353:11
ATTRIBUTE, 353:12-353:21
ID("Element"), 353:22-353:29
ID("host"), 353:30-353:34
SEMI, 353:34-353:35
ATTRIBUTE, 355:3-355:12
ID("EventHandler"), 355:13-355:25
ID("onslotchange"), 355:26-355:38
SEMI, 355:38-355:39
RBRACE, 356:1-356:2
SEMI, 356:2-356:3
ENUM, 358:1-358:5
ID("ShadowRootMode"), 358:6-358:20
LBRACE, 358:21-358:22
STRING("\"open\""), 358:23-358:29
COMMA, 358:29-358:30
STRING("\"closed\""), 358:31-358:39
RBRACE, 358:40-358:41
SEMI, 358:41-358:42
ENUM, 359:1-359:5
ID("SlotAssignmentMode"), 359:6-359:24
LBRACE, 359:25-359:26
STRING("\"manual\""), 359:27-359:35
COMMA, 359:35-359:36
STRING("\"named\""), 359:37-359:44
RBRACE, 359:45-359:46
SEMI, 359:46-359:47
LBRACKET, 361:1-361:2
ID("Exposed"), 361:2-361:9
EQUAL, 361:9-361:10
ID("Window"), 361:10-361:16
RBRACKET, 361:16-361:17
INTERFACE, 362:1-362:10
ID("Element"), 362:11-362:18
COLON, 362:19-362:20
ID("Node"), 362:21-362:25
LBRACE, 362:26-362:27
READONLY, 363:3-363:11
ATTRIBUTE, 363:12-363:21
DOMSTRING, 363:22-363:31
QUESTION, 363:31-363:32
ID("namespaceURI"), 363:33-363:45
SEMI, 363:45-363:46
READONLY, 364:3-364:11
ATTRIBUTE, 364:12-364:21
DOMSTRING, 364:22-364:31
QUESTION, 364:31-364:32
ID("prefix"), 364:33-364:39
SEMI, 364:39-364:40
READONLY, 365:3-365:11
ATTRIBUTE, 365:12-365:21
DOMSTRING, 365:22-365:31
ID("localName"), 365:32-365:41
SEMI, 365:41-365:42
READONLY, 366:3-366:11
ATTRIBUTE, 366:12-366:21
DOMSTRING, 366:22-366:31
ID("tagName"), 366:32-366:39
SEMI, 366:39-366:40
LBRACKET, 368:3-368:4
ID("CEReactions"), 368:4-368:15
RBRACKET, 368:15-368:16
ATTRIBUTE, 368:17-368:26
DOMSTRING, 368:27-368:36
ID("id"), 368:37-368:39
SEMI, 368:39-368:40
LBRACKET, 369:3-369:4
ID("CEReactions"), 369:4-369:15
RBRACKET, 369:15-369:16
ATTRIBUTE, 369:17-369:26
DOMSTRING, 369:27-369:36
ID("className"), 369:37-369:46
SEMI, 369:46-369:47
LBRACKET, 370:3-370:4
ID("SameObject"), 370:4-370:14
COMMA, 370:14-370:15
ID("PutForwards"), 370:16-370:27
EQUAL, 370:27-370:28
ID("value"), 370:28-370:33
RBRACKET, 370:33-370:34
READONLY, 370:35-370:43
ATTRIBUTE, 370:44-370:53
ID("DOMTokenList"), 370:54-370:66
ID("classList"), 370:67-370:76
SEMI, 370:76-370:77
LBRACKET, 371:3-371:4
ID("CEReactions"), 371:4-371:15
COMMA, 371:15-371:16
ID("Unscopable"), 371:17-371:27
RBRACKET, 371:27-371:28
ATTRIBUTE, 371:29-371:38
DOMSTRING, 371:39-371:48
ID("slot"), 371:49-371:53
SEMI, 371:53-371:54
BOOLEAN, 373:3-373:10
ID("hasAttributes"), 373:11-373:24
LPAREN, 373:24-373:25
RPAREN, 373:25-373:26
SEMI, 373:26-373:27
LBRACKET, 374:3-374:4
ID("SameObject"), 374:4-374:14
RBRACKET, 374:14-374:15
READONLY, 374:16-374:24
ATTRIBUTE, 374:25-374:34
ID("NamedNodeMap"), 374:35-374:47
ID("attributes"), 374:48-374:58
SEMI, 374:58-374:59
SEQUENCE, 375:3-375:11
LT, 375:11-375:12
DOMSTRING, 375:12-375:21
GT, 375:21-375:22
ID("getAttributeNames"), 375:23-375:40
LPAREN, 375:40-375:41
RPAREN, 375:41-375:42
SEMI, 375:42-375:43
DOMSTRING, 376:3-376:12
QUESTION, 376:12-376:13
ID("getAttribute"), 376:14-376:26
LPAREN, 376:26-376:27
DOMSTRING, 376:27-376:36
ID("qualifiedName"), 376:37-376:50
RPAREN, 376:50-376:51
SEMI, 376:51-376:52
DOMSTRING, 377:3-377:12
QUESTION, 377:12-377:13
ID("getAttributeNS"), 377:14-377:28
LPAREN, 377:28-377:29
DOMSTRING, 377:29-377:38
QUESTION, 377:38-377:39
NAMESPACE, 377:40-377:49
COMMA, 377:49-377:50
DOMSTRING, 377:51-377:60
ID("localName"), 377:61-377:70
RPAREN, 377:70-377:71
SEMI, 377:71-377:72
LBRACKET, 378:3-378:4
ID("CEReactions"), 378:4-378:15
RBRACKET, 378:15-378:16
UNDEFINED, 378:17-378:26
ID("setAttribute"), 378:27-378:39
LPAREN, 378:39-378:40
DOMSTRING, 378:40-378:49
ID("qualifiedName"), 378:50-378:63
COMMA, 378:63-378:64
DOMSTRING, 378:65-378:74
ID("value"), 378:75-378:80
RPAREN, 378:80-378:81
SEMI, 378:81-378:82
LBRACKET, 379:3-379:4
ID("CEReactions"), 379:4-379:15
RBRACKET, 379:15-379:16
UNDEFINED, 379:17-379:26
ID("setAttributeNS"), 379:27-379:41
LPAREN, 379:41-379:42
DOMSTRING, 379:42-379:51
QUESTION, 379:51-379:52
NAMESPACE, 379:53-379:62
COMMA, 379:62-379:63
DOMSTRING, 379:64-379:73
ID("qualifiedName"), 379:74-379:87
COMMA, 379:87-379:88
DOMSTRING, 379:89-379:98
ID("value"), 379:99-379:104
RPAREN, 379:104-379:105
SEMI, 379:105-379:106
LBRACKET, 380:3-380:4
ID("CEReactions"), 380:4-380:15
RBRACKET, 380:15-380:16
UNDEFINED, 380:17-380:26
ID("removeAttribute"), 380:27-380:42
LPAREN, 380:42-380:43
DOMSTRING, 380:43-380:52
ID("qualifiedName"), 380:53-380:66
RPAREN, 380:66-380:67
SEMI, 380:67-380:68
LBRACKET, 381:3-381:4
ID("CEReactions"), 381:4-381:15
RBRACKET, 381:15-381:16
UNDEFINED, 381:17-381:26
ID("removeAttributeNS"), 381:27-381:44
LPAREN, 381:44-381:45
DOMSTRING, 381:45-381:54
QUESTION, 381:54-381:55
NAMESPACE, 381:56-381:65
COMMA, 381:65-381:66
DOMSTRING, 381:67-381:76
ID("localName"), 381:77-381:86
RPAREN, 381:86-381:87
SEMI, 381:87-381:88
LBRACKET, 382:3-382:4
ID("CEReactions"), 382:4-382:15
RBRACKET, 382:15-382:16
BOOLEAN, 382:17-382:24
ID("toggleAttribute"), 382:25-382:40
LPAREN, 382:40-382:41
DOMSTRING, 382:41-382:50
ID("qualifiedName"), 382:51-382:64
COMMA, 382:64-382:65
OPTIONAL, 382:66-382:74
BOOLEAN, 382:75-382:82
ID("force"), 382:83-382:88
RPAREN, 382:88-382:89
SEMI, 382:89-382:90
BOOLEAN, 383:3-383:10
ID("hasAttribute"), 383:11-383:23
LPAREN, 383:23-383:24
DOMSTRING, 383:24-383:33
ID("qualifiedName"), 383:34-383:47
RPAREN, 383:47-383:48
SEMI, 383:48-383:49
BOOLEAN, 384:3-384:10
ID("hasAttributeNS"), 384:11-384:25
LPAREN, 384:25-384:26
DOMSTRING, 384:26-384:35
QUESTION, 384:35-384:36
NAMESPACE, 384:37-384:46
COMMA, 384:46-384:47
DOMSTRING, 384:48-384:57
ID("localName"), 384:58-384:67
RPAREN, 384:67-384:68
SEMI, 384:68-384:69
ID("Attr"), 386:3-386:7
QUESTION, 386:7-386:8
ID("getAttributeNode"), 386:9-386:25
LPAREN, 386:25-386:26
DOMSTRING, 386:26-386:35
ID("qualifiedName"), 386:36-386:49
RPAREN, 386:49-386:50
SEMI, 386:50-386:51
ID("Attr"), 387:3-387:7
QUESTION, 387:7-387:8
ID("getAttributeNodeNS"), 387:9-387:27
LPAREN, 387:27-387:28
DOMSTRING, 387:28-387:37
QUESTION, 387:37-387:38
NAMESPACE, 387:39-387:48
COMMA, 387:48-387:49
DOMSTRING, 387:50-387:59
ID("localName"), 387:60-387:69
RPAREN, 387:69-387:70
SEMI, 387:70-387:71
LBRACKET, 388:3-388:4
ID("CEReactions"), 388:4-388:15
RBRACKET, 388:15-388:16
ID("Attr"), 388:17-388:21
QUESTION, 388:21-388:22
ID("setAttributeNode"), 388:23-388:39
LPAREN, 388:39-388:40
ID("Attr"), 388:40-388:44
ID("attr"), 388:45-388:49
RPAREN, 388:49-388:50
SEMI, 388:50-388:51
LBRACKET, 389:3-389:4
ID("CEReactions"), 389:4-389:15
RBRACKET, 389:15-389:16
ID("Attr"), 389:17-389:21
QUESTION, 389:21-389:22
ID("setAttributeNodeNS"), 389:23-389:41
LPAREN, 389:41-389:42
ID("Attr"), 389:42-389:46
ID("attr"), 389:47-389:51
RPAREN, 389:51-389:52
SEMI, 389:52-389:53
LBRACKET, 390:3-390:4
ID("CEReactions"), 390:4-390:15
RBRACKET, 390:15-390:16
ID("Attr"), 390:17-390:21
ID("removeAttributeNode"), 390:22-390:41
LPAREN, 390:41-390:42
ID("Attr"), 390:42-390:46
ID("attr"), 390:47-390:51
RPAREN, 390:51-390:52
SEMI, 390:52-390:53
ID("ShadowRoot"), 392:3-392:13
ID("attachShadow"), 392:14-392:26
LPAREN, 392:26-392:27
ID("ShadowRootInit"), 392:27-392:41
ID("init"), 392:42-392:46
RPAREN, 392:46-392:47
SEMI, 392:47-392:48
READONLY, 393:3-393:11
ATTRIBUTE, 393:12-393:21
ID("ShadowRoot"), 393:22-393:32
QUESTION, 393:32-393:33
ID("shadowRoot"), 393:34-393:44
SEMI, 393:44-393:45
READONLY, 395:3-395:11
ATTRIBUTE, 395:12-395:21
ID("CustomElementRegistry"), 395:22-395:43
QUESTION, 395:43-395:44
ID("customElementRegistry"), 395:45-395:66
SEMI, 395:66-395:67
ID("Element"), 397:3-397:10
QUESTION, 397:10-397:11
ID("closest"), 397:12-397:19
LPAREN, 397:19-397:20
DOMSTRING, 397:20-397:29
ID("selectors"), 397:30-397:39
RPAREN, 397:39-397:40
SEMI, 397:40-397:41
BOOLEAN, 398:3-398:10
ID("matches"), 398:11-398:18
LPAREN, 398:18-398:19
DOMSTRING, 398:19-398:28
ID("selectors"), 398:29-398:38
RPAREN, 398:38-398:39
SEMI, 398:39-398:40
BOOLEAN, 399:3-399:10
ID("webkitMatchesSelector"), 399:11-399:32
LPAREN, 399:32-399:33
DOMSTRING, 399:33-399:42
ID("selectors"), 399:43-399:52
RPAREN, 399:52-399:53
SEMI, 399:53-399:54
ID("HTMLCollection"), 401:3-401:17
ID("getElementsByTagName"), 401:18-401:38
LPAREN, 401:38-401:39
DOMSTRING, 401:39-401:48
ID("qualifiedName"), 401:49-401:62
RPAREN, 401:62-401:63
SEMI, 401:63-401:64
ID("HTMLCollection"), 402:3-402:17
ID("getElementsByTagNameNS"), 402:18-402:40
LPAREN, 402:40-402:41
DOMSTRING, 402:41-402:50
QUESTION, 402:50-402:51
NAMESPACE, 402:52-402:61
COMMA, 402:61-402:62
DOMSTRING, 402:63-402:72
ID("localName"), 402:73-402:82
RPAREN, 402:82-402:83
SEMI, 402:83-402:84
ID("HTMLCollection"), 403:3-403:17
ID("getElementsByClassName"), 403:18-403:40
LPAREN, 403:40-403:41
DOMSTRING, 403:41-403:50
ID("classNames"), 403:51-403:61
RPAREN, 403:61-403:62
SEMI, 403:62-403:63
LBRACKET, 405:3-405:4
ID("CEReactions"), 405:4-405:15
RBRACKET, 405:15-405:16
ID("Element"), 405:17-405:24
QUESTION, 405:24-405:25
ID("insertAdjacentElement"), 405:26-405:47
LPAREN, 405:47-405:48
DOMSTRING, 405:48-405:57
ID("where"), 405:58-405:63
COMMA, 405:63-405:64
ID("Element"), 405:65-405:72
ID("element"), 405:73-405:80
RPAREN, 405:80-405:81
SEMI, 405:81-405:82
UNDEFINED, 406:3-406:12
ID("insertAdjacentText"), 406:13-406:31
LPAREN, 406:31-406:32
DOMSTRING, 406:32-406:41
ID("where"), 406:42-406:47
COMMA, 406:47-406:48
DOMSTRING, 406:49-406:58
ID("data"), 406:59-406:63
RPAREN, 406:63-406:64
SEMI, 406:64-406:65
RBRACE, 407:1-407:2
SEMI, 407:2-407:3
DICTIONARY, 409:1-409:11
ID("ShadowRootInit"), 409:12-409:26
LBRACE, 409:27-409:28
REQUIRED, 410:3-410:11
ID("ShadowRootMode"), 410:12-410:26
ID("mode"), 410:27-410:31
SEMI, 410:31-410:32
BOOLEAN, 411:3-411:10
ID("delegatesFocus"), 411:11-411:25
EQUAL, 411:26-411:27
FALSE, 411:28-411:33
SEMI, 411:33-411:34
ID("SlotAssignmentMode"), 412:3-412:21
ID("slotAssignment"), 412:22-412:36
EQUAL, 412:37-412:38
STRING("\"named\""), 412:39-412:46
SEMI, 412:46-412:47
BOOLEAN, 413:3-413:10
ID("clonable"), 413:11-413:19
EQUAL, 413:20-413:21
FALSE, 413:22-413:27
SEMI, 413:27-413:28
BOOLEAN, 414:3-414:10
ID("serializable"), 414:11-414:23
EQUAL, 414:24-414:25
FALSE, 414:26-414:31
SEMI, 414:31-414:32
ID("CustomElementRegistry"), 415:3-415:24
QUESTION, 415:24-415:25
ID("customElementRegistry"), 415:26-415:47
EQUAL, 415:48-415:49
NULL, 415:50-415:54
SEMI, 415:54-415:55
RBRACE, 416:1-416:2
SEMI, 416:2-416:3
LBRACKET, 418:1-418:2
ID("Exposed"), 418:2-418:9
EQUAL, 418:9-418:10
ID("Window"), 418:10-418:16
COMMA, 418:16-418:17
ID("LegacyUnenumerableNamedProperties"), 419:2-419:35
RBRACKET, 419:35-419:36
INTERFACE, 420:1-420:10
ID("NamedNodeMap"), 420:11-420:23
LBRACE, 420:24-420:25
READONLY, 421:3-421:11
ATTRIBUTE, 421:12-421:21
UNSIGNED, 421:22-421:30
LONG, 421:31-421:35
ID("length"), 421:36-421:42
SEMI, 421:42-421:43
GETTER, 422:3-422:9
ID("Attr"), 422:10-422:14
QUESTION, 422:14-422:15
ID("item"), 422:16-422:20
LPAREN, 422:20-422:21
UNSIGNED, 422:21-422:29
LONG, 422:30-422:34
ID("index"), 422:35-422:40
RPAREN, 422:40-422:41
SEMI, 422:41-422:42
GETTER, 423:3-423:9
ID("Attr"), 423:10-423:14
QUESTION, 423:14-423:15
ID("getNamedItem"), 423:16-423:28
LPAREN, 423:28-423:29
DOMSTRING, 423:29-423:38
ID("qualifiedName"), 423:39-423:52
RPAREN, 423:52-423:53
SEMI, 423:53-423:54
ID("Attr"), 424:3-424:7
QUESTION, 424:7-424:8
ID("getNamedItemNS"), 424:9-424:23
LPAREN, 424:23-424:24
DOMSTRING, 424:24-424:33
QUESTION, 424:33-424:34
NAMESPACE, 424:35-424:44
COMMA, 424:44-424:45
DOMSTRING, 424:46-424:55
ID("localName"), 424:56-424:65
RPAREN, 424:65-424:66
SEMI, 424:66-424:67
LBRACKET, 425:3-425:4
ID("CEReactions"), 425:4-425:15
RBRACKET, 425:15-425:16
ID("Attr"), 425:17-425:21
QUESTION, 425:21-425:22
ID("setNamedItem"), 425:23-425:35
LPAREN, 425:35-425:36
ID("Attr"), 425:36-425:40
ID("attr"), 425:41-425:45
RPAREN, 425:45-425:46
SEMI, 425:46-425:47
LBRACKET, 426:3-426:4
ID("CEReactions"), 426:4-426:15
RBRACKET, 426:15-426:16
ID("Attr"), 426:17-426:21
QUESTION, 426:21-426:22
ID("setNamedItemNS"), 426:23-426:37
LPAREN, 426:37-426:38
ID("Attr"), 426:38-426:42
ID("attr"), 426:43-426:47
RPAREN, 426:47-426:48
SEMI, 426:48-426:49
LBRACKET, 427:3-427:4
ID("CEReactions"), 427:4-427:15
RBRACKET, 427:15-427:16
ID("Attr"), 427:17-427:21
ID("removeNamedItem"), 427:22-427:37
LPAREN, 427:37-427:38
DOMSTRING, 427:38-427:47
ID("qualifiedName"), 427:48-427:61
RPAREN, 427:61-427:62
SEMI, 427:62-427:63
LBRACKET, 428:3-428:4
ID("CEReactions"), 428:4-428:15
RBRACKET, 428:15-428:16
ID("Attr"), 428:17-428:21
ID("removeNamedItemNS"), 428:22-428:39
LPAREN, 428:39-428:40
DOMSTRING, 428:40-428:49
QUESTION, 428:49-428:50
NAMESPACE, 428:51-428:60
COMMA, 428:60-428:61
DOMSTRING, 428:62-428:71
ID("localName"), 428:72-428:81
RPAREN, 428:81-428:82
SEMI, 428:82-428:83
RBRACE, 429:1-429:2
SEMI, 429:2-429:3
LBRACKET, 431:1-431:2
ID("Exposed"), 431:2-431:9
EQUAL, 431:9-431:10
ID("Window"), 431:10-431:16
RBRACKET, 431:16-431:17
INTERFACE, 432:1-432:10
ID("Attr"), 432:11-432:15
COLON, 432:16-432:17
ID("Node"), 432:18-432:22
LBRACE, 432:23-432:24
READONLY, 433:3-433:11
ATTRIBUTE, 433:12-433:21
DOMSTRING, 433:22-433:31
QUESTION, 433:31-433:32
ID("namespaceURI"), 433:33-433:45
SEMI, 433:45-433:46
READONLY, 434:3-434:11
ATTRIBUTE, 434:12-434:21
DOMSTRING, 434:22-434:31
QUESTION, 434:31-434:32
ID("prefix"), 434:33-434:39
SEMI, 434:39-434:40
READONLY, 435:3-435:11
ATTRIBUTE, 435:12-435:21
DOMSTRING, 435:22-435:31
ID("localName"), 435:32-435:41
SEMI, 435:41-435:42
READONLY, 436:3-436:11
ATTRIBUTE, 436:12-436:21
DOMSTRING, 436:22-436:31
ID("name"), 436:32-436:36
SEMI, 436:36-436:37
LBRACKET, 437:3-437:4
ID("CEReactions"), 437:4-437:15
RBRACKET, 437:15-437:16
ATTRIBUTE, 437:17-437:26
DOMSTRING, 437:27-437:36
ID("value"), 437:37-437:42
SEMI, 437:42-437:43
READONLY, 439:3-439:11
ATTRIBUTE, 439:12-439:21
ID("Element"), 439:22-439:29
QUESTION, 439:29-439:30
ID("ownerElement"), 439:31-439:43
SEMI, 439:43-439:44
READONLY, 441:3-441:11
ATTRIBUTE, 441:12-441:21
BOOLEAN, 441:22-441:29
ID("specified"), 441:30-441:39
SEMI, 441:39-441:40
RBRACE, 442:1-442:2
SEMI, 442:2-442:3
LBRACKET, 443:1-443:2
ID("Exposed"), 443:2-443:9
EQUAL, 443:9-443:10
ID("Window"), 443:10-443:16
RBRACKET, 443:16-443:17
INTERFACE, 444:1-444:10
ID("CharacterData"), 444:11-444:24
COLON, 444:25-444:26
ID("Node"), 444:27-444:31
LBRACE, 444:32-444:33
ATTRIBUTE, 445:3-445:12
LBRACKET, 445:13-445:14
ID("LegacyNullToEmptyString"), 445:14-445:37
RBRACKET, 445:37-445:38
DOMSTRING, 445:39-445:48
ID("data"), 445:49-445:53
SEMI, 445:53-445:54
READONLY, 446:3-446:11
ATTRIBUTE, 446:12-446:21
UNSIGNED, 446:22-446:30
LONG, 446:31-446:35
ID("length"), 446:36-446:42
SEMI, 446:42-446:43
DOMSTRING, 447:3-447:12
ID("substringData"), 447:13-447:26
LPAREN, 447:26-447:27
UNSIGNED, 447:27-447:35
LONG, 447:36-447:40
ID("offset"), 447:41-447:47
COMMA, 447:47-447:48
UNSIGNED, 447:49-447:57
LONG, 447:58-447:62
ID("count"), 447:63-447:68
RPAREN, 447:68-447:69
SEMI, 447:69-447:70
UNDEFINED, 448:3-448:12
ID("appendData"), 448:13-448:23
LPAREN, 448:23-448:24
DOMSTRING, 448:24-448:33
ID("data"), 448:34-448:38
RPAREN, 448:38-448:39
SEMI, 448:39-448:40
UNDEFINED, 449:3-449:12
ID("insertData"), 449:13-449:23
LPAREN, 449:23-449:24
UNSIGNED, 449:24-449:32
LONG, 449:33-449:37
ID("offset"), 449:38-449:44
COMMA, 449:44-449:45
DOMSTRING, 449:46-449:55
ID("data"), 449:56-449:60
RPAREN, 449:60-449:61
SEMI, 449:61-449:62
UNDEFINED, 450:3-450:12
ID("deleteData"), 450:13-450:23
LPAREN, 450:23-450:24
UNSIGNED, 450:24-450:32
LONG, 450:33-450:37
ID("offset"), 450:38-450:44
COMMA, 450:44-450:45
UNSIGNED, 450:46-450:54
LONG, 450:55-450:59
ID("count"), 450:60-450:65
RPAREN, 450:65-450:66
SEMI, 450:66-450:67
UNDEFINED, 451:3-451:12
ID("replaceData"), 451:13-451:24
LPAREN, 451:24-451:25
UNSIGNED, 451:25-451:33
LONG, 451:34-451:38
ID("offset"), 451:39-451:45
COMMA, 451:45-451:46
UNSIGNED, 451:47-451:55
LONG, 451:56-451:60
ID("count"), 451:61-451:66
COMMA, 451:66-451:67
DOMSTRING, 451:68-451:77
ID("data"), 451:78-451:82
RPAREN, 451:82-451:83
SEMI, 451:83-451:84
RBRACE, 452:1-452:2
SEMI, 452:2-452:3
LBRACKET, 454:1-454:2
ID("Exposed"), 454:2-454:9
EQUAL, 454:9-454:10
ID("Window"), 454:10-454:16
RBRACKET, 454:16-454:17
INTERFACE, 455:1-455:10
ID("Text"), 455:11-455:15
COLON, 455:16-455:17
ID("CharacterData"), 455:18-455:31
LBRACE, 455:32-455:33
CONSTRUCTOR, 456:3-456:14
LPAREN, 456:14-456:15
OPTIONAL, 456:15-456:23
DOMSTRING, 456:24-456:33
ID("data"), 456:34-456:38
EQUAL, 456:39-456:40
STRING("\"\""), 456:41-456:43
RPAREN, 456:43-456:44
SEMI, 456:44-456:45
LBRACKET, 458:3-458:4
ID("NewObject"), 458:4-458:13
RBRACKET, 458:13-458:14
ID("Text"), 458:15-458:19
ID("splitText"), 458:20-458:29
LPAREN, 458:29-458:30
UNSIGNED, 458:30-458:38
LONG, 458:39-458:43
ID("offset"), 458:44-458:50
RPAREN, 458:50-458:51
SEMI, 458:51-458:52
READONLY, 459:3-459:11
ATTRIBUTE, 459:12-459:21
DOMSTRING, 459:22-459:31
ID("wholeText"), 459:32-459:41
SEMI, 459:41-459:42
RBRACE, 460:1-460:2
SEMI, 460:2-460:3
LBRACKET, 462:1-462:2
ID("Exposed"), 462:2-462:9
EQUAL, 462:9-462:10
ID("Window"), 462:10-462:16
RBRACKET, 462:16-462:17
INTERFACE, 463:1-463:10
ID("CDATASection"), 463:11-463:23
COLON, 463:24-463:25
ID("Text"), 463:26-463:30
LBRACE, 463:31-463:32
RBRACE, 464:1-464:2
SEMI, 464:2-464:3
LBRACKET, 465:1-465:2
ID("Exposed"), 465:2-465:9
EQUAL, 465:9-465:10
ID("Window"), 465:10-465:16
RBRACKET, 465:16-465:17
INTERFACE, 466:1-466:10
ID("ProcessingInstruction"), 466:11-466:32
COLON, 466:33-466:34
ID("CharacterData"), 466:35-466:48
LBRACE, 466:49-466:50
READONLY, 467:3-467:11
ATTRIBUTE, 467:12-467:21
DOMSTRING, 467:22-467:31
ID("target"), 467:32-467:38
SEMI, 467:38-467:39
RBRACE, 468:1-468:2
SEMI, 468:2-468:3
LBRACKET, 469:1-469:2
ID("Exposed"), 469:2-469:9
EQUAL, 469:9-469:10
ID("Window"), 469:10-469:16
RBRACKET, 469:16-469:17
INTERFACE, 470:1-470:10
ID("Comment"), 470:11-470:18
COLON, 470:19-470:20
ID("CharacterData"), 470:21-470:34
LBRACE, 470:35-470:36
CONSTRUCTOR, 471:3-471:14
LPAREN, 471:14-471:15
OPTIONAL, 471:15-471:23
DOMSTRING, 471:24-471:33
ID("data"), 471:34-471:38
EQUAL, 471:39-471:40
STRING("\"\""), 471:41-471:43
RPAREN, 471:43-471:44
SEMI, 471:44-471:45
RBRACE, 472:1-472:2
SEMI, 472:2-472:3
LBRACKET, 474:1-474:2
ID("Exposed"), 474:2-474:9
EQUAL, 474:9-474:10
ID("Window"), 474:10-474:16
RBRACKET, 474:16-474:17
INTERFACE, 475:1-475:10
ID("AbstractRange"), 475:11-475:24
LBRACE, 475:25-475:26
READONLY, 476:3-476:11
ATTRIBUTE, 476:12-476:21
ID("Node"), 476:22-476:26
ID("startContainer"), 476:27-476:41
SEMI, 476:41-476:42
READONLY, 477:3-477:11
ATTRIBUTE, 477:12-477:21
UNSIGNED, 477:22-477:30
LONG, 477:31-477:35
ID("startOffset"), 477:36-477:47
SEMI, 477:47-477:48
READONLY, 478:3-478:11
ATTRIBUTE, 478:12-478:21
ID("Node"), 478:22-478:26
ID("endContainer"), 478:27-478:39
SEMI, 478:39-478:40
READONLY, 479:3-479:11
ATTRIBUTE, 479:12-479:21
UNSIGNED, 479:22-479:30
LONG, 479:31-479:35
ID("endOffset"), 479:36-479:45
SEMI, 479:45-479:46
READONLY, 480:3-480:11
ATTRIBUTE, 480:12-480:21
BOOLEAN, 480:22-480:29
ID("collapsed"), 480:30-480:39
SEMI, 480:39-480:40
RBRACE, 481:1-481:2
SEMI, 481:2-481:3
DICTIONARY, 483:1-483:11
ID("StaticRangeInit"), 483:12-483:27
LBRACE, 483:28-483:29
REQUIRED, 484:3-484:11
ID("Node"), 484:12-484:16
ID("startContainer"), 484:17-484:31
SEMI, 484:31-484:32
REQUIRED, 485:3-485:11
UNSIGNED, 485:12-485:20
LONG, 485:21-485:25
ID("startOffset"), 485:26-485:37
SEMI, 485:37-485:38
REQUIRED, 486:3-486:11
ID("Node"), 486:12-486:16
ID("endContainer"), 486:17-486:29
SEMI, 486:29-486:30
REQUIRED, 487:3-487:11
UNSIGNED, 487:12-487:20
LONG, 487:21-487:25
ID("endOffset"), 487:26-487:35
SEMI, 487:35-487:36
RBRACE, 488:1-488:2
SEMI, 488:2-488:3
LBRACKET, 490:1-490:2
ID("Exposed"), 490:2-490:9
EQUAL, 490:9-490:10
ID("Window"), 490:10-490:16
RBRACKET, 490:16-490:17
INTERFACE, 491:1-491:10
ID("StaticRange"), 491:11-491:22
COLON, 491:23-491:24
ID("AbstractRange"), 491:25-491:38
LBRACE, 491:39-491:40
CONSTRUCTOR, 492:3-492:14
LPAREN, 492:14-492:15
ID("StaticRangeInit"), 492:15-492:30
ID("init"), 492:31-492:35
RPAREN, 492:35-492:36
SEMI, 492:36-492:37
RBRACE, 493:1-493:2
SEMI, 493:2-493:3
LBRACKET, 495:1-495:2
ID("Exposed"), 495:2-495:9
EQUAL, 495:9-495:10
ID("Window"), 495:10-495:16
RBRACKET, 495:16-495:17
INTERFACE, 496:1-496:10
ID("Range"), 496:11-496:16
COLON, 496:17-496:18
ID("AbstractRange"), 496:19-496:32
LBRACE, 496:33-496:34
CONSTRUCTOR, 497:3-497:14
LPAREN, 497:14-497:15
RPAREN, 497:15-497:16
SEMI, 497:16-497:17
READONLY, 499:3-499:11
ATTRIBUTE, 499:12-499:21
ID("Node"), 499:22-499:26
ID("commonAncestorContainer"), 499:27-499:50
SEMI, 499:50-499:51
UNDEFINED, 501:3-501:12
ID("setStart"), 501:13-501:21
LPAREN, 501:21-501:22
ID("Node"), 501:22-501:26
ID("node"), 501:27-501:31
COMMA, 501:31-501:32
UNSIGNED, 501:33-501:41
LONG, 501:42-501:46
ID("offset"), 501:47-501:53
RPAREN, 501:53-501:54
SEMI, 501:54-501:55
UNDEFINED, 502:3-502:12
ID("setEnd"), 502:13-502:19
LPAREN, 502:19-502:20
ID("Node"), 502:20-502:24
ID("node"), 502:25-502:29
COMMA, 502:29-502:30
UNSIGNED, 502:31-502:39
LONG, 502:40-502:44
ID("offset"), 502:45-502:51
RPAREN, 502:51-502:52
SEMI, 502:52-502:53
UNDEFINED, 503:3-503:12
ID("setStartBefore"), 503:13-503:27
LPAREN, 503:27-503:28
ID("Node"), 503:28-503:32
ID("node"), 503:33-503:37
RPAREN, 503:37-503:38
SEMI, 503:38-503:39
UNDEFINED, 504:3-504:12
ID("setStartAfter"), 504:13-504:26
LPAREN, 504:26-504:27
ID("Node"), 504:27-504:31
ID("node"), 504:32-504:36
RPAREN, 504:36-504:37
SEMI, 504:37-504:38
UNDEFINED, 505:3-505:12
ID("setEndBefore"), 505:13-505:25
LPAREN, 505:25-505:26
ID("Node"), 505:26-505:30
ID("node"), 505:31-505:35
RPAREN, 505:35-505:36
SEMI, 505:36-505:37
UNDEFINED, 506:3-506:12
ID("setEndAfter"), 506:13-506:24
LPAREN, 506:24-506:25
ID("Node"), 506:25-506:29
ID("node"), 506:30-506:34
RPAREN, 506:34-506:35
SEMI, 506:35-506:36
UNDEFINED, 507:3-507:12
ID("collapse"), 507:13-507:21
LPAREN, 507:21-507:22
OPTIONAL, 507:22-507:30
BOOLEAN, 507:31-507:38
ID("toStart"), 507:39-507:46
EQUAL, 507:47-507:48
FALSE, 507:49-507:54
RPAREN, 507:54-507:55
SEMI, 507:55-507:56
UNDEFINED, 508:3-508:12
ID("selectNode"), 508:13-508:23
LPAREN, 508:23-508:24
ID("Node"), 508:24-508:28
ID("node"), 508:29-508:33
RPAREN, 508:33-508:34
SEMI, 508:34-508:35
UNDEFINED, 509:3-509:12
ID("selectNodeContents"), 509:13-509:31
LPAREN, 509:31-509:32
ID("Node"), 509:32-509:36
ID("node"), 509:37-509:41
RPAREN, 509:41-509:42
SEMI, 509:42-509:43
CONST, 511:3-511:8
UNSIGNED, 511:9-511:17
SHORT, 511:18-511:23
ID("START_TO_START"), 511:24-511:38
EQUAL, 511:39-511:40
INT("0"), 511:41-511:42
SEMI, 511:42-511:43
CONST, 512:3-512:8
UNSIGNED, 512:9-512:17
SHORT, 512:18-512:23
ID("START_TO_END"), 512:24-512:36
EQUAL, 512:37-512:38
INT("1"), 512:39-512:40
SEMI, 512:40-512:41
CONST, 513:3-513:8
UNSIGNED, 513:9-513:17
SHORT, 513:18-513:23
ID("END_TO_END"), 513:24-513:34
EQUAL, 513:35-513:36
INT("2"), 513:37-513:38
SEMI, 513:38-513:39
CONST, 514:3-514:8
UNSIGNED, 514:9-514:17
SHORT, 514:18-514:23
ID("END_TO_START"), 514:24-514:36
EQUAL, 514:37-514:38
INT("3"), 514:39-514:40
SEMI, 514:40-514:41
SHORT, 515:3-515:8
ID("compareBoundaryPoints"), 515:9-515:30
LPAREN, 515:30-515:31
UNSIGNED, 515:31-515:39
SHORT, 515:40-515:45
ID("how"), 515:46-515:49
COMMA, 515:49-515:50
ID("Range"), 515:51-515:56
ID("sourceRange"), 515:57-515:68
RPAREN, 515:68-515:69
SEMI, 515:69-515:70
LBRACKET, 517:3-517:4
ID("CEReactions"), 517:4-517:15
RBRACKET, 517:15-517:16
UNDEFINED, 517:17-517:26
ID("deleteContents"), 517:27-517:41
LPAREN, 517:41-517:42
RPAREN, 517:42-517:43
SEMI, 517:43-517:44
LBRACKET, 518:3-518:4
ID("CEReactions"), 518:4-518:15
COMMA, 518:15-518:16
ID("NewObject"), 518:17-518:26
RBRACKET, 518:26-518:27
ID("DocumentFragment"), 518:28-518:44
ID("extractContents"), 518:45-518:60
LPAREN, 518:60-518:61
RPAREN, 518:61-518:62
SEMI, 518:62-518:63
LBRACKET, 519:3-519:4
ID("CEReactions"), 519:4-519:15
COMMA, 519:15-519:16
ID("NewObject"), 519:17-519:26
RBRACKET, 519:26-519:27
ID("DocumentFragment"), 519:28-519:44
ID("cloneContents"), 519:45-519:58
LPAREN, 519:58-519:59
RPAREN, 519:59-519:60
SEMI, 519:60-519:61
LBRACKET, 520:3-520:4
ID("CEReactions"), 520:4-520:15
RBRACKET, 520:15-520:16
UNDEFINED, 520:17-520:26
ID("insertNode"), 520:27-520:37
LPAREN, 520:37-520:38
ID("Node"), 520:38-520:42
ID("node"), 520:43-520:47
RPAREN, 520:47-520:48
SEMI, 520:48-520:49
LBRACKET, 521:3-521:4
ID("CEReactions"), 521:4-521:15
RBRACKET, 521:15-521:16
UNDEFINED, 521:17-521:26
ID("surroundContents"), 521:27-521:43
LPAREN, 521:43-521:44
ID("Node"), 521:44-521:48
ID("newParent"), 521:49-521:58
RPAREN, 521:58-521:59
SEMI, 521:59-521:60
LBRACKET, 523:3-523:4
ID("NewObject"), 523:4-523:13
RBRACKET, 523:13-523:14
ID("Range"), 523:15-523:20
ID("cloneRange"), 523:21-523:31
LPAREN, 523:31-523:32
RPAREN, 523:32-523:33
SEMI, 523:33-523:34
UNDEFINED, 524:3-524:12
ID("detach"), 524:13-524:19
LPAREN, 524:19-524:20
RPAREN, 524:20-524:21
SEMI, 524:21-524:22
BOOLEAN, 526:3-526:10
ID("isPointInRange"), 526:11-526:25
LPAREN, 526:25-526:26
ID("Node"), 526:26-526:30
ID("node"), 526:31-526:35
COMMA, 526:35-526:36
UNSIGNED, 526:37-526:45
LONG, 526:46-526:50
ID("offset"), 526:51-526:57
RPAREN, 526:57-526:58
SEMI, 526:58-526:59
SHORT, 527:3-527:8
ID("comparePoint"), 527:9-527:21
LPAREN, 527:21-527:22
ID("Node"), 527:22-527:26
ID("node"), 527:27-527:31
COMMA, 527:31-527:32
UNSIGNED, 527:33-527:41
LONG, 527:42-527:46
ID("offset"), 527:47-527:53
RPAREN, 527:53-527:54
SEMI, 527:54-527:55
BOOLEAN, 529:3-529:10
ID("intersectsNode"), 529:11-529:25
LPAREN, 529:25-529:26
ID("Node"), 529:26-529:30
ID("node"), 529:31-529:35
RPAREN, 529:35-529:36
SEMI, 529:36-529:37
STRINGIFIER, 531:3-531:14
SEMI, 531:14-531:15
RBRACE, 532:1-532:2
SEMI, 532:2-532:3
LBRACKET, 534:1-534:2
ID("Exposed"), 534:2-534:9
EQUAL, 534:9-534:10
ID("Window"), 534:10-534:16
RBRACKET, 534:16-534:17
INTERFACE, 535:1-535:10
ID("NodeIterator"), 535:11-535:23
LBRACE, 535:24-535:25
LBRACKET, 536:3-536:4
ID("SameObject"), 536:4-536:14
RBRACKET, 536:14-536:15
READONLY, 536:16-536:24
ATTRIBUTE, 536:25-536:34
ID("Node"), 536:35-536:39
ID("root"), 536:40-536:44
SEMI, 536:44-536:45
READONLY, 537:3-537:11
ATTRIBUTE, 537:12-537:21
ID("Node"), 537:22-537:26
ID("referenceNode"), 537:27-537:40
SEMI, 537:40-537:41
READONLY, 538:3-538:11
ATTRIBUTE, 538:12-538:21
BOOLEAN, 538:22-538:29
ID("pointerBeforeReferenceNode"), 538:30-538:56
SEMI, 538:56-538:57
READONLY, 539:3-539:11
ATTRIBUTE, 539:12-539:21
UNSIGNED, 539:22-539:30
LONG, 539:31-539:35
ID("whatToShow"), 539:36-539:46
SEMI, 539:46-539:47
READONLY, 540:3-540:11
ATTRIBUTE, 540:12-540:21
ID("NodeFilter"), 540:22-540:32
QUESTION, 540:32-540:33
ID("filter"), 540:34-540:40
SEMI, 540:40-540:41
ID("Node"), 542:3-542:7
QUESTION, 542:7-542:8
ID("nextNode"), 542:9-542:17
LPAREN, 542:17-542:18
RPAREN, 542:18-542:19
SEMI, 542:19-542:20
ID("Node"), 543:3-543:7
QUESTION, 543:7-543:8
ID("previousNode"), 543:9-543:21
LPAREN, 543:21-543:22
RPAREN, 543:22-543:23
SEMI, 543:23-543:24
UNDEFINED, 545:3-545:12
ID("detach"), 545:13-545:19
LPAREN, 545:19-545:20
RPAREN, 545:20-545:21
SEMI, 545:21-545:22
RBRACE, 546:1-546:2
SEMI, 546:2-546:3
LBRACKET, 548:1-548:2
ID("Exposed"), 548:2-548:9
EQUAL, 548:9-548:10
ID("Window"), 548:10-548:16
RBRACKET, 548:16-548:17
INTERFACE, 549:1-549:10
ID("TreeWalker"), 549:11-549:21
LBRACE, 549:22-549:23
LBRACKET, 550:3-550:4
ID("SameObject"), 550:4-550:14
RBRACKET, 550:14-550:15
READONLY, 550:16-550:24
ATTRIBUTE, 550:25-550:34
ID("Node"), 550:35-550:39
ID("root"), 550:40-550:44
SEMI, 550:44-550:45
READONLY, 551:3-551:11
ATTRIBUTE, 551:12-551:21
UNSIGNED, 551:22-551:30
LONG, 551:31-551:35
ID("whatToShow"), 551:36-551:46
SEMI, 551:46-551:47
READONLY, 552:3-552:11
ATTRIBUTE, 552:12-552:21
ID("NodeFilter"), 552:22-552:32
QUESTION, 552:32-552:33
ID("filter"), 552:34-552:40
SEMI, 552:40-552:41
ATTRIBUTE, 553:12-553:21
ID("Node"), 553:22-553:26
ID("currentNode"), 553:27-553:38
SEMI, 553:38-553:39
ID("Node"), 555:3-555:7
QUESTION, 555:7-555:8
ID("parentNode"), 555:9-555:19
LPAREN, 555:19-555:20
RPAREN, 555:20-555:21
SEMI, 555:21-555:22
ID("Node"), 556:3-556:7
QUESTION, 556:7-556:8
ID("firstChild"), 556:9-556:19
LPAREN, 556:19-556:20
RPAREN, 556:20-556:21
SEMI, 556:21-556:22
ID("Node"), 557:3-557:7
QUESTION, 557:7-557:8
ID("lastChild"), 557:9-557:18
LPAREN, 557:18-557:19
RPAREN, 557:19-557:20
SEMI, 557:20-557:21
ID("Node"), 558:3-558:7
QUESTION, 558:7-558:8
ID("previousSibling"), 558:9-558:24
LPAREN, 558:24-558:25
RPAREN, 558:25-558:26
SEMI, 558:26-558:27
ID("Node"), 559:3-559:7
QUESTION, 559:7-559:8
ID("nextSibling"), 559:9-559:20
LPAREN, 559:20-559:21
RPAREN, 559:21-559:22
SEMI, 559:22-559:23
ID("Node"), 560:3-560:7
QUESTION, 560:7-560:8
ID("previousNode"), 560:9-560:21
LPAREN, 560:21-560:22
RPAREN, 560:22-560:23
SEMI, 560:23-560:24
ID("Node"), 561:3-561:7
QUESTION, 561:7-561:8
ID("nextNode"), 561:9-561:17
LPAREN, 561:17-561:18
RPAREN, 561:18-561:19
SEMI, 561:19-561:20
RBRACE, 562:1-562:2
SEMI, 562:2-562:3
LBRACKET, 563:1-563:2
ID("Exposed"), 563:2-563:9
EQUAL, 563:9-563:10
ID("Window"), 563:10-563:16
RBRACKET, 563:16-563:17
CALLBACK, 564:1-564:9
INTERFACE, 564:10-564:19
ID("NodeFilter"), 564:20-564:30
LBRACE, 564:31-564:32
CONST, 566:3-566:8
UNSIGNED, 566:9-566:17
SHORT, 566:18-566:23
ID("FILTER_ACCEPT"), 566:24-566:37
EQUAL, 566:38-566:39
INT("1"), 566:40-566:41
SEMI, 566:41-566:42
CONST, 567:3-567:8
UNSIGNED, 567:9-567:17
SHORT, 567:18-567:23
ID("FILTER_REJECT"), 567:24-567:37
EQUAL, 567:38-567:39
INT("2"), 567:40-567:41
SEMI, 567:41-567:42
CONST, 568:3-568:8
UNSIGNED, 568:9-568:17
SHORT, 568:18-568:23
ID("FILTER_SKIP"), 568:24-568:35
EQUAL, 568:36-568:37
INT("3"), 568:38-568:39
SEMI, 568:39-568:40
CONST, 571:3-571:8
UNSIGNED, 571:9-571:17
LONG, 571:18-571:22
ID("SHOW_ALL"), 571:23-571:31
EQUAL, 571:32-571:33
INT("0xFFFFFFFF"), 571:34-571:44
SEMI, 571:44-571:45
CONST, 572:3-572:8
UNSIGNED, 572:9-572:17
LONG, 572:18-572:22
ID("SHOW_ELEMENT"), 572:23-572:35
EQUAL, 572:36-572:37
INT("0x1"), 572:38-572:41
SEMI, 572:41-572:42
CONST, 573:3-573:8
UNSIGNED, 573:9-573:17
LONG, 573:18-573:22
ID("SHOW_ATTRIBUTE"), 573:23-573:37
EQUAL, 573:38-573:39
INT("0x2"), 573:40-573:43
SEMI, 573:43-573:44
CONST, 574:3-574:8
UNSIGNED, 574:9-574:17
LONG, 574:18-574:22
ID("SHOW_TEXT"), 574:23-574:32
EQUAL, 574:33-574:34
INT("0x4"), 574:35-574:38
SEMI, 574:38-574:39
CONST, 575:3-575:8
UNSIGNED, 575:9-575:17
LONG, 575:18-575:22
ID("SHOW_CDATA_SECTION"), 575:23-575:41
EQUAL, 575:42-575:43
INT("0x8"), 575:44-575:47
SEMI, 575:47-575:48
CONST, 576:3-576:8
UNSIGNED, 576:9-576:17
LONG, 576:18-576:22
ID("SHOW_ENTITY_REFERENCE"), 576:23-576:44
EQUAL, 576:45-576:46
INT("0x10"), 576:47-576:51
SEMI, 576:51-576:52
CONST, 577:3-577:8
UNSIGNED, 577:9-577:17
LONG, 577:18-577:22
ID("SHOW_ENTITY"), 577:23-577:34
EQUAL, 577:35-577:36
INT("0x20"), 577:37-577:41
SEMI, 577:41-577:42
CONST, 578:3-578:8
UNSIGNED, 578:9-578:17
LONG, 578:18-578:22
ID("SHOW_PROCESSING_INSTRUCTION"), 578:23-578:50
EQUAL, 578:51-578:52
INT("0x40"), 578:53-578:57
SEMI, 578:57-578:58
CONST, 579:3-579:8
UNSIGNED, 579:9-579:17
LONG, 579:18-579:22
ID("SHOW_COMMENT"), 579:23-579:35
EQUAL, 579:36-579:37
INT("0x80"), 579:38-579:42
SEMI, 579:42-579:43
CONST, 580:3-580:8
UNSIGNED, 580:9-580:17
LONG, 580:18-580:22
ID("SHOW_DOCUMENT"), 580:23-580:36
EQUAL, 580:37-580:38
INT("0x100"), 580:39-580:44
SEMI, 580:44-580:45
CONST, 581:3-581:8
UNSIGNED, 581:9-581:17
LONG, 581:18-581:22
ID("SHOW_DOCUMENT_TYPE"), 581:23-581:41
EQUAL, 581:42-581:43
INT("0x200"), 581:44-581:49
SEMI, 581:49-581:50
CONST, 582:3-582:8
UNSIGNED, 582:9-582:17
LONG, 582:18-582:22
ID("SHOW_DOCUMENT_FRAGMENT"), 582:23-582:45
EQUAL, 582:46-582:47
INT("0x400"), 582:48-582:53
SEMI, 582:53-582:54
CONST, 583:3-583:8
UNSIGNED, 583:9-583:17
LONG, 583:18-583:22
ID("SHOW_NOTATION"), 583:23-583:36
EQUAL, 583:37-583:38
INT("0x800"), 583:39-583:44
SEMI, 583:44-583:45
UNSIGNED, 585:3-585:11
SHORT, 585:12-585:17
ID("acceptNode"), 585:18-585:28
LPAREN, 585:28-585:29
ID("Node"), 585:29-585:33
ID("node"), 585:34-585:38
RPAREN, 585:38-585:39
SEMI, 585:39-585:40
RBRACE, 586:1-586:2
SEMI, 586:2-586:3
LBRACKET, 588:1-588:2
ID("Exposed"), 588:2-588:9
EQUAL, 588:9-588:10
ID("Window"), 588:10-588:16
RBRACKET, 588:16-588:17
INTERFACE, 589:1-589:10
ID("DOMTokenList"), 589:11-589:23
LBRACE, 589:24-589:25
READONLY, 590:3-590:11
ATTRIBUTE, 590:12-590:21
UNSIGNED, 590:22-590:30
LONG, 590:31-590:35
ID("length"), 590:36-590:42
SEMI, 590:42-590:43
GETTER, 591:3-591:9
DOMSTRING, 591:10-591:19
QUESTION, 591:19-591:20
ID("item"), 591:21-591:25
LPAREN, 591:25-591:26
UNSIGNED, 591:26-591:34
LONG, 591:35-591:39
ID("index"), 591:40-591:45
RPAREN, 591:45-591:46
SEMI, 591:46-591:47
BOOLEAN, 592:3-592:10
ID("contains"), 592:11-592:19
LPAREN, 592:19-592:20
DOMSTRING, 592:20-592:29
ID("token"), 592:30-592:35
RPAREN, 592:35-592:36
SEMI, 592:36-592:37
LBRACKET, 593:3-593:4
ID("CEReactions"), 593:4-593:15
RBRACKET, 593:15-593:16
UNDEFINED, 593:17-593:26
ID("add"), 593:27-593:30
LPAREN, 593:30-593:31
DOMSTRING, 593:31-593:40
ELLIPS, 593:40-593:43
ID("tokens"), 593:44-593:50
RPAREN, 593:50-593:51
SEMI, 593:51-593:52
LBRACKET, 594:3-594:4
ID("CEReactions"), 594:4-594:15
RBRACKET, 594:15-594:16
UNDEFINED, 594:17-594:26
ID("remove"), 594:27-594:33
LPAREN, 594:33-594:34
DOMSTRING, 594:34-594:43
ELLIPS, 594:43-594:46
ID("tokens"), 594:47-594:53
RPAREN, 594:53-594:54
SEMI, 594:54-594:55
LBRACKET, 595:3-595:4
ID("CEReactions"), 595:4-595:15
RBRACKET, 595:15-595:16
BOOLEAN, 595:17-595:24
ID("toggle"), 595:25-595:31
LPAREN, 595:31-595:32
DOMSTRING, 595:32-595:41
ID("token"), 595:42-595:47
COMMA, 595:47-595:48
OPTIONAL, 595:49-595:57
BOOLEAN, 595:58-595:65
ID("force"), 595:66-595:71
RPAREN, 595:71-595:72
SEMI, 595:72-595:73
LBRACKET, 596:3-596:4
ID("CEReactions"), 596:4-596:15
RBRACKET, 596:15-596:16
BOOLEAN, 596:17-596:24
ID("replace"), 596:25-596:32
LPAREN, 596:32-596:33
DOMSTRING, 596:33-596:42
ID("token"), 596:43-596:48
COMMA, 596:48-596:49
DOMSTRING, 596:50-596:59
ID("newToken"), 596:60-596:68
RPAREN, 596:68-596:69
SEMI, 596:69-596:70
BOOLEAN, 597:3-597:10
ID("supports"), 597:11-597:19
LPAREN, 597:19-597:20
DOMSTRING, 597:20-597:29
ID("token"), 597:30-597:35
RPAREN, 597:35-597:36
SEMI, 597:36-597:37
LBRACKET, 598:3-598:4
ID("CEReactions"), 598:4-598:15
RBRACKET, 598:15-598:16
STRINGIFIER, 598:17-598:28
ATTRIBUTE, 598:29-598:38
DOMSTRING, 598:39-598:48
ID("value"), 598:49-598:54
SEMI, 598:54-598:55
ITERABLE, 599:3-599:11
LT, 599:11-599:12
DOMSTRING, 599:12-599:21
GT, 599:21-599:22
SEMI, 599:22-599:23
RBRACE, 600:1-600:2
SEMI, 600:2-600:3
LBRACKET, 602:1-602:2
ID("Exposed"), 602:2-602:9
EQUAL, 602:9-602:10
ID("Window"), 602:10-602:16
RBRACKET, 602:16-602:17
INTERFACE, 603:1-603:10
ID("XPathResult"), 603:11-603:22
LBRACE, 603:23-603:24
CONST, 604:3-604:8
UNSIGNED, 604:9-604:17
SHORT, 604:18-604:23
ID("ANY_TYPE"), 604:24-604:32
EQUAL, 604:33-604:34
INT("0"), 604:35-604:36
SEMI, 604:36-604:37
CONST, 605:3-605:8
UNSIGNED, 605:9-605:17
SHORT, 605:18-605:23
ID("NUMBER_TYPE"), 605:24-605:35
EQUAL, 605:36-605:37
INT("1"), 605:38-605:39
SEMI, 605:39-605:40
CONST, 606:3-606:8
UNSIGNED, 606:9-606:17
SHORT, 606:18-606:23
ID("STRING_TYPE"), 606:24-606:35
EQUAL, 606:36-606:37
INT("2"), 606:38-606:39
SEMI, 606:39-606:40
CONST, 607:3-607:8
UNSIGNED, 607:9-607:17
SHORT, 607:18-607:23
ID("BOOLEAN_TYPE"), 607:24-607:36
EQUAL, 607:37-607:38
INT("3"), 607:39-607:40
SEMI, 607:40-607:41
CONST, 608:3-608:8
UNSIGNED, 608:9-608:17
SHORT, 608:18-608:23
ID("UNORDERED_NODE_ITERATOR_TYPE"), 608:24-608:52
EQUAL, 608:53-608:54
INT("4"), 608:55-608:56
SEMI, 608:56-608:57
CONST, 609:3-609:8
UNSIGNED, 609:9-609:17
SHORT, 609:18-609:23
ID("ORDERED_NODE_ITERATOR_TYPE"), 609:24-609:50
EQUAL, 609:51-609:52
INT("5"), 609:53-609:54
SEMI, 609:54-609:55
CONST, 610:3-610:8
UNSIGNED, 610:9-610:17
SHORT, 610:18-610:23
ID("UNORDERED_NODE_SNAPSHOT_TYPE"), 610:24-610:52
EQUAL, 610:53-610:54
INT("6"), 610:55-610:56
SEMI, 610:56-610:57
CONST, 611:3-611:8
UNSIGNED, 611:9-611:17
SHORT, 611:18-611:23
ID("ORDERED_NODE_SNAPSHOT_TYPE"), 611:24-611:50
EQUAL, 611:51-611:52
INT("7"), 611:53-611:54
SEMI, 611:54-611:55
CONST, 612:3-612:8
UNSIGNED, 612:9-612:17
SHORT, 612:18-612:23
ID("ANY_UNORDERED_NODE_TYPE"), 612:24-612:47
EQUAL, 612:48-612:49
INT("8"), 612:50-612:51
SEMI, 612:51-612:52
CONST, 613:3-613:8
UNSIGNED, 613:9-613:17
SHORT, 613:18-613:23
ID("FIRST_ORDERED_NODE_TYPE"), 613:24-613:47
EQUAL, 613:48-613:49
INT("9"), 613:50-613:51
SEMI, 613:51-613:52
READONLY, 615:3-615:11
ATTRIBUTE, 615:12-615:21
UNSIGNED, 615:22-615:30
SHORT, 615:31-615:36
ID("resultType"), 615:37-615:47
SEMI, 615:47-615:48
READONLY, 616:3-616:11
ATTRIBUTE, 616:12-616:21
UNRESTRICTED, 616:22-616:34
DOUBLE, 616:35-616:41
ID("numberValue"), 616:42-616:53
SEMI, 616:53-616:54
READONLY, 617:3-617:11
ATTRIBUTE, 617:12-617:21
DOMSTRING, 617:22-617:31
ID("stringValue"), 617:32-617:43
SEMI, 617:43-617:44
READONLY, 618:3-618:11
ATTRIBUTE, 618:12-618:21
BOOLEAN, 618:22-618:29
ID("booleanValue"), 618:30-618:42
SEMI, 618:42-618:43
READONLY, 619:3-619:11
ATTRIBUTE, 619:12-619:21
ID("Node"), 619:22-619:26
QUESTION, 619:26-619:27
ID("singleNodeValue"), 619:28-619:43
SEMI, 619:43-619:44
READONLY, 620:3-620:11
ATTRIBUTE, 620:12-620:21
BOOLEAN, 620:22-620:29
ID("invalidIteratorState"), 620:30-620:50
SEMI, 620:50-620:51
READONLY, 621:3-621:11
ATTRIBUTE, 621:12-621:21
UNSIGNED, 621:22-621:30
LONG, 621:31-621:35
ID("snapshotLength"), 621:36-621:50
SEMI, 621:50-621:51
ID("Node"), 623:3-623:7
QUESTION, 623:7-623:8
ID("iterateNext"), 623:9-623:20
LPAREN, 623:20-623:21
RPAREN, 623:21-623:22
SEMI, 623:22-623:23
ID("Node"), 624:3-624:7
QUESTION, 624:7-624:8
ID("snapshotItem"), 624:9-624:21
LPAREN, 624:21-624:22
UNSIGNED, 624:22-624:30
LONG, 624:31-624:35
ID("index"), 624:36-624:41
RPAREN, 624:41-624:42
SEMI, 624:42-624:43
RBRACE, 625:1-625:2
SEMI, 625:2-625:3
LBRACKET, 627:1-627:2
ID("Exposed"), 627:2-627:9
EQUAL, 627:9-627:10
ID("Window"), 627:10-627:16
RBRACKET, 627:16-627:17
INTERFACE, 628:1-628:10
ID("XPathExpression"), 628:11-628:26
LBRACE, 628:27-628:28
ID("XPathResult"), 630:3-630:14
ID("evaluate"), 630:15-630:23
LPAREN, 630:23-630:24
ID("Node"), 630:24-630:28
ID("contextNode"), 630:29-630:40
COMMA, 630:40-630:41
OPTIONAL, 630:42-630:50
UNSIGNED, 630:51-630:59
SHORT, 630:60-630:65
ID("type"), 630:66-630:70
EQUAL, 630:71-630:72
INT("0"), 630:73-630:74
COMMA, 630:74-630:75
OPTIONAL, 630:76-630:84
ID("XPathResult"), 630:85-630:96
QUESTION, 630:96-630:97
ID("result"), 630:98-630:104
EQUAL, 630:105-630:106
NULL, 630:107-630:111
RPAREN, 630:111-630:112
SEMI, 630:112-630:113
RBRACE, 631:1-631:2
SEMI, 631:2-631:3
CALLBACK, 633:1-633:9
INTERFACE, 633:10-633:19
ID("XPathNSResolver"), 633:20-633:35
LBRACE, 633:36-633:37
DOMSTRING, 634:3-634:12
QUESTION, 634:12-634:13
ID("lookupNamespaceURI"), 634:14-634:32
LPAREN, 634:32-634:33
DOMSTRING, 634:33-634:42
QUESTION, 634:42-634:43
ID("prefix"), 634:44-634:50
RPAREN, 634:50-634:51
SEMI, 634:51-634:52
RBRACE, 635:1-635:2
SEMI, 635:2-635:3
INTERFACE, 637:1-637:10
MIXIN, 637:11-637:16
ID("XPathEvaluatorBase"), 637:17-637:35
LBRACE, 637:36-637:37
LBRACKET, 638:3-638:4
ID("NewObject"), 638:4-638:13
RBRACKET, 638:13-638:14
ID("XPathExpression"), 638:15-638:30
ID("createExpression"), 638:31-638:47
LPAREN, 638:47-638:48
DOMSTRING, 638:48-638:57
ID("expression"), 638:58-638:68
COMMA, 638:68-638:69
OPTIONAL, 638:70-638:78
ID("XPathNSResolver"), 638:79-638:94
QUESTION, 638:94-638:95
ID("resolver"), 638:96-638:104
EQUAL, 638:105-638:106
NULL, 638:107-638:111
RPAREN, 638:111-638:112
SEMI, 638:112-638:113
ID("Node"), 639:3-639:7
ID("createNSResolver"), 639:8-639:24
LPAREN, 639:24-639:25
ID("Node"), 639:25-639:29
ID("nodeResolver"), 639:30-639:42
RPAREN, 639:42-639:43
SEMI, 639:43-639:44
ID("XPathResult"), 641:3-641:14
ID("evaluate"), 641:15-641:23
LPAREN, 641:23-641:24
DOMSTRING, 641:24-641:33
ID("expression"), 641:34-641:44
COMMA, 641:44-641:45
ID("Node"), 641:46-641:50
ID("contextNode"), 641:51-641:62
COMMA, 641:62-641:63
OPTIONAL, 641:64-641:72
ID("XPathNSResolver"), 641:73-641:88
QUESTION, 641:88-641:89
ID("resolver"), 641:90-641:98
EQUAL, 641:99-641:100
NULL, 641:101-641:105
COMMA, 641:105-641:106
OPTIONAL, 641:107-641:115
UNSIGNED, 641:116-641:124
SHORT, 641:125-641:130
ID("type"), 641:131-641:135
EQUAL, 641:136-641:137
INT("0"), 641:138-641:139
COMMA, 641:139-641:140
OPTIONAL, 641:141-641:149
ID("XPathResult"), 641:150-641:161
QUESTION, 641:161-641:162
ID("result"), 641:163-641:169
EQUAL, 641:170-641:171
NULL, 641:172-641:176
RPAREN, 641:176-641:177
SEMI, 641:177-641:178
RBRACE, 642:1-642:2
SEMI, 642:2-642:3
ID("Document"), 643:1-643:9
INCLUDES, 643:10-643:18
ID("XPathEvaluatorBase"), 643:19-643:37
SEMI, 643:37-643:38
LBRACKET, 645:1-645:2
ID("Exposed"), 645:2-645:9
EQUAL, 645:9-645:10
ID("Window"), 645:10-645:16
RBRACKET, 645:16-645:17
INTERFACE, 646:1-646:10
ID("XPathEvaluator"), 646:11-646:25
LBRACE, 646:26-646:27
CONSTRUCTOR, 647:3-647:14
LPAREN, 647:14-647:15
RPAREN, 647:15-647:16
SEMI, 647:16-647:17
RBRACE, 648:1-648:2
SEMI, 648:2-648:3
ID("XPathEvaluator"), 650:1-650:15
INCLUDES, 650:16-650:24
ID("XPathEvaluatorBase"), 650:25-650:43
SEMI, 650:43-650:44
LBRACKET, 652:1-652:2
ID("Exposed"), 652:2-652:9
EQUAL, 652:9-652:10
ID("Window"), 652:10-652:16
RBRACKET, 652:16-652:17
INTERFACE, 653:1-653:10
ID("XSLTProcessor"), 653:11-653:24
LBRACE, 653:25-653:26
CONSTRUCTOR, 654:3-654:14
LPAREN, 654:14-654:15
RPAREN, 654:15-654:16
SEMI, 654:16-654:17
UNDEFINED, 655:3-655:12
ID("importStylesheet"), 655:13-655:29
LPAREN, 655:29-655:30
ID("Node"), 655:30-655:34
ID("style"), 655:35-655:40
RPAREN, 655:40-655:41
SEMI, 655:41-655:42
LBRACKET, 656:3-656:4
ID("CEReactions"), 656:4-656:15
RBRACKET, 656:15-656:16
ID("DocumentFragment"), 656:17-656:33
ID("transformToFragment"), 656:34-656:53
LPAREN, 656:53-656:54
ID("Node"), 656:54-656:58
ID("source"), 656:59-656:65
COMMA, 656:65-656:66
ID("Document"), 656:67-656:75
ID("output"), 656:76-656:82
RPAREN, 656:82-656:83
SEMI, 656:83-656:84
LBRACKET, 657:3-657:4
ID("CEReactions"), 657:4-657:15
RBRACKET, 657:15-657:16
ID("Document"), 657:17-657:25
ID("transformToDocument"), 657:26-657:45
LPAREN, 657:45-657:46
ID("Node"), 657:46-657:50
ID("source"), 657:51-657:57
RPAREN, 657:57-657:58
SEMI, 657:58-657:59
UNDEFINED, 658:3-658:12
ID("setParameter"), 658:13-658:25
LPAREN, 658:25-658:26
LBRACKET, 658:26-658:27
ID("LegacyNullToEmptyString"), 658:27-658:50
RBRACKET, 658:50-658:51
DOMSTRING, 658:52-658:61
ID("namespaceURI"), 658:62-658:74
COMMA, 658:74-658:75
DOMSTRING, 658:76-658:85
ID("localName"), 658:86-658:95
COMMA, 658:95-658:96
ANY, 658:97-658:100
ID("value"), 658:101-658:106
RPAREN, 658:106-658:107
SEMI, 658:107-658:108
ANY, 659:3-659:6
ID("getParameter"), 659:7-659:19
LPAREN, 659:19-659:20
LBRACKET, 659:20-659:21
ID("LegacyNullToEmptyString"), 659:21-659:44
RBRACKET, 659:44-659:45
DOMSTRING, 659:46-659:55
ID("namespaceURI"), 659:56-659:68
COMMA, 659:68-659:69
DOMSTRING, 659:70-659:79
ID("localName"), 659:80-659:89
RPAREN, 659:89-659:90
SEMI, 659:90-659:91
UNDEFINED, 660:3-660:12
ID("removeParameter"), 660:13-660:28
LPAREN, 660:28-660:29
LBRACKET, 660:29-660:30
ID("LegacyNullToEmptyString"), 660:30-660:53
RBRACKET, 660:53-660:54
DOMSTRING, 660:55-660:64
ID("namespaceURI"), 660:65-660:77
COMMA, 660:77-660:78
DOMSTRING, 660:79-660:88
ID("localName"), 660:89-660:98
RPAREN, 660:98-660:99
SEMI, 660:99-660:100
UNDEFINED, 661:3-661:12
ID("clearParameters"), 661:13-661:28
LPAREN, 661:28-661:29
RPAREN, 661:29-661:30
SEMI, 661:30-661:31
UNDEFINED, 662:3-662:12
ID("reset"), 662:13-662:18
LPAREN, 662:18-662:19
RPAREN, 662:19-662:20
SEMI, 662:20-662:21
RBRACE, 663:1-663:2
SEMI, 663:2-663:3
EOF, 663:3-663:3
---------------------------------------------
[
  Interface(
    {
      name: "Event",
      partial: false,
      members: [
        Constructor(
          {
            arguments: [
              {
                name: "type",
                idl_type: {attrs: [], ty: String(DOMString())},
                optional: false,
                variadic: true,
                default: None,
                attrs: [],
              },
              {
                name: "eventInitDict",
                idl_type: {attrs: [], ty: Id("EventInit")},
                optional: true,
                variadic: false,
                default: Some(Dictionary()),
                attrs: [],
              }
            ],
            attrs: [],
          },
        ),
        Attribute(
          {
            name: "type",
            special: Regular(),
            readonly: true,
            idl_type: {attrs: [], ty: String(DOMString())},
            attrs: [],
          },
        ),
        Attribute(
          {
            name: "target",
            special: Regular(),
            readonly: true,
            idl_type: {attrs: [], ty: Nullable(Id("EventTarget"))},
            attrs: [],
          },
        ),
        Attribute(
          {
            name: "srcElement",
            special: Regular(),
            readonly: true,
            idl_type: {attrs: [], ty: Nullable(Id("EventTarget"))},
            attrs: [],
          },
        ),
        Attribute(
          {
            name: "currentTarget",
            special: Regular(),
            readonly: true,
            idl_type: {attrs: [], ty: Nullable(Id("EventTarget"))},
            attrs: [],
          },
        ),
        Operation(
          {
            name: Some("composedPath"),
            idl_type: Some(Sequence({attrs: [], ty: Id("EventTarget")})),
            arguments: [],
            special: Regular(),
            attrs: [],
          },
        ),
        Const(
          {
            name: "NONE",
            idl_type: Integer(Unsigned(Short())),
            value: Number("0"),
            attrs: [],
          },
        ),
        Const(
          {
            name: "CAPTURING_PHASE",
            idl_type: Integer(Unsigned(Short())),
            value: Number("1"),
            attrs: [],
          },
        ),
        Const(
          {
            name: "AT_TARGET",
            idl_type: Integer(Unsigned(Short())),
            value: Number("2"),
            attrs: [],
          },
        ),
        Const(
          {
            name: "BUBBLING_PHASE",
            idl_type: Integer(Unsigned(Short())),
            value: Number("3"),
            attrs: [],
          },
        ),
        Attribute(
          {
            name: "eventPhase",
            special: Regular(),
            readonly: true,
            idl_type: {attrs: [], ty: Integer(Unsigned(Short()))},
            attrs: [],
          },
        ),
        Operation(
          {
            name: Some("stopPropagation"),
            idl_type: Some(Undefined()),
            arguments: [],
            special: Regular(),
            attrs: [],
          },
        ),
        Attribute(
          {
            name: "cancelBubble",
            special: Regular(),
            readonly: false,
            idl_type: {attrs: [], ty: Boolean()},
            attrs: [],
          },
        ),
        Operation(
          {
            name: Some("stopImmediatePropagation"),
            idl_type: Some(Undefined()),
            arguments: [],
            special: Regular(),
            attrs: [],
          },
        ),
        Attribute(
          {
            name: "bubbles",
            special: Regular(),
            readonly: true,
            idl_type: {attrs: [], ty: Boolean()},
            attrs: [],
          },
        ),
        Attribute(
          {
            name: "cancelable",
            special: Regular(),
            readonly: true,
            idl_type: {attrs: [], ty: Boolean()},
            attrs: [],
          },
        ),
        Attribute(
          {
            name: "returnValue",
            special: Regular(),
            readonly: false,
            idl_type: {attrs: [], ty: Boolean()},
            attrs: [],
          },
        ),
        Operation(
          {
            name: Some("preventDefault"),
            idl_type: Some(Undefined()),
            arguments: [],
            special: Regular(),
            attrs: [],
          },
        ),
        Attribute(
          {
            name: "defaultPrevented",
            special: Regular(),
            readonly: true,
            idl_type: {attrs: [], ty: Boolean()},
            attrs: [],
          },
        ),
        Attribute(
          {
            name: "composed",
            special: Regular(),
            readonly: true,
            idl_type: {attrs: [], ty: Boolean()},
            attrs: [],
          },
        ),
        Attribute(
          {
            name: "isTrusted",
            special: Regular(),
            readonly: true,
            idl_type: {attrs: [], ty: Boolean()},
            attrs: [{name: "LegacyUnforgeable", rhs: NoArgs()}],
          },
        ),
        Attribute(
          {
            name: "timeStamp",
            special: Regular(),
            readonly: true,
            idl_type: {attrs: [], ty: Id("DOMHighResTimeStamp")},
            attrs: [],
          },
        ),
        Operation(
          {
            name: Some("initEvent"),
            idl_type: Some(Undefined()),
            arguments: [
              {
                name: "type",
                idl_type: {attrs: [], ty: String(DOMString())},
                optional: false,
                variadic: true,
                default: None,
                attrs: [],
              },
              {
                name: "bubbles",
                idl_type: {attrs: [], ty: Boolean()},
                optional: true,
                variadic: false,
                default: Some(Boolean(false)),
                attrs: [],
              },
              {
                name: "cancelable",
                idl_type: {attrs: [], ty: Boolean()},
                optional: true,
                variadic: false,
                default: Some(Boolean(false)),
                attrs: [],
              }
            ],
            special: Regular(),
            attrs: [],
          },
        )
      ],
      inheritance: None,
      attrs: [{name: "Exposed", rhs: WildCard()}],
    },
  ),
  Dictionary(
    {
      name: "EventInit",
      partial: false,
      members: [
        {
          name: "bubbles",
          required: false,
          idl_type: {attrs: [], ty: Boolean()},
          attrs: [],
          default: Some(Boolean(false)),
        },
        {
          name: "cancelable",
          required: false,
          idl_type: {attrs: [], ty: Boolean()},
          attrs: [],
          default: Some(Boolean(false)),
        },
        {
          name: "composed",
          required: false,
          idl_type: {attrs: [], ty: Boolean()},
          attrs: [],
          default: Some(Boolean(false)),
        }
      ],
      inheritance: None,
      attrs: [],
    },
  ),
  Interface(
    {
      name: "Window",
      partial: true,
      members: [
        Attribute(
          {
            name: "event",
            special: Regular(),
            readonly: true,
            idl_type: {
              attrs: [],
              ty: Union(
                [{attrs: [], ty: Id("Event")}, {attrs: [], ty: Undefined()}],
              ),
            },
            attrs: [{name: "Replaceable", rhs: NoArgs()}],
          },
        )
      ],
      inheritance: None,
      attrs: [],
    },
  ),
  Interface(
    {
      name: "CustomEvent",
      partial: false,
      members: [
        Constructor(
          {
            arguments: [
              {
                name: "type",
                idl_type: {attrs: [], ty: String(DOMString())},
                optional: false,
                variadic: true,
                default: None,
                attrs: [],
              },
              {
                name: "eventInitDict",
                idl_type: {attrs: [], ty: Id("CustomEventInit")},
                optional: true,
                variadic: false,
                default: Some(Dictionary()),
                attrs: [],
              }
            ],
            attrs: [],
          },
        ),
        Attribute(
          {
            name: "detail",
            special: Regular(),
            readonly: true,
            idl_type: {attrs: [], ty: Any()},
            attrs: [],
          },
        ),
        Operation(
          {
            name: Some("initCustomEvent"),
            idl_type: Some(Undefined()),
            arguments: [
              {
                name: "type",
                idl_type: {attrs: [], ty: String(DOMString())},
                optional: false,
                variadic: true,
                default: None,
                attrs: [],
              },
              {
                name: "bubbles",
                idl_type: {attrs: [], ty: Boolean()},
                optional: true,
                variadic: false,
                default: Some(Boolean(false)),
                attrs: [],
              },
              {
                name: "cancelable",
                idl_type: {attrs: [], ty: Boolean()},
                optional: true,
                variadic: false,
                default: Some(Boolean(false)),
                attrs: [],
              },
              {
                name: "detail",
                idl_type: {attrs: [], ty: Any()},
                optional: true,
                variadic: false,
                default: Some(Null()),
                attrs: [],
              }
            ],
            special: Regular(),
            attrs: [],
          },
        )
      ],
      inheritance: Some("Event"),
      attrs: [{name: "Exposed", rhs: WildCard()}],
    },
  ),
  Dictionary(
    {
      name: "CustomEventInit",
      partial: false,
      members: [
        {
          name: "detail",
          required: false,
          idl_type: {attrs: [], ty: Any()},
          attrs: [],
          default: Some(Null()),
        }
      ],
      inheritance: Some("EventInit"),
      attrs: [],
    },
  ),
  Interface(
    {
      name: "EventTarget",
      partial: false,
      members: [
        Constructor({arguments: [], attrs: []}),
        Operation(
          {
            name: Some("addEventListener"),
            idl_type: Some(Undefined()),
            arguments: [
              {
                name: "type",
                idl_type: {attrs: [], ty: String(DOMString())},
                optional: false,
                variadic: true,
                default: None,
                attrs: [],
              },
              {
                name: "callback",
                idl_type: {attrs: [], ty: Nullable(Id("EventListener"))},
                optional: false,
                variadic: true,
                default: None,
                attrs: [],
              },
              {
                name: "options",
                idl_type: {
                  attrs: [],
                  ty: Union(
                    [
                      {attrs: [], ty: Id("AddEventListenerOptions")},
                      {attrs: [], ty: Boolean()}
                    ],
                  ),
                },
                optional: true,
                variadic: false,
                default: Some(Dictionary()),
                attrs: [],
              }
            ],
            special: Regular(),
            attrs: [],
          },
        ),
        Operation(
          {
            name: Some("removeEventListener"),
            idl_type: Some(Undefined()),
            arguments: [
              {
                name: "type",
                idl_type: {attrs: [], ty: String(DOMString())},
                optional: false,
                variadic: true,
                default: None,
                attrs: [],
              },
              {
                name: "callback",
                idl_type: {attrs: [], ty: Nullable(Id("EventListener"))},
                optional: false,
                variadic: true,
                default: None,
                attrs: [],
              },
              {
                name: "options",
                idl_type: {
                  attrs: [],
                  ty: Union(
                    [
                      {attrs: [], ty: Id("EventListenerOptions")},
                      {attrs: [], ty: Boolean()}
                    ],
                  ),
                },
                optional: true,
                variadic: false,
                default: Some(Dictionary()),
                attrs: [],
              }
            ],
            special: Regular(),
            attrs: [],
          },
        ),
        Operation(
          {
            name: Some("dispatchEvent"),
            idl_type: Some(Boolean()),
            arguments: [
              {
                name: "event",
                idl_type: {attrs: [], ty: Id("Event")},
                optional: false,
                variadic: true,
                default: None,
                attrs: [],
              }
            ],
            special: Regular(),
            attrs: [],
          },
        )
      ],
      inheritance: None,
      attrs: [{name: "Exposed", rhs: WildCard()}],
    },
  ),
  Interface(
    {
      name: "EventListener",
      partial: false,
      members: [
        Operation(
          {
            name: Some("handleEvent"),
            idl_type: Some(Undefined()),
            arguments: [
              {
                name: "event",
                idl_type: {attrs: [], ty: Id("Event")},
                optional: false,
                variadic: true,
                default: None,
                attrs: [],
              }
            ],
            special: Regular(),
            attrs: [],
          },
        )
      ],
      inheritance: None,
      attrs: [],
    },
  ),
  Dictionary(
    {
      name: "EventListenerOptions",
      partial: false,
      members: [
        {
          name: "capture",
          required: false,
          idl_type: {attrs: [], ty: Boolean()},
          attrs: [],
          default: Some(Boolean(false)),
        }
      ],
      inheritance: None,
      attrs: [],
    },
  ),
  Dictionary(
    {
      name: "AddEventListenerOptions",
      partial: false,
      members: [
        {
          name: "passive",
          required: false,
          idl_type: {attrs: [], ty: Boolean()},
          attrs: [],
          default: None,
        },
        {
          name: "once",
          required: false,
          idl_type: {attrs: [], ty: Boolean()},
          attrs: [],
          default: Some(Boolean(false)),
        },
        {
          name: "signal",
          required: false,
          idl_type: {attrs: [], ty: Id("AbortSignal")},
          attrs: [],
          default: None,
        }
      ],
      inheritance: Some("EventListenerOptions"),
      attrs: [],
    },
  ),
  Interface(
    {
      name: "AbortController",
      partial: false,
      members: [
        Constructor({arguments: [], attrs: []}),
        Attribute(
          {
            name: "signal",
            special: Regular(),
            readonly: true,
            idl_type: {attrs: [], ty: Id("AbortSignal")},
            attrs: [{name: "SameObject", rhs: NoArgs()}],
          },
        ),
        Operation(
          {
            name: Some("abort"),
            idl_type: Some(Undefined()),
            arguments: [
              {
                name: "reason",
                idl_type: {attrs: [], ty: Any()},
                optional: true,
                variadic: false,
                default: None,
                attrs: [],
              }
            ],
            special: Regular(),
            attrs: [],
          },
        )
      ],
      inheritance: None,
      attrs: [{name: "Exposed", rhs: WildCard()}],
    },
  ),
  Interface(
    {
      name: "AbortSignal",
      partial: false,
      members: [
        Operation(
          {
            name: Some("abort"),
            idl_type: Some(Id("AbortSignal")),
            arguments: [
              {
                name: "reason",
                idl_type: {attrs: [], ty: Any()},
                optional: true,
                variadic: false,
                default: None,
                attrs: [],
              }
            ],
            special: Static(),
            attrs: [{name: "NewObject", rhs: NoArgs()}],
          },
        ),
        Operation(
          {
            name: Some("timeout"),
            idl_type: Some(Id("AbortSignal")),
            arguments: [
              {
                name: "milliseconds",
                idl_type: {attrs: [], ty: Integer(Unsigned(LongLong()))},
                optional: false,
                variadic: true,
                default: None,
                attrs: [{name: "EnforceRange", rhs: NoArgs()}],
              }
            ],
            special: Static(),
            attrs: [
              {name: "Exposed", rhs: IdentList(["Window", "Worker"])},
              {name: "NewObject", rhs: NoArgs()}
            ],
          },
        ),
        Operation(
          {
            name: Some("_any"),
            idl_type: Some(Id("AbortSignal")),
            arguments: [
              {
                name: "signals",
                idl_type: {
                  attrs: [],
                  ty: Sequence({attrs: [], ty: Id("AbortSignal")}),
                },
                optional: false,
                variadic: true,
                default: None,
                attrs: [],
              }
            ],
            special: Static(),
            attrs: [{name: "NewObject", rhs: NoArgs()}],
          },
        ),
        Attribute(
          {
            name: "aborted",
            special: Regular(),
            readonly: true,
            idl_type: {attrs: [], ty: Boolean()},
            attrs: [],
          },
        ),
        Attribute(
          {
            name: "reason",
            special: Regular(),
            readonly: true,
            idl_type: {attrs: [], ty: Any()},
            attrs: [],
          },
        ),
        Operation(
          {
            name: Some("throwIfAborted"),
            idl_type: Some(Undefined()),
            arguments: [],
            special: Regular(),
            attrs: [],
          },
        ),
        Attribute(
          {
            name: "onabort",
            special: Regular(),
            readonly: false,
            idl_type: {attrs: [], ty: Id("EventHandler")},
            attrs: [],
          },
        )
      ],
      inheritance: Some("EventTarget"),
      attrs: [{name: "Exposed", rhs: WildCard()}],
    },
  ),
  InterfaceMixin(
    {
      name: "NonElementParentNode",
      partial: false,
      members: [
        Operation(
          {
            name: Some("getElementById"),
            idl_type: Some(Nullable(Id("Element"))),
            arguments: [
              {
                name: "elementId",
                idl_type: {attrs: [], ty: String(DOMString())},
                optional: false,
                variadic: true,
                default: None,
                attrs: [],
              }
            ],
            special: Regular(),
            attrs: [],
          },
        )
      ],
      attrs: [],
    },
  ),
  Includes({target: "Document", includes: "NonElementParentNode", attrs: []}),
  Includes(
    {target: "DocumentFragment", includes: "NonElementParentNode", attrs: []},
  ),
  InterfaceMixin(
    {
      name: "DocumentOrShadowRoot",
      partial: false,
      members: [
        Attribute(
          {
            name: "customElementRegistry",
            special: Regular(),
            readonly: true,
            idl_type: {attrs: [], ty: Nullable(Id("CustomElementRegistry"))},
            attrs: [],
          },
        )
      ],
      attrs: [],
    },
  ),
  Includes({target: "Document", includes: "DocumentOrShadowRoot", attrs: []}),
  Includes({target: "ShadowRoot", includes: "DocumentOrShadowRoot", attrs: []}),
  InterfaceMixin(
    {
      name: "ParentNode",
      partial: false,
      members: [
        Attribute(
          {
            name: "children",
            special: Regular(),
            readonly: true,
            idl_type: {attrs: [], ty: Id("HTMLCollection")},
            attrs: [{name: "SameObject", rhs: NoArgs()}],
          },
        ),
        Attribute(
          {
            name: "firstElementChild",
            special: Regular(),
            readonly: true,
            idl_type: {attrs: [], ty: Nullable(Id("Element"))},
            attrs: [],
          },
        ),
        Attribute(
          {
            name: "lastElementChild",
            special: Regular(),
            readonly: true,
            idl_type: {attrs: [], ty: Nullable(Id("Element"))},
            attrs: [],
          },
        ),
        Attribute(
          {
            name: "childElementCount",
            special: Regular(),
            readonly: true,
            idl_type: {attrs: [], ty: Integer(Unsigned(Long()))},
            attrs: [],
          },
        ),
        Operation(
          {
            name: Some("prepend"),
            idl_type: Some(Undefined()),
            arguments: [
              {
                name: "nodes",
                idl_type: {
                  attrs: [],
                  ty: Union(
                    [
                      {attrs: [], ty: Id("Node")},
                      {attrs: [], ty: String(DOMString())}
                    ],
                  ),
                },
                optional: false,
                variadic: true,
                default: None,
                attrs: [],
              }
            ],
            special: Regular(),
            attrs: [
              {name: "CEReactions", rhs: NoArgs()},
              {name: "Unscopable", rhs: NoArgs()}
            ],
          },
        ),
        Operation(
          {
            name: Some("append"),
            idl_type: Some(Undefined()),
            arguments: [
              {
                name: "nodes",
                idl_type: {
                  attrs: [],
                  ty: Union(
                    [
                      {attrs: [], ty: Id("Node")},
                      {attrs: [], ty: String(DOMString())}
                    ],
                  ),
                },
                optional: false,
                variadic: true,
                default: None,
                attrs: [],
              }
            ],
            special: Regular(),
            attrs: [
              {name: "CEReactions", rhs: NoArgs()},
              {name: "Unscopable", rhs: NoArgs()}
            ],
          },
        ),
        Operation(
          {
            name: Some("replaceChildren"),
            idl_type: Some(Undefined()),
            arguments: [
              {
                name: "nodes",
                idl_type: {
                  attrs: [],
                  ty: Union(
                    [
                      {attrs: [], ty: Id("Node")},
                      {attrs: [], ty: String(DOMString())}
                    ],
                  ),
                },
                optional: false,
                variadic: true,
                default: None,
                attrs: [],
              }
            ],
            special: Regular(),
            attrs: [
              {name: "CEReactions", rhs: NoArgs()},
              {name: "Unscopable", rhs: NoArgs()}
            ],
          },
        ),
        Operation(
          {
            name: Some("moveBefore"),
            idl_type: Some(Undefined()),
            arguments: [
              {
                name: "node",
                idl_type: {attrs: [], ty: Id("Node")},
                optional: false,
                variadic: true,
                default: None,
                attrs: [],
              },
              {
                name: "child",
                idl_type: {attrs: [], ty: Nullable(Id("Node"))},
                optional: false,
                variadic: true,
                default: None,
                attrs: [],
              }
            ],
            special: Regular(),
            attrs: [{name: "CEReactions", rhs: NoArgs()}],
          },
        ),
        Operation(
          {
            name: Some("querySelector"),
            idl_type: Some(Nullable(Id("Element"))),
            arguments: [
              {
                name: "selectors",
                idl_type: {attrs: [], ty: String(DOMString())},
                optional: false,
                variadic: true,
                default: None,
                attrs: [],
              }
            ],
            special: Regular(),
            attrs: [],
          },
        ),
        Operation(
          {
            name: Some("querySelectorAll"),
            idl_type: Some(Id("NodeList")),
            arguments: [
              {
                name: "selectors",
                idl_type: {attrs: [], ty: String(DOMString())},
                optional: false,
                variadic: true,
                default: None,
                attrs: [],
              }
            ],
            special: Regular(),
            attrs: [{name: "NewObject", rhs: NoArgs()}],
          },
        )
      ],
      attrs: [],
    },
  ),
  Includes({target: "Document", includes: "ParentNode", attrs: []}),
  Includes({target: "DocumentFragment", includes: "ParentNode", attrs: []}),
  Includes({target: "Element", includes: "ParentNode", attrs: []}),
  InterfaceMixin(
    {
      name: "NonDocumentTypeChildNode",
      partial: false,
      members: [
        Attribute(
          {
            name: "previousElementSibling",
            special: Regular(),
            readonly: true,
            idl_type: {attrs: [], ty: Nullable(Id("Element"))},
            attrs: [],
          },
        ),
        Attribute(
          {
            name: "nextElementSibling",
            special: Regular(),
            readonly: true,
            idl_type: {attrs: [], ty: Nullable(Id("Element"))},
            attrs: [],
          },
        )
      ],
      attrs: [],
    },
  ),
  Includes({target: "Element", includes: "NonDocumentTypeChildNode", attrs: []}),
  Includes(
    {target: "CharacterData", includes: "NonDocumentTypeChildNode", attrs: []},
  ),
  InterfaceMixin(
    {
      name: "ChildNode",
      partial: false,
      members: [
        Operation(
          {
            name: Some("before"),
            idl_type: Some(Undefined()),
            arguments: [
              {
                name: "nodes",
                idl_type: {
                  attrs: [],
                  ty: Union(
                    [
                      {attrs: [], ty: Id("Node")},
                      {attrs: [], ty: String(DOMString())}
                    ],
                  ),
                },
                optional: false,
                variadic: true,
                default: None,
                attrs: [],
              }
            ],
            special: Regular(),
            attrs: [
              {name: "CEReactions", rhs: NoArgs()},
              {name: "Unscopable", rhs: NoArgs()}
            ],
          },
        ),
        Operation(
          {
            name: Some("after"),
            idl_type: Some(Undefined()),
            arguments: [
              {
                name: "nodes",
                idl_type: {
                  attrs: [],
                  ty: Union(
                    [
                      {attrs: [], ty: Id("Node")},
                      {attrs: [], ty: String(DOMString())}
                    ],
                  ),
                },
                optional: false,
                variadic: true,
                default: None,
                attrs: [],
              }
            ],
            special: Regular(),
            attrs: [
              {name: "CEReactions", rhs: NoArgs()},
              {name: "Unscopable", rhs: NoArgs()}
            ],
          },
        ),
        Operation(
          {
            name: Some("replaceWith"),
            idl_type: Some(Undefined()),
            arguments: [
              {
                name: "nodes",
                idl_type: {
                  attrs: [],
                  ty: Union(
                    [
                      {attrs: [], ty: Id("Node")},
                      {attrs: [], ty: String(DOMString())}
                    ],
                  ),
                },
                optional: false,
                variadic: true,
                default: None,
                attrs: [],
              }
            ],
            special: Regular(),
            attrs: [
              {name: "CEReactions", rhs: NoArgs()},
              {name: "Unscopable", rhs: NoArgs()}
            ],
          },
        ),
        Operation(
          {
            name: Some("remove"),
            idl_type: Some(Undefined()),
            arguments: [],
            special: Regular(),
            attrs: [
              {name: "CEReactions", rhs: NoArgs()},
              {name: "Unscopable", rhs: NoArgs()}
            ],
          },
        )
      ],
      attrs: [],
    },
  ),
  Includes({target: "DocumentType", includes: "ChildNode", attrs: []}),
  Includes({target: "Element", includes: "ChildNode", attrs: []}),
  Includes({target: "CharacterData", includes: "ChildNode", attrs: []}),
  InterfaceMixin(
    {
      name: "Slottable",
      partial: false,
      members: [
        Attribute(
          {
            name: "assignedSlot",
            special: Regular(),
            readonly: true,
            idl_type: {attrs: [], ty: Nullable(Id("HTMLSlotElement"))},
            attrs: [],
          },
        )
      ],
      attrs: [],
    },
  ),
  Includes({target: "Element", includes: "Slottable", attrs: []}),
  Includes({target: "Text", includes: "Slottable", attrs: []}),
  Interface(
    {
      name: "NodeList",
      partial: false,
      members: [
        Operation(
          {
            name: Some("item"),
            idl_type: Some(Nullable(Id("Node"))),
            arguments: [
              {
                name: "index",
                idl_type: {attrs: [], ty: Integer(Unsigned(Long()))},
                optional: false,
                variadic: true,
                default: None,
                attrs: [],
              }
            ],
            special: Getter(),
            attrs: [],
          },
        ),
        Attribute(
          {
            name: "length",
            special: Regular(),
            readonly: true,
            idl_type: {attrs: [], ty: Integer(Unsigned(Long()))},
            attrs: [],
          },
        ),
        Iterable(
          {
            idl_type: {attrs: [], ty: Id("Node")},
            opt_type: None,
            async: false,
            attrs: [],
          },
        )
      ],
      inheritance: None,
      attrs: [{name: "Exposed", rhs: Ident("Window")}],
    },
  ),
  Interface(
    {
      name: "HTMLCollection",
      partial: false,
      members: [
        Attribute(
          {
            name: "length",
            special: Regular(),
            readonly: true,
            idl_type: {attrs: [], ty: Integer(Unsigned(Long()))},
            attrs: [],
          },
        ),
        Operation(
          {
            name: Some("item"),
            idl_type: Some(Nullable(Id("Element"))),
            arguments: [
              {
                name: "index",
                idl_type: {attrs: [], ty: Integer(Unsigned(Long()))},
                optional: false,
                variadic: true,
                default: None,
                attrs: [],
              }
            ],
            special: Getter(),
            attrs: [],
          },
        ),
        Operation(
          {
            name: Some("namedItem"),
            idl_type: Some(Nullable(Id("Element"))),
            arguments: [
              {
                name: "name",
                idl_type: {attrs: [], ty: String(DOMString())},
                optional: false,
                variadic: true,
                default: None,
                attrs: [],
              }
            ],
            special: Getter(),
            attrs: [],
          },
        )
      ],
      inheritance: None,
      attrs: [
        {name: "Exposed", rhs: Ident("Window")},
        {name: "LegacyUnenumerableNamedProperties", rhs: NoArgs()}
      ],
    },
  ),
  Interface(
    {
      name: "MutationObserver",
      partial: false,
      members: [
        Constructor(
          {
            arguments: [
              {
                name: "callback",
                idl_type: {attrs: [], ty: Id("MutationCallback")},
                optional: false,
                variadic: true,
                default: None,
                attrs: [],
              }
            ],
            attrs: [],
          },
        ),
        Operation(
          {
            name: Some("observe"),
            idl_type: Some(Undefined()),
            arguments: [
              {
                name: "target",
                idl_type: {attrs: [], ty: Id("Node")},
                optional: false,
                variadic: true,
                default: None,
                attrs: [],
              },
              {
                name: "options",
                idl_type: {attrs: [], ty: Id("MutationObserverInit")},
                optional: true,
                variadic: false,
                default: Some(Dictionary()),
                attrs: [],
              }
            ],
            special: Regular(),
            attrs: [],
          },
        ),
        Operation(
          {
            name: Some("disconnect"),
            idl_type: Some(Undefined()),
            arguments: [],
            special: Regular(),
            attrs: [],
          },
        ),
        Operation(
          {
            name: Some("takeRecords"),
            idl_type: Some(Sequence({attrs: [], ty: Id("MutationRecord")})),
            arguments: [],
            special: Regular(),
            attrs: [],
          },
        )
      ],
      inheritance: None,
      attrs: [{name: "Exposed", rhs: Ident("Window")}],
    },
  ),
  Callback(
    {
      name: "MutationCallback",
      idl_type: Undefined(),
      arguments: [
        {
          name: "mutations",
          idl_type: {
            attrs: [],
            ty: Sequence({attrs: [], ty: Id("MutationRecord")}),
          },
          optional: false,
          variadic: true,
          default: None,
          attrs: [],
        },
        {
          name: "observer",
          idl_type: {attrs: [], ty: Id("MutationObserver")},
          optional: false,
          variadic: true,
          default: None,
          attrs: [],
        }
      ],
      attrs: [],
    },
  ),
  Dictionary(
    {
      name: "MutationObserverInit",
      partial: false,
      members: [
        {
          name: "childList",
          required: false,
          idl_type: {attrs: [], ty: Boolean()},
          attrs: [],
          default: Some(Boolean(false)),
        },
        {
          name: "attributes",
          required: false,
          idl_type: {attrs: [], ty: Boolean()},
          attrs: [],
          default: None,
        },
        {
          name: "characterData",
          required: false,
          idl_type: {attrs: [], ty: Boolean()},
          attrs: [],
          default: None,
        },
        {
          name: "subtree",
          required: false,
          idl_type: {attrs: [], ty: Boolean()},
          attrs: [],
          default: Some(Boolean(false)),
        },
        {
          name: "attributeOldValue",
          required: false,
          idl_type: {attrs: [], ty: Boolean()},
          attrs: [],
          default: None,
        },
        {
          name: "characterDataOldValue",
          required: false,
          idl_type: {attrs: [], ty: Boolean()},
          attrs: [],
          default: None,
        },
        {
          name: "attributeFilter",
          required: false,
          idl_type: {
            attrs: [],
            ty: Sequence({attrs: [], ty: String(DOMString())}),
          },
          attrs: [],
          default: None,
        }
      ],
      inheritance: None,
      attrs: [],
    },
  ),
  Interface(
    {
      name: "MutationRecord",
      partial: false,
      members: [
        Attribute(
          {
            name: "type",
            special: Regular(),
            readonly: true,
            idl_type: {attrs: [], ty: String(DOMString())},
            attrs: [],
          },
        ),
        Attribute(
          {
            name: "target",
            special: Regular(),
            readonly: true,
            idl_type: {attrs: [], ty: Id("Node")},
            attrs: [{name: "SameObject", rhs: NoArgs()}],
          },
        ),
        Attribute(
          {
            name: "addedNodes",
            special: Regular(),
            readonly: true,
            idl_type: {attrs: [], ty: Id("NodeList")},
            attrs: [{name: "SameObject", rhs: NoArgs()}],
          },
        ),
        Attribute(
          {
            name: "removedNodes",
            special: Regular(),
            readonly: true,
            idl_type: {attrs: [], ty: Id("NodeList")},
            attrs: [{name: "SameObject", rhs: NoArgs()}],
          },
        ),
        Attribute(
          {
            name: "previousSibling",
            special: Regular(),
            readonly: true,
            idl_type: {attrs: [], ty: Nullable(Id("Node"))},
            attrs: [],
          },
        ),
        Attribute(
          {
            name: "nextSibling",
            special: Regular(),
            readonly: true,
            idl_type: {attrs: [], ty: Nullable(Id("Node"))},
            attrs: [],
          },
        ),
        Attribute(
          {
            name: "attributeName",
            special: Regular(),
            readonly: true,
            idl_type: {attrs: [], ty: Nullable(String(DOMString()))},
            attrs: [],
          },
        ),
        Attribute(
          {
            name: "attributeNamespace",
            special: Regular(),
            readonly: true,
            idl_type: {attrs: [], ty: Nullable(String(DOMString()))},
            attrs: [],
          },
        ),
        Attribute(
          {
            name: "oldValue",
            special: Regular(),
            readonly: true,
            idl_type: {attrs: [], ty: Nullable(String(DOMString()))},
            attrs: [],
          },
        )
      ],
      inheritance: None,
      attrs: [{name: "Exposed", rhs: Ident("Window")}],
    },
  ),
  Interface(
    {
      name: "Node",
      partial: false,
      members: [
        Const(
          {
            name: "ELEMENT_NODE",
            idl_type: Integer(Unsigned(Short())),
            value: Number("1"),
            attrs: [],
          },
        ),
        Const(
          {
            name: "ATTRIBUTE_NODE",
            idl_type: Integer(Unsigned(Short())),
            value: Number("2"),
            attrs: [],
          },
        ),
        Const(
          {
            name: "TEXT_NODE",
            idl_type: Integer(Unsigned(Short())),
            value: Number("3"),
            attrs: [],
          },
        ),
        Const(
          {
            name: "CDATA_SECTION_NODE",
            idl_type: Integer(Unsigned(Short())),
            value: Number("4"),
            attrs: [],
          },
        ),
        Const(
          {
            name: "ENTITY_REFERENCE_NODE",
            idl_type: Integer(Unsigned(Short())),
            value: Number("5"),
            attrs: [],
          },
        ),
        Const(
          {
            name: "ENTITY_NODE",
            idl_type: Integer(Unsigned(Short())),
            value: Number("6"),
            attrs: [],
          },
        ),
        Const(
          {
            name: "PROCESSING_INSTRUCTION_NODE",
            idl_type: Integer(Unsigned(Short())),
            value: Number("7"),
            attrs: [],
          },
        ),
        Const(
          {
            name: "COMMENT_NODE",
            idl_type: Integer(Unsigned(Short())),
            value: Number("8"),
            attrs: [],
          },
        ),
        Const(
          {
            name: "DOCUMENT_NODE",
            idl_type: Integer(Unsigned(Short())),
            value: Number("9"),
            attrs: [],
          },
        ),
        Const(
          {
            name: "DOCUMENT_TYPE_NODE",
            idl_type: Integer(Unsigned(Short())),
            value: Number("10"),
            attrs: [],
          },
        ),
        Const(
          {
            name: "DOCUMENT_FRAGMENT_NODE",
            idl_type: Integer(Unsigned(Short())),
            value: Number("11"),
            attrs: [],
          },
        ),
        Const(
          {
            name: "NOTATION_NODE",
            idl_type: Integer(Unsigned(Short())),
            value: Number("12"),
            attrs: [],
          },
        ),
        Attribute(
          {
            name: "nodeType",
            special: Regular(),
            readonly: true,
            idl_type: {attrs: [], ty: Integer(Unsigned(Short()))},
            attrs: [],
          },
        ),
        Attribute(
          {
            name: "nodeName",
            special: Regular(),
            readonly: true,
            idl_type: {attrs: [], ty: String(DOMString())},
            attrs: [],
          },
        ),
        Attribute(
          {
            name: "baseURI",
            special: Regular(),
            readonly: true,
            idl_type: {attrs: [], ty: String(USVString())},
            attrs: [],
          },
        ),
        Attribute(
          {
            name: "isConnected",
            special: Regular(),
            readonly: true,
            idl_type: {attrs: [], ty: Boolean()},
            attrs: [],
          },
        ),
        Attribute(
          {
            name: "ownerDocument",
            special: Regular(),
            readonly: true,
            idl_type: {attrs: [], ty: Nullable(Id("Document"))},
            attrs: [],
          },
        ),
        Operation(
          {
            name: Some("getRootNode"),
            idl_type: Some(Id("Node")),
            arguments: [
              {
                name: "options",
                idl_type: {attrs: [], ty: Id("GetRootNodeOptions")},
                optional: true,
                variadic: false,
                default: Some(Dictionary()),
                attrs: [],
              }
            ],
            special: Regular(),
            attrs: [],
          },
        ),
        Attribute(
          {
            name: "parentNode",
            special: Regular(),
            readonly: true,
            idl_type: {attrs: [], ty: Nullable(Id("Node"))},
            attrs: [],
          },
        ),
        Attribute(
          {
            name: "parentElement",
            special: Regular(),
            readonly: true,
            idl_type: {attrs: [], ty: Nullable(Id("Element"))},
            attrs: [],
          },
        ),
        Operation(
          {
            name: Some("hasChildNodes"),
            idl_type: Some(Boolean()),
            arguments: [],
            special: Regular(),
            attrs: [],
          },
        ),
        Attribute(
          {
            name: "childNodes",
            special: Regular(),
            readonly: true,
            idl_type: {attrs: [], ty: Id("NodeList")},
            attrs: [{name: "SameObject", rhs: NoArgs()}],
          },
        ),
        Attribute(
          {
            name: "firstChild",
            special: Regular(),
            readonly: true,
            idl_type: {attrs: [], ty: Nullable(Id("Node"))},
            attrs: [],
          },
        ),
        Attribute(
          {
            name: "lastChild",
            special: Regular(),
            readonly: true,
            idl_type: {attrs: [], ty: Nullable(Id("Node"))},
            attrs: [],
          },
        ),
        Attribute(
          {
            name: "previousSibling",
            special: Regular(),
            readonly: true,
            idl_type: {attrs: [], ty: Nullable(Id("Node"))},
            attrs: [],
          },
        ),
        Attribute(
          {
            name: "nextSibling",
            special: Regular(),
            readonly: true,
            idl_type: {attrs: [], ty: Nullable(Id("Node"))},
            attrs: [],
          },
        ),
        Attribute(
          {
            name: "nodeValue",
            special: Regular(),
            readonly: false,
            idl_type: {attrs: [], ty: Nullable(String(DOMString()))},
            attrs: [{name: "CEReactions", rhs: NoArgs()}],
          },
        ),
        Attribute(
          {
            name: "textContent",
            special: Regular(),
            readonly: false,
            idl_type: {attrs: [], ty: Nullable(String(DOMString()))},
            attrs: [{name: "CEReactions", rhs: NoArgs()}],
          },
        ),
        Operation(
          {
            name: Some("normalize"),
            idl_type: Some(Undefined()),
            arguments: [],
            special: Regular(),
            attrs: [{name: "CEReactions", rhs: NoArgs()}],
          },
        ),
        Operation(
          {
            name: Some("cloneNode"),
            idl_type: Some(Id("Node")),
            arguments: [
              {
                name: "subtree",
                idl_type: {attrs: [], ty: Boolean()},
                optional: true,
                variadic: false,
                default: Some(Boolean(false)),
                attrs: [],
              }
            ],
            special: Regular(),
            attrs: [
              {name: "CEReactions", rhs: NoArgs()},
              {name: "NewObject", rhs: NoArgs()}
            ],
          },
        ),
        Operation(
          {
            name: Some("isEqualNode"),
            idl_type: Some(Boolean()),
            arguments: [
              {
                name: "otherNode",
                idl_type: {attrs: [], ty: Nullable(Id("Node"))},
                optional: false,
                variadic: true,
                default: None,
                attrs: [],
              }
            ],
            special: Regular(),
            attrs: [],
          },
        ),
        Operation(
          {
            name: Some("isSameNode"),
            idl_type: Some(Boolean()),
            arguments: [
              {
                name: "otherNode",
                idl_type: {attrs: [], ty: Nullable(Id("Node"))},
                optional: false,
                variadic: true,
                default: None,
                attrs: [],
              }
            ],
            special: Regular(),
            attrs: [],
          },
        ),
        Const(
          {
            name: "DOCUMENT_POSITION_DISCONNECTED",
            idl_type: Integer(Unsigned(Short())),
            value: Number("0x01"),
            attrs: [],
          },
        ),
        Const(
          {
            name: "DOCUMENT_POSITION_PRECEDING",
            idl_type: Integer(Unsigned(Short())),
            value: Number("0x02"),
            attrs: [],
          },
        ),
        Const(
          {
            name: "DOCUMENT_POSITION_FOLLOWING",
            idl_type: Integer(Unsigned(Short())),
            value: Number("0x04"),
            attrs: [],
          },
        ),
        Const(
          {
            name: "DOCUMENT_POSITION_CONTAINS",
            idl_type: Integer(Unsigned(Short())),
            value: Number("0x08"),
            attrs: [],
          },
        ),
        Const(
          {
            name: "DOCUMENT_POSITION_CONTAINED_BY",
            idl_type: Integer(Unsigned(Short())),
            value: Number("0x10"),
            attrs: [],
          },
        ),
        Const(
          {
            name: "DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC",
            idl_type: Integer(Unsigned(Short())),
            value: Number("0x20"),
            attrs: [],
          },
        ),
        Operation(
          {
            name: Some("compareDocumentPosition"),
            idl_type: Some(Integer(Unsigned(Short()))),
            arguments: [
              {
                name: "other",
                idl_type: {attrs: [], ty: Id("Node")},
                optional: false,
                variadic: true,
                default: None,
                attrs: [],
              }
            ],
            special: Regular(),
            attrs: [],
          },
        ),
        Operation(
          {
            name: Some("contains"),
            idl_type: Some(Boolean()),
            arguments: [
              {
                name: "other",
                idl_type: {attrs: [], ty: Nullable(Id("Node"))},
                optional: false,
                variadic: true,
                default: None,
                attrs: [],
              }
            ],
            special: Regular(),
            attrs: [],
          },
        ),
        Operation(
          {
            name: Some("lookupPrefix"),
            idl_type: Some(Nullable(String(DOMString()))),
            arguments: [
              {
                name: "namespace",
                idl_type: {attrs: [], ty: Nullable(String(DOMString()))},
                optional: false,
                variadic: true,
                default: None,
                attrs: [],
              }
            ],
            special: Regular(),
            attrs: [],
          },
        ),
        Operation(
          {
            name: Some("lookupNamespaceURI"),
            idl_type: Some(Nullable(String(DOMString()))),
            arguments: [
              {
                name: "prefix",
                idl_type: {attrs: [], ty: Nullable(String(DOMString()))},
                optional: false,
                variadic: true,
                default: None,
                attrs: [],
              }
            ],
            special: Regular(),
            attrs: [],
          },
        ),
        Operation(
          {
            name: Some("isDefaultNamespace"),
            idl_type: Some(Boolean()),
            arguments: [
              {
                name: "namespace",
                idl_type: {attrs: [], ty: Nullable(String(DOMString()))},
                optional: false,
                variadic: true,
                default: None,
                attrs: [],
              }
            ],
            special: Regular(),
            attrs: [],
          },
        ),
        Operation(
          {
            name: Some("insertBefore"),
            idl_type: Some(Id("Node")),
            arguments: [
              {
                name: "node",
                idl_type: {attrs: [], ty: Id("Node")},
                optional: false,
                variadic: true,
                default: None,
                attrs: [],
              },
              {
                name: "child",
                idl_type: {attrs: [], ty: Nullable(Id("Node"))},
                optional: false,
                variadic: true,
                default: None,
                attrs: [],
              }
            ],
            special: Regular(),
            attrs: [{name: "CEReactions", rhs: NoArgs()}],
          },
        ),
        Operation(
          {
            name: Some("appendChild"),
            idl_type: Some(Id("Node")),
            arguments: [
              {
                name: "node",
                idl_type: {attrs: [], ty: Id("Node")},
                optional: false,
                variadic: true,
                default: None,
                attrs: [],
              }
            ],
            special: Regular(),
            attrs: [{name: "CEReactions", rhs: NoArgs()}],
          },
        ),
        Operation(
          {
            name: Some("replaceChild"),
            idl_type: Some(Id("Node")),
            arguments: [
              {
                name: "node",
                idl_type: {attrs: [], ty: Id("Node")},
                optional: false,
                variadic: true,
                default: None,
                attrs: [],
              },
              {
                name: "child",
                idl_type: {attrs: [], ty: Id("Node")},
                optional: false,
                variadic: true,
                default: None,
                attrs: [],
              }
            ],
            special: Regular(),
            attrs: [{name: "CEReactions", rhs: NoArgs()}],
          },
        ),
        Operation(
          {
            name: Some("removeChild"),
            idl_type: Some(Id("Node")),
            arguments: [
              {
                name: "child",
                idl_type: {attrs: [], ty: Id("Node")},
                optional: false,
                variadic: true,
                default: None,
                attrs: [],
              }
            ],
            special: Regular(),
            attrs: [{name: "CEReactions", rhs: NoArgs()}],
          },
        )
      ],
      inheritance: Some("EventTarget"),
      attrs: [{name: "Exposed", rhs: Ident("Window")}],
    },
  ),
  Dictionary(
    {
      name: "GetRootNodeOptions",
      partial: false,
      members: [
        {
          name: "composed",
          required: false,
          idl_type: {attrs: [], ty: Boolean()},
          attrs: [],
          default: Some(Boolean(false)),
        }
      ],
      inheritance: None,
      attrs: [],
    },
  ),
  Interface(
    {
      name: "Document",
      partial: false,
      members: [
        Constructor({arguments: [], attrs: []}),
        Attribute(
          {
            name: "implementation",
            special: Regular(),
            readonly: true,
            idl_type: {attrs: [], ty: Id("DOMImplementation")},
            attrs: [{name: "SameObject", rhs: NoArgs()}],
          },
        ),
        Attribute(
          {
            name: "URL",
            special: Regular(),
            readonly: true,
            idl_type: {attrs: [], ty: String(USVString())},
            attrs: [],
          },
        ),
        Attribute(
          {
            name: "documentURI",
            special: Regular(),
            readonly: true,
            idl_type: {attrs: [], ty: String(USVString())},
            attrs: [],
          },
        ),
        Attribute(
          {
            name: "compatMode",
            special: Regular(),
            readonly: true,
            idl_type: {attrs: [], ty: String(DOMString())},
            attrs: [],
          },
        ),
        Attribute(
          {
            name: "characterSet",
            special: Regular(),
            readonly: true,
            idl_type: {attrs: [], ty: String(DOMString())},
            attrs: [],
          },
        ),
        Attribute(
          {
            name: "charset",
            special: Regular(),
            readonly: true,
            idl_type: {attrs: [], ty: String(DOMString())},
            attrs: [],
          },
        ),
        Attribute(
          {
            name: "inputEncoding",
            special: Regular(),
            readonly: true,
            idl_type: {attrs: [], ty: String(DOMString())},
            attrs: [],
          },
        ),
        Attribute(
          {
            name: "contentType",
            special: Regular(),
            readonly: true,
            idl_type: {attrs: [], ty: String(DOMString())},
            attrs: [],
          },
        ),
        Attribute(
          {
            name: "doctype",
            special: Regular(),
            readonly: true,
            idl_type: {attrs: [], ty: Nullable(Id("DocumentType"))},
            attrs: [],
          },
        ),
        Attribute(
          {
            name: "documentElement",
            special: Regular(),
            readonly: true,
            idl_type: {attrs: [], ty: Nullable(Id("Element"))},
            attrs: [],
          },
        ),
        Operation(
          {
            name: Some("getElementsByTagName"),
            idl_type: Some(Id("HTMLCollection")),
            arguments: [
              {
                name: "qualifiedName",
                idl_type: {attrs: [], ty: String(DOMString())},
                optional: false,
                variadic: true,
                default: None,
                attrs: [],
              }
            ],
            special: Regular(),
            attrs: [],
          },
        ),
        Operation(
          {
            name: Some("getElementsByTagNameNS"),
            idl_type: Some(Id("HTMLCollection")),
            arguments: [
              {
                name: "namespace",
                idl_type: {attrs: [], ty: Nullable(String(DOMString()))},
                optional: false,
                variadic: true,
                default: None,
                attrs: [],
              },
              {
                name: "localName",
                idl_type: {attrs: [], ty: String(DOMString())},
                optional: false,
                variadic: true,
                default: None,
                attrs: [],
              }
            ],
            special: Regular(),
            attrs: [],
          },
        ),
        Operation(
          {
            name: Some("getElementsByClassName"),
            idl_type: Some(Id("HTMLCollection")),
            arguments: [
              {
                name: "classNames",
                idl_type: {attrs: [], ty: String(DOMString())},
                optional: false,
                variadic: true,
                default: None,
                attrs: [],
              }
            ],
            special: Regular(),
            attrs: [],
          },
        ),
        Operation(
          {
            name: Some("createElement"),
            idl_type: Some(Id("Element")),
            arguments: [
              {
                name: "localName",
                idl_type: {attrs: [], ty: String(DOMString())},
                optional: false,
                variadic: true,
                default: None,
                attrs: [],
              },
              {
                name: "options",
                idl_type: {
                  attrs: [],
                  ty: Union(
                    [
                      {attrs: [], ty: String(DOMString())},
                      {attrs: [], ty: Id("ElementCreationOptions")}
                    ],
                  ),
                },
                optional: true,
                variadic: false,
                default: Some(Dictionary()),
                attrs: [],
              }
            ],
            special: Regular(),
            attrs: [
              {name: "CEReactions", rhs: NoArgs()},
              {name: "NewObject", rhs: NoArgs()}
            ],
          },
        ),
        Operation(
          {
            name: Some("createElementNS"),
            idl_type: Some(Id("Element")),
            arguments: [
              {
                name: "namespace",
                idl_type: {attrs: [], ty: Nullable(String(DOMString()))},
                optional: false,
                variadic: true,
                default: None,
                attrs: [],
              },
              {
                name: "qualifiedName",
                idl_type: {attrs: [], ty: String(DOMString())},
                optional: false,
                variadic: true,
                default: None,
                attrs: [],
              },
              {
                name: "options",
                idl_type: {
                  attrs: [],
                  ty: Union(
                    [
                      {attrs: [], ty: String(DOMString())},
                      {attrs: [], ty: Id("ElementCreationOptions")}
                    ],
                  ),
                },
                optional: true,
                variadic: false,
                default: Some(Dictionary()),
                attrs: [],
              }
            ],
            special: Regular(),
            attrs: [
              {name: "CEReactions", rhs: NoArgs()},
              {name: "NewObject", rhs: NoArgs()}
            ],
          },
        ),
        Operation(
          {
            name: Some("createDocumentFragment"),
            idl_type: Some(Id("DocumentFragment")),
            arguments: [],
            special: Regular(),
            attrs: [{name: "NewObject", rhs: NoArgs()}],
          },
        ),
        Operation(
          {
            name: Some("createTextNode"),
            idl_type: Some(Id("Text")),
            arguments: [
              {
                name: "data",
                idl_type: {attrs: [], ty: String(DOMString())},
                optional: false,
                variadic: true,
                default: None,
                attrs: [],
              }
            ],
            special: Regular(),
            attrs: [{name: "NewObject", rhs: NoArgs()}],
          },
        ),
        Operation(
          {
            name: Some("createCDATASection"),
            idl_type: Some(Id("CDATASection")),
            arguments: [
              {
                name: "data",
                idl_type: {attrs: [], ty: String(DOMString())},
                optional: false,
                variadic: true,
                default: None,
                attrs: [],
              }
            ],
            special: Regular(),
            attrs: [{name: "NewObject", rhs: NoArgs()}],
          },
        ),
        Operation(
          {
            name: Some("createComment"),
            idl_type: Some(Id("Comment")),
            arguments: [
              {
                name: "data",
                idl_type: {attrs: [], ty: String(DOMString())},
                optional: false,
                variadic: true,
                default: None,
                attrs: [],
              }
            ],
            special: Regular(),
            attrs: [{name: "NewObject", rhs: NoArgs()}],
          },
        ),
        Operation(
          {
            name: Some("createProcessingInstruction"),
            idl_type: Some(Id("ProcessingInstruction")),
            arguments: [
              {
                name: "target",
                idl_type: {attrs: [], ty: String(DOMString())},
                optional: false,
                variadic: true,
                default: None,
                attrs: [],
              },
              {
                name: "data",
                idl_type: {attrs: [], ty: String(DOMString())},
                optional: false,
                variadic: true,
                default: None,
                attrs: [],
              }
            ],
            special: Regular(),
            attrs: [{name: "NewObject", rhs: NoArgs()}],
          },
        ),
        Operation(
          {
            name: Some("importNode"),
            idl_type: Some(Id("Node")),
            arguments: [
              {
                name: "node",
                idl_type: {attrs: [], ty: Id("Node")},
                optional: false,
                variadic: true,
                default: None,
                attrs: [],
              },
              {
                name: "options",
                idl_type: {
                  attrs: [],
                  ty: Union(
                    [
                      {attrs: [], ty: Boolean()},
                      {attrs: [], ty: Id("ImportNodeOptions")}
                    ],
                  ),
                },
                optional: true,
                variadic: false,
                default: Some(Boolean(false)),
                attrs: [],
              }
            ],
            special: Regular(),
            attrs: [
              {name: "CEReactions", rhs: NoArgs()},
              {name: "NewObject", rhs: NoArgs()}
            ],
          },
        ),
        Operation(
          {
            name: Some("adoptNode"),
            idl_type: Some(Id("Node")),
            arguments: [
              {
                name: "node",
                idl_type: {attrs: [], ty: Id("Node")},
                optional: false,
                variadic: true,
                default: None,
                attrs: [],
              }
            ],
            special: Regular(),
            attrs: [{name: "CEReactions", rhs: NoArgs()}],
          },
        ),
        Operation(
          {
            name: Some("createAttribute"),
            idl_type: Some(Id("Attr")),
            arguments: [
              {
                name: "localName",
                idl_type: {attrs: [], ty: String(DOMString())},
                optional: false,
                variadic: true,
                default: None,
                attrs: [],
              }
            ],
            special: Regular(),
            attrs: [{name: "NewObject", rhs: NoArgs()}],
          },
        ),
        Operation(
          {
            name: Some("createAttributeNS"),
            idl_type: Some(Id("Attr")),
            arguments: [
              {
                name: "namespace",
                idl_type: {attrs: [], ty: Nullable(String(DOMString()))},
                optional: false,
                variadic: true,
                default: None,
                attrs: [],
              },
              {
                name: "qualifiedName",
                idl_type: {attrs: [], ty: String(DOMString())},
                optional: false,
                variadic: true,
                default: None,
                attrs: [],
              }
            ],
            special: Regular(),
            attrs: [{name: "NewObject", rhs: NoArgs()}],
          },
        ),
        Operation(
          {
            name: Some("createEvent"),
            idl_type: Some(Id("Event")),
            arguments: [
              {
                name: "interface",
                idl_type: {attrs: [], ty: String(DOMString())},
                optional: false,
                variadic: true,
                default: None,
                attrs: [],
              }
            ],
            special: Regular(),
            attrs: [{name: "NewObject", rhs: NoArgs()}],
          },
        ),
        Operation(
          {
            name: Some("createRange"),
            idl_type: Some(Id("Range")),
            arguments: [],
            special: Regular(),
            attrs: [{name: "NewObject", rhs: NoArgs()}],
          },
        ),
        Operation(
          {
            name: Some("createNodeIterator"),
            idl_type: Some(Id("NodeIterator")),
            arguments: [
              {
                name: "root",
                idl_type: {attrs: [], ty: Id("Node")},
                optional: false,
                variadic: true,
                default: None,
                attrs: [],
              },
              {
                name: "whatToShow",
                idl_type: {attrs: [], ty: Integer(Unsigned(Long()))},
                optional: true,
                variadic: false,
                default: Some(Number("0xFFFFFFFF")),
                attrs: [],
              },
              {
                name: "filter",
                idl_type: {attrs: [], ty: Nullable(Id("NodeFilter"))},
                optional: true,
                variadic: false,
                default: Some(Null()),
                attrs: [],
              }
            ],
            special: Regular(),
            attrs: [{name: "NewObject", rhs: NoArgs()}],
          },
        ),
        Operation(
          {
            name: Some("createTreeWalker"),
            idl_type: Some(Id("TreeWalker")),
            arguments: [
              {
                name: "root",
                idl_type: {attrs: [], ty: Id("Node")},
                optional: false,
                variadic: true,
                default: None,
                attrs: [],
              },
              {
                name: "whatToShow",
                idl_type: {attrs: [], ty: Integer(Unsigned(Long()))},
                optional: true,
                variadic: false,
                default: Some(Number("0xFFFFFFFF")),
                attrs: [],
              },
              {
                name: "filter",
                idl_type: {attrs: [], ty: Nullable(Id("NodeFilter"))},
                optional: true,
                variadic: false,
                default: Some(Null()),
                attrs: [],
              }
            ],
            special: Regular(),
            attrs: [{name: "NewObject", rhs: NoArgs()}],
          },
        )
      ],
      inheritance: Some("Node"),
      attrs: [{name: "Exposed", rhs: Ident("Window")}],
    },
  ),
  Interface(
    {
      name: "XMLDocument",
      partial: false,
      members: [],
      inheritance: Some("Document"),
      attrs: [{name: "Exposed", rhs: Ident("Window")}],
    },
  ),
  Dictionary(
    {
      name: "ElementCreationOptions",
      partial: false,
      members: [
        {
          name: "customElementRegistry",
          required: false,
          idl_type: {attrs: [], ty: Id("CustomElementRegistry")},
          attrs: [],
          default: None,
        },
        {
          name: "is",
          required: false,
          idl_type: {attrs: [], ty: String(DOMString())},
          attrs: [],
          default: None,
        }
      ],
      inheritance: None,
      attrs: [],
    },
  ),
  Dictionary(
    {
      name: "ImportNodeOptions",
      partial: false,
      members: [
        {
          name: "customElementRegistry",
          required: false,
          idl_type: {attrs: [], ty: Id("CustomElementRegistry")},
          attrs: [],
          default: None,
        },
        {
          name: "selfOnly",
          required: false,
          idl_type: {attrs: [], ty: Boolean()},
          attrs: [],
          default: Some(Boolean(false)),
        }
      ],
      inheritance: None,
      attrs: [],
    },
  ),
  Interface(
    {
      name: "DOMImplementation",
      partial: false,
      members: [
        Operation(
          {
            name: Some("createDocumentType"),
            idl_type: Some(Id("DocumentType")),
            arguments: [
              {
                name: "name",
                idl_type: {attrs: [], ty: String(DOMString())},
                optional: false,
                variadic: true,
                default: None,
                attrs: [],
              },
              {
                name: "publicId",
                idl_type: {attrs: [], ty: String(DOMString())},
                optional: false,
                variadic: true,
                default: None,
                attrs: [],
              },
              {
                name: "systemId",
                idl_type: {attrs: [], ty: String(DOMString())},
                optional: false,
                variadic: true,
                default: None,
                attrs: [],
              }
            ],
            special: Regular(),
            attrs: [{name: "NewObject", rhs: NoArgs()}],
          },
        ),
        Operation(
          {
            name: Some("createDocument"),
            idl_type: Some(Id("XMLDocument")),
            arguments: [
              {
                name: "namespace",
                idl_type: {attrs: [], ty: Nullable(String(DOMString()))},
                optional: false,
                variadic: true,
                default: None,
                attrs: [],
              },
              {
                name: "qualifiedName",
                idl_type: {attrs: [], ty: String(DOMString())},
                optional: false,
                variadic: true,
                default: None,
                attrs: [{name: "LegacyNullToEmptyString", rhs: NoArgs()}],
              },
              {
                name: "doctype",
                idl_type: {attrs: [], ty: Nullable(Id("DocumentType"))},
                optional: true,
                variadic: false,
                default: Some(Null()),
                attrs: [],
              }
            ],
            special: Regular(),
            attrs: [{name: "NewObject", rhs: NoArgs()}],
          },
        ),
        Operation(
          {
            name: Some("createHTMLDocument"),
            idl_type: Some(Id("Document")),
            arguments: [
              {
                name: "title",
                idl_type: {attrs: [], ty: String(DOMString())},
                optional: true,
                variadic: false,
                default: None,
                attrs: [],
              }
            ],
            special: Regular(),
            attrs: [{name: "NewObject", rhs: NoArgs()}],
          },
        ),
        Operation(
          {
            name: Some("hasFeature"),
            idl_type: Some(Boolean()),
            arguments: [],
            special: Regular(),
            attrs: [],
          },
        )
      ],
      inheritance: None,
      attrs: [{name: "Exposed", rhs: Ident("Window")}],
    },
  ),
  Interface(
    {
      name: "DocumentType",
      partial: false,
      members: [
        Attribute(
          {
            name: "name",
            special: Regular(),
            readonly: true,
            idl_type: {attrs: [], ty: String(DOMString())},
            attrs: [],
          },
        ),
        Attribute(
          {
            name: "publicId",
            special: Regular(),
            readonly: true,
            idl_type: {attrs: [], ty: String(DOMString())},
            attrs: [],
          },
        ),
        Attribute(
          {
            name: "systemId",
            special: Regular(),
            readonly: true,
            idl_type: {attrs: [], ty: String(DOMString())},
            attrs: [],
          },
        )
      ],
      inheritance: Some("Node"),
      attrs: [{name: "Exposed", rhs: Ident("Window")}],
    },
  ),
  Interface(
    {
      name: "DocumentFragment",
      partial: false,
      members: [Constructor({arguments: [], attrs: []})],
      inheritance: Some("Node"),
      attrs: [{name: "Exposed", rhs: Ident("Window")}],
    },
  ),
  Interface(
    {
      name: "ShadowRoot",
      partial: false,
      members: [
        Attribute(
          {
            name: "mode",
            special: Regular(),
            readonly: true,
            idl_type: {attrs: [], ty: Id("ShadowRootMode")},
            attrs: [],
          },
        ),
        Attribute(
          {
            name: "delegatesFocus",
            special: Regular(),
            readonly: true,
            idl_type: {attrs: [], ty: Boolean()},
            attrs: [],
          },
        ),
        Attribute(
          {
            name: "slotAssignment",
            special: Regular(),
            readonly: true,
            idl_type: {attrs: [], ty: Id("SlotAssignmentMode")},
            attrs: [],
          },
        ),
        Attribute(
          {
            name: "clonable",
            special: Regular(),
            readonly: true,
            idl_type: {attrs: [], ty: Boolean()},
            attrs: [],
          },
        ),
        Attribute(
          {
            name: "serializable",
            special: Regular(),
            readonly: true,
            idl_type: {attrs: [], ty: Boolean()},
            attrs: [],
          },
        ),
        Attribute(
          {
            name: "host",
            special: Regular(),
            readonly: true,
            idl_type: {attrs: [], ty: Id("Element")},
            attrs: [],
          },
        ),
        Attribute(
          {
            name: "onslotchange",
            special: Regular(),
            readonly: false,
            idl_type: {attrs: [], ty: Id("EventHandler")},
            attrs: [],
          },
        )
      ],
      inheritance: Some("DocumentFragment"),
      attrs: [{name: "Exposed", rhs: Ident("Window")}],
    },
  ),
  Enum({name: "ShadowRootMode", values: [""open"", ""closed""], attrs: []}),
  Enum({name: "SlotAssignmentMode", values: [""manual"", ""named""], attrs: []}),
  Interface(
    {
      name: "Element",
      partial: false,
      members: [
        Attribute(
          {
            name: "namespaceURI",
            special: Regular(),
            readonly: true,
            idl_type: {attrs: [], ty: Nullable(String(DOMString()))},
            attrs: [],
          },
        ),
        Attribute(
          {
            name: "prefix",
            special: Regular(),
            readonly: true,
            idl_type: {attrs: [], ty: Nullable(String(DOMString()))},
            attrs: [],
          },
        ),
        Attribute(
          {
            name: "localName",
            special: Regular(),
            readonly: true,
            idl_type: {attrs: [], ty: String(DOMString())},
            attrs: [],
          },
        ),
        Attribute(
          {
            name: "tagName",
            special: Regular(),
            readonly: true,
            idl_type: {attrs: [], ty: String(DOMString())},
            attrs: [],
          },
        ),
        Attribute(
          {
            name: "id",
            special: Regular(),
            readonly: false,
            idl_type: {attrs: [], ty: String(DOMString())},
            attrs: [{name: "CEReactions", rhs: NoArgs()}],
          },
        ),
        Attribute(
          {
            name: "className",
            special: Regular(),
            readonly: false,
            idl_type: {attrs: [], ty: String(DOMString())},
            attrs: [{name: "CEReactions", rhs: NoArgs()}],
          },
        ),
        Attribute(
          {
            name: "classList",
            special: Regular(),
            readonly: true,
            idl_type: {attrs: [], ty: Id("DOMTokenList")},
            attrs: [
              {name: "SameObject", rhs: NoArgs()},
              {name: "PutForwards", rhs: Ident("value")}
            ],
          },
        ),
        Attribute(
          {
            name: "slot",
            special: Regular(),
            readonly: false,
            idl_type: {attrs: [], ty: String(DOMString())},
            attrs: [
              {name: "CEReactions", rhs: NoArgs()},
              {name: "Unscopable", rhs: NoArgs()}
            ],
          },
        ),
        Operation(
          {
            name: Some("hasAttributes"),
            idl_type: Some(Boolean()),
            arguments: [],
            special: Regular(),
            attrs: [],
          },
        ),
        Attribute(
          {
            name: "attributes",
            special: Regular(),
            readonly: true,
            idl_type: {attrs: [], ty: Id("NamedNodeMap")},
            attrs: [{name: "SameObject", rhs: NoArgs()}],
          },
        ),
        Operation(
          {
            name: Some("getAttributeNames"),
            idl_type: Some(Sequence({attrs: [], ty: String(DOMString())})),
            arguments: [],
            special: Regular(),
            attrs: [],
          },
        ),
        Operation(
          {
            name: Some("getAttribute"),
            idl_type: Some(Nullable(String(DOMString()))),
            arguments: [
              {
                name: "qualifiedName",
                idl_type: {attrs: [], ty: String(DOMString())},
                optional: false,
                variadic: true,
                default: None,
                attrs: [],
              }
            ],
            special: Regular(),
            attrs: [],
          },
        ),
        Operation(
          {
            name: Some("getAttributeNS"),
            idl_type: Some(Nullable(String(DOMString()))),
            arguments: [
              {
                name: "namespace",
                idl_type: {attrs: [], ty: Nullable(String(DOMString()))},
                optional: false,
                variadic: true,
                default: None,
                attrs: [],
              },
              {
                name: "localName",
                idl_type: {attrs: [], ty: String(DOMString())},
                optional: false,
                variadic: true,
                default: None,
                attrs: [],
              }
            ],
            special: Regular(),
            attrs: [],
          },
        ),
        Operation(
          {
            name: Some("setAttribute"),
            idl_type: Some(Undefined()),
            arguments: [
              {
                name: "qualifiedName",
                idl_type: {attrs: [], ty: String(DOMString())},
                optional: false,
                variadic: true,
                default: None,
                attrs: [],
              },
              {
                name: "value",
                idl_type: {attrs: [], ty: String(DOMString())},
                optional: false,
                variadic: true,
                default: None,
                attrs: [],
              }
            ],
            special: Regular(),
            attrs: [{name: "CEReactions", rhs: NoArgs()}],
          },
        ),
        Operation(
          {
            name: Some("setAttributeNS"),
            idl_type: Some(Undefined()),
            arguments: [
              {
                name: "namespace",
                idl_type: {attrs: [], ty: Nullable(String(DOMString()))},
                optional: false,
                variadic: true,
                default: None,
                attrs: [],
              },
              {
                name: "qualifiedName",
                idl_type: {attrs: [], ty: String(DOMString())},
                optional: false,
                variadic: true,
                default: None,
                attrs: [],
              },
              {
                name: "value",
                idl_type: {attrs: [], ty: String(DOMString())},
                optional: false,
                variadic: true,
                default: None,
                attrs: [],
              }
            ],
            special: Regular(),
            attrs: [{name: "CEReactions", rhs: NoArgs()}],
          },
        ),
        Operation(
          {
            name: Some("removeAttribute"),
            idl_type: Some(Undefined()),
            arguments: [
              {
                name: "qualifiedName",
                idl_type: {attrs: [], ty: String(DOMString())},
                optional: false,
                variadic: true,
                default: None,
                attrs: [],
              }
            ],
            special: Regular(),
            attrs: [{name: "CEReactions", rhs: NoArgs()}],
          },
        ),
        Operation(
          {
            name: Some("removeAttributeNS"),
            idl_type: Some(Undefined()),
            arguments: [
              {
                name: "namespace",
                idl_type: {attrs: [], ty: Nullable(String(DOMString()))},
                optional: false,
                variadic: true,
                default: None,
                attrs: [],
              },
              {
                name: "localName",
                idl_type: {attrs: [], ty: String(DOMString())},
                optional: false,
                variadic: true,
                default: None,
                attrs: [],
              }
            ],
            special: Regular(),
            attrs: [{name: "CEReactions", rhs: NoArgs()}],
          },
        ),
        Operation(
          {
            name: Some("toggleAttribute"),
            idl_type: Some(Boolean()),
            arguments: [
              {
                name: "qualifiedName",
                idl_type: {attrs: [], ty: String(DOMString())},
                optional: false,
                variadic: true,
                default: None,
                attrs: [],
              },
              {
                name: "force",
                idl_type: {attrs: [], ty: Boolean()},
                optional: true,
                variadic: false,
                default: None,
                attrs: [],
              }
            ],
            special: Regular(),
            attrs: [{name: "CEReactions", rhs: NoArgs()}],
          },
        ),
        Operation(
          {
            name: Some("hasAttribute"),
            idl_type: Some(Boolean()),
            arguments: [
              {
                name: "qualifiedName",
                idl_type: {attrs: [], ty: String(DOMString())},
                optional: false,
                variadic: true,
                default: None,
                attrs: [],
              }
            ],
            special: Regular(),
            attrs: [],
          },
        ),
        Operation(
          {
            name: Some("hasAttributeNS"),
            idl_type: Some(Boolean()),
            arguments: [
              {
                name: "namespace",
                idl_type: {attrs: [], ty: Nullable(String(DOMString()))},
                optional: false,
                variadic: true,
                default: None,
                attrs: [],
              },
              {
                name: "localName",
                idl_type: {attrs: [], ty: String(DOMString())},
                optional: false,
                variadic: true,
                default: None,
                attrs: [],
              }
            ],
            special: Regular(),
            attrs: [],
          },
        ),
        Operation(
          {
            name: Some("getAttributeNode"),
            idl_type: Some(Nullable(Id("Attr"))),
            arguments: [
              {
                name: "qualifiedName",
                idl_type: {attrs: [], ty: String(DOMString())},
                optional: false,
                variadic: true,
                default: None,
                attrs: [],
              }
            ],
            special: Regular(),
            attrs: [],
          },
        ),
        Operation(
          {
            name: Some("getAttributeNodeNS"),
            idl_type: Some(Nullable(Id("Attr"))),
            arguments: [
              {
                name: "namespace",
                idl_type: {attrs: [], ty: Nullable(String(DOMString()))},
                optional: false,
                variadic: true,
                default: None,
                attrs: [],
              },
              {
                name: "localName",
                idl_type: {attrs: [], ty: String(DOMString())},
                optional: false,
                variadic: true,
                default: None,
                attrs: [],
              }
            ],
            special: Regular(),
            attrs: [],
          },
        ),
        Operation(
          {
            name: Some("setAttributeNode"),
            idl_type: Some(Nullable(Id("Attr"))),
            arguments: [
              {
                name: "attr",
                idl_type: {attrs: [], ty: Id("Attr")},
                optional: false,
                variadic: true,
                default: None,
                attrs: [],
              }
            ],
            special: Regular(),
            attrs: [{name: "CEReactions", rhs: NoArgs()}],
          },
        ),
        Operation(
          {
            name: Some("setAttributeNodeNS"),
            idl_type: Some(Nullable(Id("Attr"))),
            arguments: [
              {
                name: "attr",
                idl_type: {attrs: [], ty: Id("Attr")},
                optional: false,
                variadic: true,
                default: None,
                attrs: [],
              }
            ],
            special: Regular(),
            attrs: [{name: "CEReactions", rhs: NoArgs()}],
          },
        ),
        Operation(
          {
            name: Some("removeAttributeNode"),
            idl_type: Some(Id("Attr")),
            arguments: [
              {
                name: "attr",
                idl_type: {attrs: [], ty: Id("Attr")},
                optional: false,
                variadic: true,
                default: None,
                attrs: [],
              }
            ],
            special: Regular(),
            attrs: [{name: "CEReactions", rhs: NoArgs()}],
          },
        ),
        Operation(
          {
            name: Some("attachShadow"),
            idl_type: Some(Id("ShadowRoot")),
            arguments: [
              {
                name: "init",
                idl_type: {attrs: [], ty: Id("ShadowRootInit")},
                optional: false,
                variadic: true,
                default: None,
                attrs: [],
              }
            ],
            special: Regular(),
            attrs: [],
          },
        ),
        Attribute(
          {
            name: "shadowRoot",
            special: Regular(),
            readonly: true,
            idl_type: {attrs: [], ty: Nullable(Id("ShadowRoot"))},
            attrs: [],
          },
        ),
        Attribute(
          {
            name: "customElementRegistry",
            special: Regular(),
            readonly: true,
            idl_type: {attrs: [], ty: Nullable(Id("CustomElementRegistry"))},
            attrs: [],
          },
        ),
        Operation(
          {
            name: Some("closest"),
            idl_type: Some(Nullable(Id("Element"))),
            arguments: [
              {
                name: "selectors",
                idl_type: {attrs: [], ty: String(DOMString())},
                optional: false,
                variadic: true,
                default: None,
                attrs: [],
              }
            ],
            special: Regular(),
            attrs: [],
          },
        ),
        Operation(
          {
            name: Some("matches"),
            idl_type: Some(Boolean()),
            arguments: [
              {
                name: "selectors",
                idl_type: {attrs: [], ty: String(DOMString())},
                optional: false,
                variadic: true,
                default: None,
                attrs: [],
              }
            ],
            special: Regular(),
            attrs: [],
          },
        ),
        Operation(
          {
            name: Some("webkitMatchesSelector"),
            idl_type: Some(Boolean()),
            arguments: [
              {
                name: "selectors",
                idl_type: {attrs: [], ty: String(DOMString())},
                optional: false,
                variadic: true,
                default: None,
                attrs: [],
              }
            ],
            special: Regular(),
            attrs: [],
          },
        ),
        Operation(
          {
            name: Some("getElementsByTagName"),
            idl_type: Some(Id("HTMLCollection")),
            arguments: [
              {
                name: "qualifiedName",
                idl_type: {attrs: [], ty: String(DOMString())},
                optional: false,
                variadic: true,
                default: None,
                attrs: [],
              }
            ],
            special: Regular(),
            attrs: [],
          },
        ),
        Operation(
          {
            name: Some("getElementsByTagNameNS"),
            idl_type: Some(Id("HTMLCollection")),
            arguments: [
              {
                name: "namespace",
                idl_type: {attrs: [], ty: Nullable(String(DOMString()))},
                optional: false,
                variadic: true,
                default: None,
                attrs: [],
              },
              {
                name: "localName",
                idl_type: {attrs: [], ty: String(DOMString())},
                optional: false,
                variadic: true,
                default: None,
                attrs: [],
              }
            ],
            special: Regular(),
            attrs: [],
          },
        ),
        Operation(
          {
            name: Some("getElementsByClassName"),
            idl_type: Some(Id("HTMLCollection")),
            arguments: [
              {
                name: "classNames",
                idl_type: {attrs: [], ty: String(DOMString())},
                optional: false,
                variadic: true,
                default: None,
                attrs: [],
              }
            ],
            special: Regular(),
            attrs: [],
          },
        ),
        Operation(
          {
            name: Some("insertAdjacentElement"),
            idl_type: Some(Nullable(Id("Element"))),
            arguments: [
              {
                name: "where",
                idl_type: {attrs: [], ty: String(DOMString())},
                optional: false,
                variadic: true,
                default: None,
                attrs: [],
              },
              {
                name: "element",
                idl_type: {attrs: [], ty: Id("Element")},
                optional: false,
                variadic: true,
                default: None,
                attrs: [],
              }
            ],
            special: Regular(),
            attrs: [{name: "CEReactions", rhs: NoArgs()}],
          },
        ),
        Operation(
          {
            name: Some("insertAdjacentText"),
            idl_type: Some(Undefined()),
            arguments: [
              {
                name: "where",
                idl_type: {attrs: [], ty: String(DOMString())},
                optional: false,
                variadic: true,
                default: None,
                attrs: [],
              },
              {
                name: "data",
                idl_type: {attrs: [], ty: String(DOMString())},
                optional: false,
                variadic: true,
                default: None,
                attrs: [],
              }
            ],
            special: Regular(),
            attrs: [],
          },
        )
      ],
      inheritance: Some("Node"),
      attrs: [{name: "Exposed", rhs: Ident("Window")}],
    },
  ),
  Dictionary(
    {
      name: "ShadowRootInit",
      partial: false,
      members: [
        {
          name: "mode",
          required: true,
          idl_type: {attrs: [], ty: Id("ShadowRootMode")},
          attrs: [],
          default: None,
        },
        {
          name: "delegatesFocus",
          required: false,
          idl_type: {attrs: [], ty: Boolean()},
          attrs: [],
          default: Some(Boolean(false)),
        },
        {
          name: "slotAssignment",
          required: false,
          idl_type: {attrs: [], ty: Id("SlotAssignmentMode")},
          attrs: [],
          default: Some(String(""named"")),
        },
        {
          name: "clonable",
          required: false,
          idl_type: {attrs: [], ty: Boolean()},
          attrs: [],
          default: Some(Boolean(false)),
        },
        {
          name: "serializable",
          required: false,
          idl_type: {attrs: [], ty: Boolean()},
          attrs: [],
          default: Some(Boolean(false)),
        },
        {
          name: "customElementRegistry",
          required: false,
          idl_type: {attrs: [], ty: Nullable(Id("CustomElementRegistry"))},
          attrs: [],
          default: Some(Null()),
        }
      ],
      inheritance: None,
      attrs: [],
    },
  ),
  Interface(
    {
      name: "NamedNodeMap",
      partial: false,
      members: [
        Attribute(
          {
            name: "length",
            special: Regular(),
            readonly: true,
            idl_type: {attrs: [], ty: Integer(Unsigned(Long()))},
            attrs: [],
          },
        ),
        Operation(
          {
            name: Some("item"),
            idl_type: Some(Nullable(Id("Attr"))),
            arguments: [
              {
                name: "index",
                idl_type: {attrs: [], ty: Integer(Unsigned(Long()))},
                optional: false,
                variadic: true,
                default: None,
                attrs: [],
              }
            ],
            special: Getter(),
            attrs: [],
          },
        ),
        Operation(
          {
            name: Some("getNamedItem"),
            idl_type: Some(Nullable(Id("Attr"))),
            arguments: [
              {
                name: "qualifiedName",
                idl_type: {attrs: [], ty: String(DOMString())},
                optional: false,
                variadic: true,
                default: None,
                attrs: [],
              }
            ],
            special: Getter(),
            attrs: [],
          },
        ),
        Operation(
          {
            name: Some("getNamedItemNS"),
            idl_type: Some(Nullable(Id("Attr"))),
            arguments: [
              {
                name: "namespace",
                idl_type: {attrs: [], ty: Nullable(String(DOMString()))},
                optional: false,
                variadic: true,
                default: None,
                attrs: [],
              },
              {
                name: "localName",
                idl_type: {attrs: [], ty: String(DOMString())},
                optional: false,
                variadic: true,
                default: None,
                attrs: [],
              }
            ],
            special: Regular(),
            attrs: [],
          },
        ),
        Operation(
          {
            name: Some("setNamedItem"),
            idl_type: Some(Nullable(Id("Attr"))),
            arguments: [
              {
                name: "attr",
                idl_type: {attrs: [], ty: Id("Attr")},
                optional: false,
                variadic: true,
                default: None,
                attrs: [],
              }
            ],
            special: Regular(),
            attrs: [{name: "CEReactions", rhs: NoArgs()}],
          },
        ),
        Operation(
          {
            name: Some("setNamedItemNS"),
            idl_type: Some(Nullable(Id("Attr"))),
            arguments: [
              {
                name: "attr",
                idl_type: {attrs: [], ty: Id("Attr")},
                optional: false,
                variadic: true,
                default: None,
                attrs: [],
              }
            ],
            special: Regular(),
            attrs: [{name: "CEReactions", rhs: NoArgs()}],
          },
        ),
        Operation(
          {
            name: Some("removeNamedItem"),
            idl_type: Some(Id("Attr")),
            arguments: [
              {
                name: "qualifiedName",
                idl_type: {attrs: [], ty: String(DOMString())},
                optional: false,
                variadic: true,
                default: None,
                attrs: [],
              }
            ],
            special: Regular(),
            attrs: [{name: "CEReactions", rhs: NoArgs()}],
          },
        ),
        Operation(
          {
            name: Some("removeNamedItemNS"),
            idl_type: Some(Id("Attr")),
            arguments: [
              {
                name: "namespace",
                idl_type: {attrs: [], ty: Nullable(String(DOMString()))},
                optional: false,
                variadic: true,
                default: None,
                attrs: [],
              },
              {
                name: "localName",
                idl_type: {attrs: [], ty: String(DOMString())},
                optional: false,
                variadic: true,
                default: None,
                attrs: [],
              }
            ],
            special: Regular(),
            attrs: [{name: "CEReactions", rhs: NoArgs()}],
          },
        )
      ],
      inheritance: None,
      attrs: [
        {name: "Exposed", rhs: Ident("Window")},
        {name: "LegacyUnenumerableNamedProperties", rhs: NoArgs()}
      ],
    },
  ),
  Interface(
    {
      name: "Attr",
      partial: false,
      members: [
        Attribute(
          {
            name: "namespaceURI",
            special: Regular(),
            readonly: true,
            idl_type: {attrs: [], ty: Nullable(String(DOMString()))},
            attrs: [],
          },
        ),
        Attribute(
          {
            name: "prefix",
            special: Regular(),
            readonly: true,
            idl_type: {attrs: [], ty: Nullable(String(DOMString()))},
            attrs: [],
          },
        ),
        Attribute(
          {
            name: "localName",
            special: Regular(),
            readonly: true,
            idl_type: {attrs: [], ty: String(DOMString())},
            attrs: [],
          },
        ),
        Attribute(
          {
            name: "name",
            special: Regular(),
            readonly: true,
            idl_type: {attrs: [], ty: String(DOMString())},
            attrs: [],
          },
        ),
        Attribute(
          {
            name: "value",
            special: Regular(),
            readonly: false,
            idl_type: {attrs: [], ty: String(DOMString())},
            attrs: [{name: "CEReactions", rhs: NoArgs()}],
          },
        ),
        Attribute(
          {
            name: "ownerElement",
            special: Regular(),
            readonly: true,
            idl_type: {attrs: [], ty: Nullable(Id("Element"))},
            attrs: [],
          },
        ),
        Attribute(
          {
            name: "specified",
            special: Regular(),
            readonly: true,
            idl_type: {attrs: [], ty: Boolean()},
            attrs: [],
          },
        )
      ],
      inheritance: Some("Node"),
      attrs: [{name: "Exposed", rhs: Ident("Window")}],
    },
  ),
  Interface(
    {
      name: "CharacterData",
      partial: false,
      members: [
        Attribute(
          {
            name: "data",
            special: Regular(),
            readonly: false,
            idl_type: {
              attrs: [{name: "LegacyNullToEmptyString", rhs: NoArgs()}],
              ty: String(DOMString()),
            },
            attrs: [],
          },
        ),
        Attribute(
          {
            name: "length",
            special: Regular(),
            readonly: true,
            idl_type: {attrs: [], ty: Integer(Unsigned(Long()))},
            attrs: [],
          },
        ),
        Operation(
          {
            name: Some("substringData"),
            idl_type: Some(String(DOMString())),
            arguments: [
              {
                name: "offset",
                idl_type: {attrs: [], ty: Integer(Unsigned(Long()))},
                optional: false,
                variadic: true,
                default: None,
                attrs: [],
              },
              {
                name: "count",
                idl_type: {attrs: [], ty: Integer(Unsigned(Long()))},
                optional: false,
                variadic: true,
                default: None,
                attrs: [],
              }
            ],
            special: Regular(),
            attrs: [],
          },
        ),
        Operation(
          {
            name: Some("appendData"),
            idl_type: Some(Undefined()),
            arguments: [
              {
                name: "data",
                idl_type: {attrs: [], ty: String(DOMString())},
                optional: false,
                variadic: true,
                default: None,
                attrs: [],
              }
            ],
            special: Regular(),
            attrs: [],
          },
        ),
        Operation(
          {
            name: Some("insertData"),
            idl_type: Some(Undefined()),
            arguments: [
              {
                name: "offset",
                idl_type: {attrs: [], ty: Integer(Unsigned(Long()))},
                optional: false,
                variadic: true,
                default: None,
                attrs: [],
              },
              {
                name: "data",
                idl_type: {attrs: [], ty: String(DOMString())},
                optional: false,
                variadic: true,
                default: None,
                attrs: [],
              }
            ],
            special: Regular(),
            attrs: [],
          },
        ),
        Operation(
          {
            name: Some("deleteData"),
            idl_type: Some(Undefined()),
            arguments: [
              {
                name: "offset",
                idl_type: {attrs: [], ty: Integer(Unsigned(Long()))},
                optional: false,
                variadic: true,
                default: None,
                attrs: [],
              },
              {
                name: "count",
                idl_type: {attrs: [], ty: Integer(Unsigned(Long()))},
                optional: false,
                variadic: true,
                default: None,
                attrs: [],
              }
            ],
            special: Regular(),
            attrs: [],
          },
        ),
        Operation(
          {
            name: Some("replaceData"),
            idl_type: Some(Undefined()),
            arguments: [
              {
                name: "offset",
                idl_type: {attrs: [], ty: Integer(Unsigned(Long()))},
                optional: false,
                variadic: true,
                default: None,
                attrs: [],
              },
              {
                name: "count",
                idl_type: {attrs: [], ty: Integer(Unsigned(Long()))},
                optional: false,
                variadic: true,
                default: None,
                attrs: [],
              },
              {
                name: "data",
                idl_type: {attrs: [], ty: String(DOMString())},
                optional: false,
                variadic: true,
                default: None,
                attrs: [],
              }
            ],
            special: Regular(),
            attrs: [],
          },
        )
      ],
      inheritance: Some("Node"),
      attrs: [{name: "Exposed", rhs: Ident("Window")}],
    },
  ),
  Interface(
    {
      name: "Text",
      partial: false,
      members: [
        Constructor(
          {
            arguments: [
              {
                name: "data",
                idl_type: {attrs: [], ty: String(DOMString())},
                optional: true,
                variadic: false,
                default: Some(String("""")),
                attrs: [],
              }
            ],
            attrs: [],
          },
        ),
        Operation(
          {
            name: Some("splitText"),
            idl_type: Some(Id("Text")),
            arguments: [
              {
                name: "offset",
                idl_type: {attrs: [], ty: Integer(Unsigned(Long()))},
                optional: false,
                variadic: true,
                default: None,
                attrs: [],
              }
            ],
            special: Regular(),
            attrs: [{name: "NewObject", rhs: NoArgs()}],
          },
        ),
        Attribute(
          {
            name: "wholeText",
            special: Regular(),
            readonly: true,
            idl_type: {attrs: [], ty: String(DOMString())},
            attrs: [],
          },
        )
      ],
      inheritance: Some("CharacterData"),
      attrs: [{name: "Exposed", rhs: Ident("Window")}],
    },
  ),
  Interface(
    {
      name: "CDATASection",
      partial: false,
      members: [],
      inheritance: Some("Text"),
      attrs: [{name: "Exposed", rhs: Ident("Window")}],
    },
  ),
  Interface(
    {
      name: "ProcessingInstruction",
      partial: false,
      members: [
        Attribute(
          {
            name: "target",
            special: Regular(),
            readonly: true,
            idl_type: {attrs: [], ty: String(DOMString())},
            attrs: [],
          },
        )
      ],
      inheritance: Some("CharacterData"),
      attrs: [{name: "Exposed", rhs: Ident("Window")}],
    },
  ),
  Interface(
    {
      name: "Comment",
      partial: false,
      members: [
        Constructor(
          {
            arguments: [
              {
                name: "data",
                idl_type: {attrs: [], ty: String(DOMString())},
                optional: true,
                variadic: false,
                default: Some(String("""")),
                attrs: [],
              }
            ],
            attrs: [],
          },
        )
      ],
      inheritance: Some("CharacterData"),
      attrs: [{name: "Exposed", rhs: Ident("Window")}],
    },
  ),
  Interface(
    {
      name: "AbstractRange",
      partial: false,
      members: [
        Attribute(
          {
            name: "startContainer",
            special: Regular(),
            readonly: true,
            idl_type: {attrs: [], ty: Id("Node")},
            attrs: [],
          },
        ),
        Attribute(
          {
            name: "startOffset",
            special: Regular(),
            readonly: true,
            idl_type: {attrs: [], ty: Integer(Unsigned(Long()))},
            attrs: [],
          },
        ),
        Attribute(
          {
            name: "endContainer",
            special: Regular(),
            readonly: true,
            idl_type: {attrs: [], ty: Id("Node")},
            attrs: [],
          },
        ),
        Attribute(
          {
            name: "endOffset",
            special: Regular(),
            readonly: true,
            idl_type: {attrs: [], ty: Integer(Unsigned(Long()))},
            attrs: [],
          },
        ),
        Attribute(
          {
            name: "collapsed",
            special: Regular(),
            readonly: true,
            idl_type: {attrs: [], ty: Boolean()},
            attrs: [],
          },
        )
      ],
      inheritance: None,
      attrs: [{name: "Exposed", rhs: Ident("Window")}],
    },
  ),
  Dictionary(
    {
      name: "StaticRangeInit",
      partial: false,
      members: [
        {
          name: "startContainer",
          required: true,
          idl_type: {attrs: [], ty: Id("Node")},
          attrs: [],
          default: None,
        },
        {
          name: "startOffset",
          required: true,
          idl_type: {attrs: [], ty: Integer(Unsigned(Long()))},
          attrs: [],
          default: None,
        },
        {
          name: "endContainer",
          required: true,
          idl_type: {attrs: [], ty: Id("Node")},
          attrs: [],
          default: None,
        },
        {
          name: "endOffset",
          required: true,
          idl_type: {attrs: [], ty: Integer(Unsigned(Long()))},
          attrs: [],
          default: None,
        }
      ],
      inheritance: None,
      attrs: [],
    },
  ),
  Interface(
    {
      name: "StaticRange",
      partial: false,
      members: [
        Constructor(
          {
            arguments: [
              {
                name: "init",
                idl_type: {attrs: [], ty: Id("StaticRangeInit")},
                optional: false,
                variadic: true,
                default: None,
                attrs: [],
              }
            ],
            attrs: [],
          },
        )
      ],
      inheritance: Some("AbstractRange"),
      attrs: [{name: "Exposed", rhs: Ident("Window")}],
    },
  ),
  Interface(
    {
      name: "Range",
      partial: false,
      members: [
        Constructor({arguments: [], attrs: []}),
        Attribute(
          {
            name: "commonAncestorContainer",
            special: Regular(),
            readonly: true,
            idl_type: {attrs: [], ty: Id("Node")},
            attrs: [],
          },
        ),
        Operation(
          {
            name: Some("setStart"),
            idl_type: Some(Undefined()),
            arguments: [
              {
                name: "node",
                idl_type: {attrs: [], ty: Id("Node")},
                optional: false,
                variadic: true,
                default: None,
                attrs: [],
              },
              {
                name: "offset",
                idl_type: {attrs: [], ty: Integer(Unsigned(Long()))},
                optional: false,
                variadic: true,
                default: None,
                attrs: [],
              }
            ],
            special: Regular(),
            attrs: [],
          },
        ),
        Operation(
          {
            name: Some("setEnd"),
            idl_type: Some(Undefined()),
            arguments: [
              {
                name: "node",
                idl_type: {attrs: [], ty: Id("Node")},
                optional: false,
                variadic: true,
                default: None,
                attrs: [],
              },
              {
                name: "offset",
                idl_type: {attrs: [], ty: Integer(Unsigned(Long()))},
                optional: false,
                variadic: true,
                default: None,
                attrs: [],
              }
            ],
            special: Regular(),
            attrs: [],
          },
        ),
        Operation(
          {
            name: Some("setStartBefore"),
            idl_type: Some(Undefined()),
            arguments: [
              {
                name: "node",
                idl_type: {attrs: [], ty: Id("Node")},
                optional: false,
                variadic: true,
                default: None,
                attrs: [],
              }
            ],
            special: Regular(),
            attrs: [],
          },
        ),
        Operation(
          {
            name: Some("setStartAfter"),
            idl_type: Some(Undefined()),
            arguments: [
              {
                name: "node",
                idl_type: {attrs: [], ty: Id("Node")},
                optional: false,
                variadic: true,
                default: None,
                attrs: [],
              }
            ],
            special: Regular(),
            attrs: [],
          },
        ),
        Operation(
          {
            name: Some("setEndBefore"),
            idl_type: Some(Undefined()),
            arguments: [
              {
                name: "node",
                idl_type: {attrs: [], ty: Id("Node")},
                optional: false,
                variadic: true,
                default: None,
                attrs: [],
              }
            ],
            special: Regular(),
            attrs: [],
          },
        ),
        Operation(
          {
            name: Some("setEndAfter"),
            idl_type: Some(Undefined()),
            arguments: [
              {
                name: "node",
                idl_type: {attrs: [], ty: Id("Node")},
                optional: false,
                variadic: true,
                default: None,
                attrs: [],
              }
            ],
            special: Regular(),
            attrs: [],
          },
        ),
        Operation(
          {
            name: Some("collapse"),
            idl_type: Some(Undefined()),
            arguments: [
              {
                name: "toStart",
                idl_type: {attrs: [], ty: Boolean()},
                optional: true,
                variadic: false,
                default: Some(Boolean(false)),
                attrs: [],
              }
            ],
            special: Regular(),
            attrs: [],
          },
        ),
        Operation(
          {
            name: Some("selectNode"),
            idl_type: Some(Undefined()),
            arguments: [
              {
                name: "node",
                idl_type: {attrs: [], ty: Id("Node")},
                optional: false,
                variadic: true,
                default: None,
                attrs: [],
              }
            ],
            special: Regular(),
            attrs: [],
          },
        ),
        Operation(
          {
            name: Some("selectNodeContents"),
            idl_type: Some(Undefined()),
            arguments: [
              {
                name: "node",
                idl_type: {attrs: [], ty: Id("Node")},
                optional: false,
                variadic: true,
                default: None,
                attrs: [],
              }
            ],
            special: Regular(),
            attrs: [],
          },
        ),
        Const(
          {
            name: "START_TO_START",
            idl_type: Integer(Unsigned(Short())),
            value: Number("0"),
            attrs: [],
          },
        ),
        Const(
          {
            name: "START_TO_END",
            idl_type: Integer(Unsigned(Short())),
            value: Number("1"),
            attrs: [],
          },
        ),
        Const(
          {
            name: "END_TO_END",
            idl_type: Integer(Unsigned(Short())),
            value: Number("2"),
            attrs: [],
          },
        ),
        Const(
          {
            name: "END_TO_START",
            idl_type: Integer(Unsigned(Short())),
            value: Number("3"),
            attrs: [],
          },
        ),
        Operation(
          {
            name: Some("compareBoundaryPoints"),
            idl_type: Some(Integer(Short())),
            arguments: [
              {
                name: "how",
                idl_type: {attrs: [], ty: Integer(Unsigned(Short()))},
                optional: false,
                variadic: true,
                default: None,
                attrs: [],
              },
              {
                name: "sourceRange",
                idl_type: {attrs: [], ty: Id("Range")},
                optional: false,
                variadic: true,
                default: None,
                attrs: [],
              }
            ],
            special: Regular(),
            attrs: [],
          },
        ),
        Operation(
          {
            name: Some("deleteContents"),
            idl_type: Some(Undefined()),
            arguments: [],
            special: Regular(),
            attrs: [{name: "CEReactions", rhs: NoArgs()}],
          },
        ),
        Operation(
          {
            name: Some("extractContents"),
            idl_type: Some(Id("DocumentFragment")),
            arguments: [],
            special: Regular(),
            attrs: [
              {name: "CEReactions", rhs: NoArgs()},
              {name: "NewObject", rhs: NoArgs()}
            ],
          },
        ),
        Operation(
          {
            name: Some("cloneContents"),
            idl_type: Some(Id("DocumentFragment")),
            arguments: [],
            special: Regular(),
            attrs: [
              {name: "CEReactions", rhs: NoArgs()},
              {name: "NewObject", rhs: NoArgs()}
            ],
          },
        ),
        Operation(
          {
            name: Some("insertNode"),
            idl_type: Some(Undefined()),
            arguments: [
              {
                name: "node",
                idl_type: {attrs: [], ty: Id("Node")},
                optional: false,
                variadic: true,
                default: None,
                attrs: [],
              }
            ],
            special: Regular(),
            attrs: [{name: "CEReactions", rhs: NoArgs()}],
          },
        ),
        Operation(
          {
            name: Some("surroundContents"),
            idl_type: Some(Undefined()),
            arguments: [
              {
                name: "newParent",
                idl_type: {attrs: [], ty: Id("Node")},
                optional: false,
                variadic: true,
                default: None,
                attrs: [],
              }
            ],
            special: Regular(),
            attrs: [{name: "CEReactions", rhs: NoArgs()}],
          },
        ),
        Operation(
          {
            name: Some("cloneRange"),
            idl_type: Some(Id("Range")),
            arguments: [],
            special: Regular(),
            attrs: [{name: "NewObject", rhs: NoArgs()}],
          },
        ),
        Operation(
          {
            name: Some("detach"),
            idl_type: Some(Undefined()),
            arguments: [],
            special: Regular(),
            attrs: [],
          },
        ),
        Operation(
          {
            name: Some("isPointInRange"),
            idl_type: Some(Boolean()),
            arguments: [
              {
                name: "node",
                idl_type: {attrs: [], ty: Id("Node")},
                optional: false,
                variadic: true,
                default: None,
                attrs: [],
              },
              {
                name: "offset",
                idl_type: {attrs: [], ty: Integer(Unsigned(Long()))},
                optional: false,
                variadic: true,
                default: None,
                attrs: [],
              }
            ],
            special: Regular(),
            attrs: [],
          },
        ),
        Operation(
          {
            name: Some("comparePoint"),
            idl_type: Some(Integer(Short())),
            arguments: [
              {
                name: "node",
                idl_type: {attrs: [], ty: Id("Node")},
                optional: false,
                variadic: true,
                default: None,
                attrs: [],
              },
              {
                name: "offset",
                idl_type: {attrs: [], ty: Integer(Unsigned(Long()))},
                optional: false,
                variadic: true,
                default: None,
                attrs: [],
              }
            ],
            special: Regular(),
            attrs: [],
          },
        ),
        Operation(
          {
            name: Some("intersectsNode"),
            idl_type: Some(Boolean()),
            arguments: [
              {
                name: "node",
                idl_type: {attrs: [], ty: Id("Node")},
                optional: false,
                variadic: true,
                default: None,
                attrs: [],
              }
            ],
            special: Regular(),
            attrs: [],
          },
        ),
        Operation(
          {
            name: None,
            idl_type: None,
            arguments: [],
            special: Stringifier(),
            attrs: [],
          },
        )
      ],
      inheritance: Some("AbstractRange"),
      attrs: [{name: "Exposed", rhs: Ident("Window")}],
    },
  ),
  Interface(
    {
      name: "NodeIterator",
      partial: false,
      members: [
        Attribute(
          {
            name: "root",
            special: Regular(),
            readonly: true,
            idl_type: {attrs: [], ty: Id("Node")},
            attrs: [{name: "SameObject", rhs: NoArgs()}],
          },
        ),
        Attribute(
          {
            name: "referenceNode",
            special: Regular(),
            readonly: true,
            idl_type: {attrs: [], ty: Id("Node")},
            attrs: [],
          },
        ),
        Attribute(
          {
            name: "pointerBeforeReferenceNode",
            special: Regular(),
            readonly: true,
            idl_type: {attrs: [], ty: Boolean()},
            attrs: [],
          },
        ),
        Attribute(
          {
            name: "whatToShow",
            special: Regular(),
            readonly: true,
            idl_type: {attrs: [], ty: Integer(Unsigned(Long()))},
            attrs: [],
          },
        ),
        Attribute(
          {
            name: "filter",
            special: Regular(),
            readonly: true,
            idl_type: {attrs: [], ty: Nullable(Id("NodeFilter"))},
            attrs: [],
          },
        ),
        Operation(
          {
            name: Some("nextNode"),
            idl_type: Some(Nullable(Id("Node"))),
            arguments: [],
            special: Regular(),
            attrs: [],
          },
        ),
        Operation(
          {
            name: Some("previousNode"),
            idl_type: Some(Nullable(Id("Node"))),
            arguments: [],
            special: Regular(),
            attrs: [],
          },
        ),
        Operation(
          {
            name: Some("detach"),
            idl_type: Some(Undefined()),
            arguments: [],
            special: Regular(),
            attrs: [],
          },
        )
      ],
      inheritance: None,
      attrs: [{name: "Exposed", rhs: Ident("Window")}],
    },
  ),
  Interface(
    {
      name: "TreeWalker",
      partial: false,
      members: [
        Attribute(
          {
            name: "root",
            special: Regular(),
            readonly: true,
            idl_type: {attrs: [], ty: Id("Node")},
            attrs: [{name: "SameObject", rhs: NoArgs()}],
          },
        ),
        Attribute(
          {
            name: "whatToShow",
            special: Regular(),
            readonly: true,
            idl_type: {attrs: [], ty: Integer(Unsigned(Long()))},
            attrs: [],
          },
        ),
        Attribute(
          {
            name: "filter",
            special: Regular(),
            readonly: true,
            idl_type: {attrs: [], ty: Nullable(Id("NodeFilter"))},
            attrs: [],
          },
        ),
        Attribute(
          {
            name: "currentNode",
            special: Regular(),
            readonly: false,
            idl_type: {attrs: [], ty: Id("Node")},
            attrs: [],
          },
        ),
        Operation(
          {
            name: Some("parentNode"),
            idl_type: Some(Nullable(Id("Node"))),
            arguments: [],
            special: Regular(),
            attrs: [],
          },
        ),
        Operation(
          {
            name: Some("firstChild"),
            idl_type: Some(Nullable(Id("Node"))),
            arguments: [],
            special: Regular(),
            attrs: [],
          },
        ),
        Operation(
          {
            name: Some("lastChild"),
            idl_type: Some(Nullable(Id("Node"))),
            arguments: [],
            special: Regular(),
            attrs: [],
          },
        ),
        Operation(
          {
            name: Some("previousSibling"),
            idl_type: Some(Nullable(Id("Node"))),
            arguments: [],
            special: Regular(),
            attrs: [],
          },
        ),
        Operation(
          {
            name: Some("nextSibling"),
            idl_type: Some(Nullable(Id("Node"))),
            arguments: [],
            special: Regular(),
            attrs: [],
          },
        ),
        Operation(
          {
            name: Some("previousNode"),
            idl_type: Some(Nullable(Id("Node"))),
            arguments: [],
            special: Regular(),
            attrs: [],
          },
        ),
        Operation(
          {
            name: Some("nextNode"),
            idl_type: Some(Nullable(Id("Node"))),
            arguments: [],
            special: Regular(),
            attrs: [],
          },
        )
      ],
      inheritance: None,
      attrs: [{name: "Exposed", rhs: Ident("Window")}],
    },
  ),
  Interface(
    {
      name: "NodeFilter",
      partial: false,
      members: [
        Const(
          {
            name: "FILTER_ACCEPT",
            idl_type: Integer(Unsigned(Short())),
            value: Number("1"),
            attrs: [],
          },
        ),
        Const(
          {
            name: "FILTER_REJECT",
            idl_type: Integer(Unsigned(Short())),
            value: Number("2"),
            attrs: [],
          },
        ),
        Const(
          {
            name: "FILTER_SKIP",
            idl_type: Integer(Unsigned(Short())),
            value: Number("3"),
            attrs: [],
          },
        ),
        Const(
          {
            name: "SHOW_ALL",
            idl_type: Integer(Unsigned(Long())),
            value: Number("0xFFFFFFFF"),
            attrs: [],
          },
        ),
        Const(
          {
            name: "SHOW_ELEMENT",
            idl_type: Integer(Unsigned(Long())),
            value: Number("0x1"),
            attrs: [],
          },
        ),
        Const(
          {
            name: "SHOW_ATTRIBUTE",
            idl_type: Integer(Unsigned(Long())),
            value: Number("0x2"),
            attrs: [],
          },
        ),
        Const(
          {
            name: "SHOW_TEXT",
            idl_type: Integer(Unsigned(Long())),
            value: Number("0x4"),
            attrs: [],
          },
        ),
        Const(
          {
            name: "SHOW_CDATA_SECTION",
            idl_type: Integer(Unsigned(Long())),
            value: Number("0x8"),
            attrs: [],
          },
        ),
        Const(
          {
            name: "SHOW_ENTITY_REFERENCE",
            idl_type: Integer(Unsigned(Long())),
            value: Number("0x10"),
            attrs: [],
          },
        ),
        Const(
          {
            name: "SHOW_ENTITY",
            idl_type: Integer(Unsigned(Long())),
            value: Number("0x20"),
            attrs: [],
          },
        ),
        Const(
          {
            name: "SHOW_PROCESSING_INSTRUCTION",
            idl_type: Integer(Unsigned(Long())),
            value: Number("0x40"),
            attrs: [],
          },
        ),
        Const(
          {
            name: "SHOW_COMMENT",
            idl_type: Integer(Unsigned(Long())),
            value: Number("0x80"),
            attrs: [],
          },
        ),
        Const(
          {
            name: "SHOW_DOCUMENT",
            idl_type: Integer(Unsigned(Long())),
            value: Number("0x100"),
            attrs: [],
          },
        ),
        Const(
          {
            name: "SHOW_DOCUMENT_TYPE",
            idl_type: Integer(Unsigned(Long())),
            value: Number("0x200"),
            attrs: [],
          },
        ),
        Const(
          {
            name: "SHOW_DOCUMENT_FRAGMENT",
            idl_type: Integer(Unsigned(Long())),
            value: Number("0x400"),
            attrs: [],
          },
        ),
        Const(
          {
            name: "SHOW_NOTATION",
            idl_type: Integer(Unsigned(Long())),
            value: Number("0x800"),
            attrs: [],
          },
        ),
        Operation(
          {
            name: Some("acceptNode"),
            idl_type: Some(Integer(Unsigned(Short()))),
            arguments: [
              {
                name: "node",
                idl_type: {attrs: [], ty: Id("Node")},
                optional: false,
                variadic: true,
                default: None,
                attrs: [],
              }
            ],
            special: Regular(),
            attrs: [],
          },
        )
      ],
      inheritance: None,
      attrs: [{name: "Exposed", rhs: Ident("Window")}],
    },
  ),
  Interface(
    {
      name: "DOMTokenList",
      partial: false,
      members: [
        Attribute(
          {
            name: "length",
            special: Regular(),
            readonly: true,
            idl_type: {attrs: [], ty: Integer(Unsigned(Long()))},
            attrs: [],
          },
        ),
        Operation(
          {
            name: Some("item"),
            idl_type: Some(Nullable(String(DOMString()))),
            arguments: [
              {
                name: "index",
                idl_type: {attrs: [], ty: Integer(Unsigned(Long()))},
                optional: false,
                variadic: true,
                default: None,
                attrs: [],
              }
            ],
            special: Getter(),
            attrs: [],
          },
        ),
        Operation(
          {
            name: Some("contains"),
            idl_type: Some(Boolean()),
            arguments: [
              {
                name: "token",
                idl_type: {attrs: [], ty: String(DOMString())},
                optional: false,
                variadic: true,
                default: None,
                attrs: [],
              }
            ],
            special: Regular(),
            attrs: [],
          },
        ),
        Operation(
          {
            name: Some("add"),
            idl_type: Some(Undefined()),
            arguments: [
              {
                name: "tokens",
                idl_type: {attrs: [], ty: String(DOMString())},
                optional: false,
                variadic: true,
                default: None,
                attrs: [],
              }
            ],
            special: Regular(),
            attrs: [{name: "CEReactions", rhs: NoArgs()}],
          },
        ),
        Operation(
          {
            name: Some("remove"),
            idl_type: Some(Undefined()),
            arguments: [
              {
                name: "tokens",
                idl_type: {attrs: [], ty: String(DOMString())},
                optional: false,
                variadic: true,
                default: None,
                attrs: [],
              }
            ],
            special: Regular(),
            attrs: [{name: "CEReactions", rhs: NoArgs()}],
          },
        ),
        Operation(
          {
            name: Some("toggle"),
            idl_type: Some(Boolean()),
            arguments: [
              {
                name: "token",
                idl_type: {attrs: [], ty: String(DOMString())},
                optional: false,
                variadic: true,
                default: None,
                attrs: [],
              },
              {
                name: "force",
                idl_type: {attrs: [], ty: Boolean()},
                optional: true,
                variadic: false,
                default: None,
                attrs: [],
              }
            ],
            special: Regular(),
            attrs: [{name: "CEReactions", rhs: NoArgs()}],
          },
        ),
        Operation(
          {
            name: Some("replace"),
            idl_type: Some(Boolean()),
            arguments: [
              {
                name: "token",
                idl_type: {attrs: [], ty: String(DOMString())},
                optional: false,
                variadic: true,
                default: None,
                attrs: [],
              },
              {
                name: "newToken",
                idl_type: {attrs: [], ty: String(DOMString())},
                optional: false,
                variadic: true,
                default: None,
                attrs: [],
              }
            ],
            special: Regular(),
            attrs: [{name: "CEReactions", rhs: NoArgs()}],
          },
        ),
        Operation(
          {
            name: Some("supports"),
            idl_type: Some(Boolean()),
            arguments: [
              {
                name: "token",
                idl_type: {attrs: [], ty: String(DOMString())},
                optional: false,
                variadic: true,
                default: None,
                attrs: [],
              }
            ],
            special: Regular(),
            attrs: [],
          },
        ),
        Attribute(
          {
            name: "value",
            special: Regular(),
            readonly: false,
            idl_type: {attrs: [], ty: String(DOMString())},
            attrs: [{name: "CEReactions", rhs: NoArgs()}],
          },
        ),
        Iterable(
          {
            idl_type: {attrs: [], ty: String(DOMString())},
            opt_type: None,
            async: false,
            attrs: [],
          },
        )
      ],
      inheritance: None,
      attrs: [{name: "Exposed", rhs: Ident("Window")}],
    },
  ),
  Interface(
    {
      name: "XPathResult",
      partial: false,
      members: [
        Const(
          {
            name: "ANY_TYPE",
            idl_type: Integer(Unsigned(Short())),
            value: Number("0"),
            attrs: [],
          },
        ),
        Const(
          {
            name: "NUMBER_TYPE",
            idl_type: Integer(Unsigned(Short())),
            value: Number("1"),
            attrs: [],
          },
        ),
        Const(
          {
            name: "STRING_TYPE",
            idl_type: Integer(Unsigned(Short())),
            value: Number("2"),
            attrs: [],
          },
        ),
        Const(
          {
            name: "BOOLEAN_TYPE",
            idl_type: Integer(Unsigned(Short())),
            value: Number("3"),
            attrs: [],
          },
        ),
        Const(
          {
            name: "UNORDERED_NODE_ITERATOR_TYPE",
            idl_type: Integer(Unsigned(Short())),
            value: Number("4"),
            attrs: [],
          },
        ),
        Const(
          {
            name: "ORDERED_NODE_ITERATOR_TYPE",
            idl_type: Integer(Unsigned(Short())),
            value: Number("5"),
            attrs: [],
          },
        ),
        Const(
          {
            name: "UNORDERED_NODE_SNAPSHOT_TYPE",
            idl_type: Integer(Unsigned(Short())),
            value: Number("6"),
            attrs: [],
          },
        ),
        Const(
          {
            name: "ORDERED_NODE_SNAPSHOT_TYPE",
            idl_type: Integer(Unsigned(Short())),
            value: Number("7"),
            attrs: [],
          },
        ),
        Const(
          {
            name: "ANY_UNORDERED_NODE_TYPE",
            idl_type: Integer(Unsigned(Short())),
            value: Number("8"),
            attrs: [],
          },
        ),
        Const(
          {
            name: "FIRST_ORDERED_NODE_TYPE",
            idl_type: Integer(Unsigned(Short())),
            value: Number("9"),
            attrs: [],
          },
        ),
        Attribute(
          {
            name: "resultType",
            special: Regular(),
            readonly: true,
            idl_type: {attrs: [], ty: Integer(Unsigned(Short()))},
            attrs: [],
          },
        ),
        Attribute(
          {
            name: "numberValue",
            special: Regular(),
            readonly: true,
            idl_type: {attrs: [], ty: Floating(Unrestricted(Double()))},
            attrs: [],
          },
        ),
        Attribute(
          {
            name: "stringValue",
            special: Regular(),
            readonly: true,
            idl_type: {attrs: [], ty: String(DOMString())},
            attrs: [],
          },
        ),
        Attribute(
          {
            name: "booleanValue",
            special: Regular(),
            readonly: true,
            idl_type: {attrs: [], ty: Boolean()},
            attrs: [],
          },
        ),
        Attribute(
          {
            name: "singleNodeValue",
            special: Regular(),
            readonly: true,
            idl_type: {attrs: [], ty: Nullable(Id("Node"))},
            attrs: [],
          },
        ),
        Attribute(
          {
            name: "invalidIteratorState",
            special: Regular(),
            readonly: true,
            idl_type: {attrs: [], ty: Boolean()},
            attrs: [],
          },
        ),
        Attribute(
          {
            name: "snapshotLength",
            special: Regular(),
            readonly: true,
            idl_type: {attrs: [], ty: Integer(Unsigned(Long()))},
            attrs: [],
          },
        ),
        Operation(
          {
            name: Some("iterateNext"),
            idl_type: Some(Nullable(Id("Node"))),
            arguments: [],
            special: Regular(),
            attrs: [],
          },
        ),
        Operation(
          {
            name: Some("snapshotItem"),
            idl_type: Some(Nullable(Id("Node"))),
            arguments: [
              {
                name: "index",
                idl_type: {attrs: [], ty: Integer(Unsigned(Long()))},
                optional: false,
                variadic: true,
                default: None,
                attrs: [],
              }
            ],
            special: Regular(),
            attrs: [],
          },
        )
      ],
      inheritance: None,
      attrs: [{name: "Exposed", rhs: Ident("Window")}],
    },
  ),
  Interface(
    {
      name: "XPathExpression",
      partial: false,
      members: [
        Operation(
          {
            name: Some("evaluate"),
            idl_type: Some(Id("XPathResult")),
            arguments: [
              {
                name: "contextNode",
                idl_type: {attrs: [], ty: Id("Node")},
                optional: false,
                variadic: true,
                default: None,
                attrs: [],
              },
              {
                name: "type",
                idl_type: {attrs: [], ty: Integer(Unsigned(Short()))},
                optional: true,
                variadic: false,
                default: Some(Number("0")),
                attrs: [],
              },
              {
                name: "result",
                idl_type: {attrs: [], ty: Nullable(Id("XPathResult"))},
                optional: true,
                variadic: false,
                default: Some(Null()),
                attrs: [],
              }
            ],
            special: Regular(),
            attrs: [],
          },
        )
      ],
      inheritance: None,
      attrs: [{name: "Exposed", rhs: Ident("Window")}],
    },
  ),
  Interface(
    {
      name: "XPathNSResolver",
      partial: false,
      members: [
        Operation(
          {
            name: Some("lookupNamespaceURI"),
            idl_type: Some(Nullable(String(DOMString()))),
            arguments: [
              {
                name: "prefix",
                idl_type: {attrs: [], ty: Nullable(String(DOMString()))},
                optional: false,
                variadic: true,
                default: None,
                attrs: [],
              }
            ],
            special: Regular(),
            attrs: [],
          },
        )
      ],
      inheritance: None,
      attrs: [],
    },
  ),
  InterfaceMixin(
    {
      name: "XPathEvaluatorBase",
      partial: false,
      members: [
        Operation(
          {
            name: Some("createExpression"),
            idl_type: Some(Id("XPathExpression")),
            arguments: [
              {
                name: "expression",
                idl_type: {attrs: [], ty: String(DOMString())},
                optional: false,
                variadic: true,
                default: None,
                attrs: [],
              },
              {
                name: "resolver",
                idl_type: {attrs: [], ty: Nullable(Id("XPathNSResolver"))},
                optional: true,
                variadic: false,
                default: Some(Null()),
                attrs: [],
              }
            ],
            special: Regular(),
            attrs: [{name: "NewObject", rhs: NoArgs()}],
          },
        ),
        Operation(
          {
            name: Some("createNSResolver"),
            idl_type: Some(Id("Node")),
            arguments: [
              {
                name: "nodeResolver",
                idl_type: {attrs: [], ty: Id("Node")},
                optional: false,
                variadic: true,
                default: None,
                attrs: [],
              }
            ],
            special: Regular(),
            attrs: [],
          },
        ),
        Operation(
          {
            name: Some("evaluate"),
            idl_type: Some(Id("XPathResult")),
            arguments: [
              {
                name: "expression",
                idl_type: {attrs: [], ty: String(DOMString())},
                optional: false,
                variadic: true,
                default: None,
                attrs: [],
              },
              {
                name: "contextNode",
                idl_type: {attrs: [], ty: Id("Node")},
                optional: false,
                variadic: true,
                default: None,
                attrs: [],
              },
              {
                name: "resolver",
                idl_type: {attrs: [], ty: Nullable(Id("XPathNSResolver"))},
                optional: true,
                variadic: false,
                default: Some(Null()),
                attrs: [],
              },
              {
                name: "type",
                idl_type: {attrs: [], ty: Integer(Unsigned(Short()))},
                optional: true,
                variadic: false,
                default: Some(Number("0")),
                attrs: [],
              },
              {
                name: "result",
                idl_type: {attrs: [], ty: Nullable(Id("XPathResult"))},
                optional: true,
                variadic: false,
                default: Some(Null()),
                attrs: [],
              }
            ],
            special: Regular(),
            attrs: [],
          },
        )
      ],
      attrs: [],
    },
  ),
  Includes({target: "Document", includes: "XPathEvaluatorBase", attrs: []}),
  Interface(
    {
      name: "XPathEvaluator",
      partial: false,
      members: [Constructor({arguments: [], attrs: []})],
      inheritance: None,
      attrs: [{name: "Exposed", rhs: Ident("Window")}],
    },
  ),
  Includes(
    {target: "XPathEvaluator", includes: "XPathEvaluatorBase", attrs: []},
  ),
  Interface(
    {
      name: "XSLTProcessor",
      partial: false,
      members: [
        Constructor({arguments: [], attrs: []}),
        Operation(
          {
            name: Some("importStylesheet"),
            idl_type: Some(Undefined()),
            arguments: [
              {
                name: "style",
                idl_type: {attrs: [], ty: Id("Node")},
                optional: false,
                variadic: true,
                default: None,
                attrs: [],
              }
            ],
            special: Regular(),
            attrs: [],
          },
        ),
        Operation(
          {
            name: Some("transformToFragment"),
            idl_type: Some(Id("DocumentFragment")),
            arguments: [
              {
                name: "source",
                idl_type: {attrs: [], ty: Id("Node")},
                optional: false,
                variadic: true,
                default: None,
                attrs: [],
              },
              {
                name: "output",
                idl_type: {attrs: [], ty: Id("Document")},
                optional: false,
                variadic: true,
                default: None,
                attrs: [],
              }
            ],
            special: Regular(),
            attrs: [{name: "CEReactions", rhs: NoArgs()}],
          },
        ),
        Operation(
          {
            name: Some("transformToDocument"),
            idl_type: Some(Id("Document")),
            arguments: [
              {
                name: "source",
                idl_type: {attrs: [], ty: Id("Node")},
                optional: false,
                variadic: true,
                default: None,
                attrs: [],
              }
            ],
            special: Regular(),
            attrs: [{name: "CEReactions", rhs: NoArgs()}],
          },
        ),
        Operation(
          {
            name: Some("setParameter"),
            idl_type: Some(Undefined()),
            arguments: [
              {
                name: "namespaceURI",
                idl_type: {attrs: [], ty: String(DOMString())},
                optional: false,
                variadic: true,
                default: None,
                attrs: [{name: "LegacyNullToEmptyString", rhs: NoArgs()}],
              },
              {
                name: "localName",
                idl_type: {attrs: [], ty: String(DOMString())},
                optional: false,
                variadic: true,
                default: None,
                attrs: [],
              },
              {
                name: "value",
                idl_type: {attrs: [], ty: Any()},
                optional: false,
                variadic: true,
                default: None,
                attrs: [],
              }
            ],
            special: Regular(),
            attrs: [],
          },
        ),
        Operation(
          {
            name: Some("getParameter"),
            idl_type: Some(Any()),
            arguments: [
              {
                name: "namespaceURI",
                idl_type: {attrs: [], ty: String(DOMString())},
                optional: false,
                variadic: true,
                default: None,
                attrs: [{name: "LegacyNullToEmptyString", rhs: NoArgs()}],
              },
              {
                name: "localName",
                idl_type: {attrs: [], ty: String(DOMString())},
                optional: false,
                variadic: true,
                default: None,
                attrs: [],
              }
            ],
            special: Regular(),
            attrs: [],
          },
        ),
        Operation(
          {
            name: Some("removeParameter"),
            idl_type: Some(Undefined()),
            arguments: [
              {
                name: "namespaceURI",
                idl_type: {attrs: [], ty: String(DOMString())},
                optional: false,
                variadic: true,
                default: None,
                attrs: [{name: "LegacyNullToEmptyString", rhs: NoArgs()}],
              },
              {
                name: "localName",
                idl_type: {attrs: [], ty: String(DOMString())},
                optional: false,
                variadic: true,
                default: None,
                attrs: [],
              }
            ],
            special: Regular(),
            attrs: [],
          },
        ),
        Operation(
          {
            name: Some("clearParameters"),
            idl_type: Some(Undefined()),
            arguments: [],
            special: Regular(),
            attrs: [],
          },
        ),
        Operation(
          {
            name: Some("reset"),
            idl_type: Some(Undefined()),
            arguments: [],
            special: Regular(),
            attrs: [],
          },
        )
      ],
      inheritance: None,
      attrs: [{name: "Exposed", rhs: Ident("Window")}],
    },
  )
]
